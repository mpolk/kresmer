<?xml version="1.0" encoding="utf-8"?>
<?xml-model href="xsd/kresmer-library.xsd"?>
<kresmer-library xmlns:Kre="Kre" xmlns:v-bind="v-bind">
    <!-- Test data (just fo fun)-->
    <defs>
        <text id="kre:std:Crown">ðŸ‘‘</text>
    </defs>

    <component-class name="YellowRectangle">
        <template>  
            <rect x="0" y="0" v-bind:width="width" v-bind:height="height" 
                  v-bind:fill="fill" stroke="black" stroke-width="5px" stroke-opacity="0.5"></rect>
        </template>
        <props>
            <prop name="width" type="Number" required="true"/>
            <prop name="height" type="Number" required="true"/>
            <prop name="fill" type="String" default="yellow"/>
        </props>
    </component-class>

    <component-class name="Rectangle">
        <template>  
            <rect x="0" y="0" v-bind:width="width" v-bind:height="height" 
                  v-bind:fill="fill"></rect>
        </template>
        <props>
            <prop name="width" type="Number" required="true"/>
            <prop name="height" type="Number" required="true"/>
            <prop name="fill" type="String" default="yellow"/>
        </props>
    </component-class>


    <component-class name="Text">
        <template>  
            <text x="0" y="0" v-bind:fill="color" v-bind:font-size="fontSize" v-bind:font-family="fontFamily">
                <slot></slot>
            </text>
        </template>
        <props>
            <prop name="color" type="String" />
            <prop name="font-size" type="String" />
            <prop name="font-family" type="String" />
        </props>
    </component-class>

    <component-class name="BorderedKresmer">
        <template>
            <rect x="0" y="0" v-bind:width="width" v-bind:height="height" 
                v-bind:fill="fill" stroke="black" stroke-width="5px" stroke-opacity="0.5"></rect>
            <use href="#kre:std:Crown" x="10" y="30" />
            <text x="40" y="30" v-bind:fill="textColor" v-bind:font-size="fontSize" v-bind:font-family="fontFamily">{{text}}</text>
        </template>
        <props>
            <prop name="width" type="Number" required="true"/>
            <prop name="height" type="Number" required="true"/>
            <prop name="fill" type="String" default="yellow"/>
            <prop name="text" type="String"/>
            <prop name="textColor" type="String" default="black"/>
            <prop name="font-size" type="String" />
            <prop name="font-family" type="String" />
        </props>
    </component-class>

    <component-class name="PatrioticKresmer">
        <template>
            <rect x="0" y="0" v-bind:width="width" v-bind:height="height/2" fill="blue"/>
            <rect x="0" v-bind:y="height/2" v-bind:width="width" v-bind:height="height/2" fill="yellow"/>
            <text v-bind:x="width*0.2" v-bind:y="height/1.7" fill="white" v-bind:font-size="fontSize" v-bind:font-family="fontFamily">{{text}}</text>
            <text v-bind:x="width*0.2 + 1" v-bind:y="height/1.7 + 1" fill="blue" v-bind:font-size="fontSize" v-bind:font-family="fontFamily">{{text}}</text>
        </template>
        <props>
            <prop name="width" type="Number" required="true"/>
            <prop name="height" type="Number" required="true"/>
            <prop name="text" type="String"/>
            <prop name="font-size" type="String" />
            <prop name="font-family" type="String" />
        </props>
    </component-class>

    <component-class name="Crown">
        <template>
            <text x="0" y="0" v-bind:stroke="color" v-bind:font-size="fontSize">ðŸ‘‘</text>
        </template>
        <props>
            <prop name="fontSize" type="String" />
            <prop name="color" type="String" default="gold"/>
        </props>
    </component-class>

    <component-class name="SilverKresmer">
        <template>
            <rect x="0" y="0" v-bind:width="width" v-bind:height="height" vector-effect="non-scaling-stroke"
                    stroke="silver" stroke-width="8px" stroke-opacity="0.5"/>
            <text v-bind:x="width*0.25" v-bind:y="height*0.6" stroke="silver" v-bind:font-size="fontSize">{{text}}</text>
            <Kre:Crown v-bind:x="10" v-bind:y="height*0.6" v-bind:font-size="fontSize" color="silver"/>
            <text v-bind:x="width*0.75 + i*22" v-bind:y="height*0.6" fill="silver" v-bind:font-size="fontSize" v-for="i in 3">âšœ</text>
        </template>
        <props>
            <prop name="width" type="Number" required="true"/>
            <prop name="height" type="Number" required="true"/>
            <prop name="text" type="String"/>
            <prop name="font-size" type="String" />
            <prop name="font-family" type="String" />
        </props>
    </component-class>

    <!--                       Something like real definitions                      -->

    <!-- Crossing arrows traditionally used to be drawn on the top of routers and switches -->
    <component-class name="CrossArrows" instantiate="auto">
        <template>
            {{$global("crossArrows", [
                [0.1,0.5], [0.2,0.7], [0.2,0.6],
                [0.4,0.6], [0.4,0.8], [0.3,0.8], [0.5,0.9],
                [0.7,0.8], [0.6,0.8], [0.6,0.6],
                [0.8,0.6], [0.8,0.7], [0.9,0.5],
                [0.8,0.3], [0.8,0.4],
                [0.6,0.4], [0.6,0.2], [0.7,0.2], [0.5,0.1],
                [0.3,0.2], [0.4,0.2], [0.4,0.4],
                [0.2,0.4], [0.2,0.3]
            ])}}
        </template>
    </component-class>

    <!-- Switch or router port -->
    <component-class name="Port">
        <template>
            <rect v-bind:width="d" v-bind:height="d" class="port-icon body"/>
            <polyline class="port-icon bottom" 
                      v-bind:points="`0,${d} ${d*0.15},${d*0.75} ${d*0.85},${d*0.75} ${d},${d}`"/>
            <rect class="port-icon far-end" v-bind:x="d*0.15" v-bind:y="d*0.05" 
                  v-bind:width="d*0.7" v-bind:height="d*0.7"/>
            <text v-bind:x="d/2" v-bind:y="d*0.8" text-anchor="middle" v-bind:font-size="d*0.8"
                  class="port-name">{{name}}</text>
            <connection-point v-bind:name="name" v-bind:d="d*0.8" v-bind:x="d/2" v-bind:y="d/2"/>
        </template>
        <style>
            .port-name {font-family: sans-serif; fill: white;}
            .port-icon.body {stroke: white;}
            .port-icon.bottom {filter: brightness(1.4)}
            .port-icon.far-end {filter: brightness(0.7)}
        </style>
        <props>
            <prop name="d" type="Number" required="true" /> <!-- diameter (or similar size parameter-->
            <prop name="name" type="String" />
        </props>
    </component-class>

    <!-- General switch -->
    <component-class name="Switch">
        <template>
            <rect x="0" y="0" v-bind:width="width" v-bind:height="height" class="facet" />
            <Kre:Port v-for="i in nPorts" v-bind:x="height*(0.75*i - 0.5)" v-bind:y="height/4" v-bind:d="height/2" 
                      v-bind:name="i"/>
            <g v-if="perspective === 'center'" v-bind:transform="`scale(${width} ${-1.4*height})`">
                <polyline 
                    v-bind:points="$p($ThreeVectorTransform({u:[1,0], v:[0.2,1], w:[-0.4,0]})
                                                           ([0,0], [0,1], [1,1], [1,0]))"
                    class="top facet"/>
                <polyline 
                    v-bind:points="$p($ThreeVectorTransform({u:[1,0], v:[0.2,1], w:[-0.4,0]})(...$$.crossArrows))"
                    class="facet"/>
            </g>
            <g v-if="perspective === 'right'" v-bind:transform="`scale(${width} ${-1.4*height}) skewX(20)`">
                <polyline points="0,0 0,1 1,1 1,0" class="top facet"/>
                <polyline v-bind:points="$p($$.crossArrows)" class="facet"/>
            </g>
            <rect v-if="perspective === 'right'" v-bind:x="width" y="0" 
                  v-bind:width="height*2.26" v-bind:height="height" 
                  class="side facet" transform="skewY(-32)" v-bind:transform-origin="`${width} 0`"/>
            <g v-if="perspective === 'left'" v-bind:transform="`scale(${width} ${-1.4*height}) skewX(-20)`">
                <polyline points="0,0 0,1 1,1 1,0" class="top facet"/>
                <polyline v-bind:points="$p($$.crossArrows)" class="facet"/>
            </g>
            <rect v-if="perspective === 'left'" v-bind:x="-height*2.26" y="0" v-bind:width="height*2.26" 
                  v-bind:height="height" class="side facet" transform="skewY(32)"/>
            <text v-bind:x="nameX" v-bind:y="nameY" v-bind:font-size="height*0.75" 
                  text-anchor="middle" v-bind:class="nameClass">{{name}}</text>
        </template>
        <style>
            .switch-name, .switch-name-no-persp { font-family: sans-serif; fill: black; }
            .port-icon { fill: #525252; }
            .facet {fill: lightgray;}
            .top.facet { filter: brightness(0.7); }
            .side.facet { filter: brightness(0.5); }
        </style>
        <props>
            <prop name="nPorts" type="Number" default="8" />
            <prop name="height" type="Number" required="true"/>
            <prop name="perspective" type="String" choices="left,right,center,none" default="center" />
        </props>
        <computed-props>
            <computed-prop name="width">props.height * (0.25 + 0.75*props.nPorts)</computed-prop>
            <computed-prop name="nameX">props.perspective === 'right' ? computedProps.width*0.7 :
                                        props.perspective === 'left' ? computedProps.width*0.3 :
                                        computedProps.width*0.5
            </computed-prop>
            <computed-prop name="nameY">
                props.perspective === "none" ? -props.height*0.3 : -props.height*0.55
            </computed-prop>
            <computed-prop name="nameClass">
                props.perspective === "none" ? "switch-name-no-persp" : "switch-name"
            </computed-prop>
        </computed-props>
    </component-class>

    <!-- Various breeds of the Switches -->
    <component-class name="ExtremeSwitch">
        <template>
            <Kre:Switch v-bind:name="name" v-bind:height="height" v-bind:n-ports="nPorts"
                        v-bind:perspective="perspective"/>
        </template>
        <style extends="Switch">
            .switch-name { fill: white; text-shadow: 3px 3px 3px black; }
            .facet {fill: magenta;}
            .port-icon { fill: #651065; }
            .port-icon.body { stroke: #fde3fd; }
        </style>
        <props>
            <prop name="nPorts" type="Number" default="8" />
            <prop name="height" type="Number" required="true"/>
            <prop name="perspective" type="String" choices="left,right,center,none" default="center" />
        </props>
    </component-class>

    <component-class name="Catalyst">
        <template>
            <Kre:Switch v-bind:name="name" v-bind:height="height" v-bind:n-ports="nPorts"
                        v-bind:perspective="perspective"/>
        </template>
        <style extends="Switch">
            .switch-name { fill: yellow; text-shadow: 3px 3px 3px black; }
            .facet {fill: darkcyan;}
            .port-icon {fill: #005757;}
        </style>
        <props>
            <prop name="nPorts" type="Number" default="8" />
            <prop name="height" type="Number" required="true"/>
            <prop name="perspective" type="String" choices="left,right,center,none" default="center" />
        </props>
    </component-class>

    <!-- Various link types -->
    <link-class name="twisted-pair" type="copper">
        <style>
            .link {stroke: #8c8c8c;}
            .padding {stroke-width: 8px;}
            .segment {stroke-width: 2px;}
            .segment.highlighted {stroke: #525440; stroke-width: 3px}
            .segment.selected {stroke: #525440; stroke-width: 4px}
            .vertex {stroke: #525440; stroke-width: 4px; fill: white; r: 6px}
            .vertex.padding {r: 60px; fill: gray; fill-opacity: 0.3}
            .vertex.blinker {r: 10px; stroke: red; stroke-width: 2px; fill: red; fill-opacity: 0.2;}
        </style>
    </link-class>
</kresmer-library>