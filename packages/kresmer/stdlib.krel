<?xml version="1.0" encoding="utf-8"?>
<?xml-model href="xsd/kresmer-library.xsd"?>
<kresmer-library xmlns:Kre="Kre" xmlns:v-bind="v-bind">
    <!-- Test data (just for fun)-->
    <defs>
        <text id="kre:std:Crown">👑</text>
    </defs>

    <component-class name="YellowRectangle">
        <template>
            <rect x="0" y="0" v-bind:width="width" v-bind:height="height"
                v-bind:fill="fill" stroke="black" stroke-width="5px" stroke-opacity="0.5"></rect>
        </template>
        <props>
            <prop name="width" type="Number" required="true" default="300" />
            <prop name="height" type="Number" required="true" default="100" />
            <prop name="fill" type="String" default="yellow" />
        </props>
    </component-class>

    <component-class name="Rectangle">
        <template>
            <rect x="0" y="0" v-bind:width="width" v-bind:height="height"
                v-bind:fill="fill"></rect>
        </template>
        <props>
            <prop name="width" type="Number" required="true" default="300" />
            <prop name="height" type="Number" required="true" default="100" />
            <prop name="fill" type="String" default="yellow" />
        </props>
    </component-class>


    <component-class name="Text">
        <template>
            <text x="0" y="0" v-bind:fill="color" v-bind:font-size="fontSize"
                v-bind:font-family="fontFamily">
                <slot>Text</slot>
            </text>
        </template>
        <props>
            <prop name="color" type="String" default="black" />
            <prop name="font-size" type="String" default="32" />
            <prop name="font-family" type="String" />
        </props>
    </component-class>

    <component-class name="BorderedKresmer">
        <template>
            <rect x="0" y="0" v-bind:width="width" v-bind:height="height"
                v-bind:fill="fill" stroke="black" stroke-width="5px" stroke-opacity="0.5"></rect>
            <use
                href="#kre:std:Crown" x="10" y="30" />
            <text x="40" y="30" v-bind:fill="textColor"
                v-bind:font-size="fontSize" v-bind:font-family="fontFamily">{{text}}</text>
        </template>
        <props>
            <prop name="width" type="Number" required="true" default="200" />
            <prop name="height" type="Number" required="true" default="50" />
            <prop name="fill" type="String" default="yellow" />
            <prop name="text" type="String" default="BorderedKresmer" />
            <prop name="textColor" type="String" default="black" />
            <prop name="font-size" type="String" />
            <prop name="font-family" type="String" />
        </props>
    </component-class>

    <component-class name="PatrioticKresmer">
        <template>
            <rect x="0" y="0" v-bind:width="width" v-bind:height="height/2" fill="blue" />
            <rect
                x="0" v-bind:y="height/2" v-bind:width="width" v-bind:height="height/2"
                fill="yellow" />
            <text v-bind:x="width*0.2" v-bind:y="height/1.7" fill="white"
                v-bind:font-size="fontSize" v-bind:font-family="fontFamily">{{text}}</text>
            <text
                v-bind:x="width*0.2 + 1" v-bind:y="height/1.7 + 1" fill="blue"
                v-bind:font-size="fontSize" v-bind:font-family="fontFamily">{{text}}</text>
        </template>
        <props>
            <prop name="width" type="Number" required="true" default="500" />
            <prop name="height" type="Number" required="true" default="50" />
            <prop name="text" type="String" default="Справжний Кресмер" />
            <prop name="font-size" type="String" default="28" />
            <prop name="font-family" type="String" default="sans-serif" />
        </props>
    </component-class>

    <component-class name="Crown">
        <template>
            <text x="0" y="0" v-bind:stroke="color" v-bind:font-size="fontSize">👑</text>
        </template>
        <props>
            <prop name="fontSize" type="String" />
            <prop name="color" type="String" default="gold" />
        </props>
    </component-class>

    <component-class name="SilverKresmer">
        <template>
            <rect x="0" y="0" v-bind:width="width" v-bind:height="height"
                vector-effect="non-scaling-stroke"
                stroke="silver" stroke-width="8px" stroke-opacity="0.5" />
            <text
                v-bind:x="width*0.25" v-bind:y="height*0.6" stroke="silver"
                v-bind:font-size="fontSize">{{text}}</text>
            <Kre:Crown v-bind:x="10"
                v-bind:y="height*0.6" v-bind:font-size="fontSize" color="silver" />
            <text
                v-bind:x="width*0.75 + i*22" v-bind:y="height*0.6" fill="silver"
                v-bind:font-size="fontSize" v-for="i in 3">⚜</text>
        </template>
        <props>
            <prop name="width" type="Number" required="true" default="400" />
            <prop name="height" type="Number" required="true" default="50" />
            <prop name="text" type="String" default="Silver Kresmer" />
            <prop name="font-size" type="String" default="32" />
            <prop name="font-family" type="String" default="sans-serif" />
        </props>
    </component-class>

    <component-class name="Lilly">
        <template>
            <rect x="0" y="0" v-bind:width="width" v-bind:height="height"
                vector-effect="non-scaling-stroke"
                stroke="silver" stroke-width="8px" stroke-opacity="0.5" />
            <text
                v-bind:x="width*0.015" v-bind:y="height*0.76" fill="silver"
                v-bind:font-size="fontSize">⚜</text>
        </template>
        <props>
            <prop name="width" type="Number" required="true" default="256" />
            <prop name="height" type="Number" required="true" default="256" />
            <prop name="text" type="String" default="Silver Kresmer" />
            <prop name="font-size" type="String" default="200" />
            <prop name="font-family" type="String" default="sans-serif" />
        </props>
    </component-class>

    <!--                       Something like real definitions                      -->

    <!-- Crossing arrows traditionally used to be drawn on the top of routers and switches -->
    <component-class name="CrossArrows" instantiate="auto">
        <template> {{$global("crossArrows", [ [0.1,0.5], [0.2,0.7], [0.2,0.6], [0.4,0.6], [0.4,0.8],
            [0.3,0.8], [0.5,0.9], [0.7,0.8], [0.6,0.8], [0.6,0.6], [0.8,0.6], [0.8,0.7], [0.9,0.5],
            [0.8,0.3], [0.8,0.4], [0.6,0.4], [0.6,0.2], [0.7,0.2], [0.5,0.1], [0.3,0.2], [0.4,0.2],
            [0.4,0.4], [0.2,0.4], [0.2,0.3] ])}} </template>
    </component-class>

    <!-- Switch or router port -->
    <component-class name="Port">
        <template>
            <rect v-bind:width="w" v-bind:height="h" class="port-icon body" />
            <polyline
                class="port-icon bottom"
                v-bind:points="`0,${h} ${w*0.15},${h*0.75} ${w*0.85},${h*0.75} ${w},${h}`" />
            <rect
                class="port-icon far-end" v-bind:x="w*0.15" v-bind:y="h*0.05"
                v-bind:width="w*0.7" v-bind:height="h*0.7" />
            <slot />
            <text v-bind:x="w/2"
                v-bind:y="h*0.8" text-anchor="middle" v-bind:font-size="h*0.8"
                class="port-name">{{name}}</text>
            <connection-point v-bind:name="name"
                v-bind:d="h*0.8" v-bind:x="w/2" v-bind:y="h/2" />
        </template>
        <style>
            .port-name {font-family: sans-serif; fill: white;}
            .port-icon.body {stroke: white;}
            .port-icon.bottom {filter: brightness(1.4)}
            .port-icon.far-end {filter: brightness(0.7)}
        </style>
        <props>
            <prop name="w" type="Number" required="true" default="25" />
            <prop name="h" type="Number" required="true" default="25" />
        </props>
    </component-class>

    <component-class name="SquarePort">
        <template>
            <Kre:Port v-bind:w="d" v-bind:h="d" v-bind:name="name">
                <slot />
            </Kre:Port>
        </template>
        <props>
            <prop name="d" type="Number" required="true" default="25" /> <!-- diameter (or similar size parameter-->
        </props>
    </component-class>

    <component-class name="Ferrule">
        <template>
            <circle class="ferrule" v-bind:cx="cx" v-bind:cy="cy" v-bind:r="d/2" />
        </template>
        <props>
            <prop name="cx" type="Number" required="true" default="0"/>
            <prop name="cy" type="Number" required="true" default="0"/>
            <prop name="d" type="Number" required="true" default="25" />
        </props>
        <style>
            .ferrule {fill: #000000; stroke: #707070; stroke-width: 1px;}
        </style>
    </component-class>

    <component-class name="SfpPort">
        <template>
            <Kre:SquarePort v-bind:d="d" v-bind:name="name">
                <Kre:Ferrule v-bind:cx="d/2" v-bind:cy="d/2" v-bind:d="d*0.4" />
            </Kre:SquarePort>
        </template>
        <props>
            <prop name="d" type="Number" required="true" default="25" /> <!-- diameter (or similar size parameter-->
        </props>
    </component-class>

    <component-class name="XfpPort">
        <template>
            <Kre:Port v-bind:w="h*2.5" v-bind:h="h" v-bind:name="name">
                <Kre:Ferrule v-bind:cx="h*1.25" v-bind:cy="h/2" v-bind:d="h*0.4" />
            </Kre:Port>
        </template>
        <props>
            <prop name="h" type="Number" required="true" default="25" />
        </props>
    </component-class>


    <!-- General switch -->
    <component-class name="SwitchBody">
        <template>
            <rect x="0" y="0" v-bind:width="width" v-bind:height="height*nSlots" class="facet" />
            <line v-for="i in nSlots-1" x1="0" v-bind:y1="i*height"
                v-bind:x2="width" v-bind:y2="i*height" class="slot-boundary" />
            <g
                v-if="perspective === 'center'" v-bind:transform="`scale(${width} ${-1.4*height})`">
                <polyline
                    v-bind:points="$p($ThreeVectorTransform({u:[1,0], v:[0.2,1], w:[-0.4,0]})
                                                           ([0,0], [0,1], [1,1], [1,0]))"
                    class="top facet" />
                <polyline
                    v-bind:points="$p($ThreeVectorTransform({u:[1,0], v:[0.2,1], w:[-0.4,0]})(...$$.crossArrows))"
                    class="facet" />
            </g>
            <g v-if="perspective === 'right'"
                v-bind:transform="`scale(${width} ${-1.4*height}) skewX(20)`">
                <polyline points="0,0 0,1 1,1 1,0" class="top facet" />
                <polyline v-bind:points="$p($$.crossArrows)" class="facet" />
            </g>
            <rect
                v-if="perspective === 'right'" v-bind:x="width" y="0"
                v-bind:width="height*2.26" v-bind:height="height"
                class="side facet" transform="skewY(-32)" v-bind:transform-origin="`${width} 0`" />
            <g
                v-if="perspective === 'left'"
                v-bind:transform="`scale(${width} ${-1.4*height}) skewX(-20)`">
                <polyline points="0,0 0,1 1,1 1,0" class="top facet" />
                <polyline v-bind:points="$p($$.crossArrows)" class="facet" />
            </g>
            <rect
                v-if="perspective === 'left'" v-bind:x="-height*2.26" y="0"
                v-bind:width="height*2.26"
                v-bind:height="height" class="side facet" transform="skewY(32)" />
            <text
                v-bind:x="nameX" v-bind:y="nameY" v-bind:font-size="height*0.75"
                text-anchor="middle" class="switch-name"
                v-bind:class='{"no-persp": perspective === "none"}'>{{name}}</text>
        </template>
        <style>
            .switch-name { font-family: sans-serif; fill: black; text-shadow: none}
            .switch-name.no-persp { font-family: sans-serif!important; fill: black!important; text-shadow: none!important}
            .port-icon { fill: #525252; }
            .facet {fill: lightgray;}
            .top.facet { filter: brightness(0.7); }
            .side.facet { filter: brightness(0.5); }
            .slot-boundary { stroke: black; stroke-opacity: 0.3; stroke-width: 2px; }
        </style>
        <props>
            <prop name="n-slots" type="Number" default="1" />
            <prop name="height" type="Number" required="true" default="50" />
            <prop name="width" type="Number" required="true" default="312.5" />
            <prop name="perspective" type="String" choices="left,right,center,none" default="center" />
        </props>
        <computed-props>
            <computed-prop name="nameX">props.perspective === 'right' ? props.width*0.7 :
                                        props.perspective === 'left' ? props.width*0.3 :
                                        props.width*0.5
            </computed-prop>
            <computed-prop name="nameY">
                props.perspective === "none" ? -props.height*0.3 : -props.height*0.55
            </computed-prop>
        </computed-props>
    </component-class>

    <component-class name="Switch">
        <template>
            <Kre:SwitchBody v-bind:width="width" v-bind:height="height"
                v-bind:perspective="perspective" v-bind:name="name" />
            <Kre:SquarePort v-for="i in nPorts"
                v-bind:x="height*(0.75*i - 0.5)" v-bind:y="height/4" v-bind:d="height/2"
                v-bind:name="i" />
        </template>
        <style extends="SwitchBody" />
        <props>
            <prop name="nPorts" type="Number" default="8" />
            <prop name="height" type="Number" required="true" default="50" />
            <prop name="perspective" type="String" choices="left,right,center,none" default="center" />
        </props>
        <computed-props>
            <computed-prop name="width">props.height * (0.25 + 0.75*props.nPorts)</computed-prop>
        </computed-props>
    </component-class>

    <!-- Various breeds of Switches -->
    <component-class name="ExtremeSwitchBody">
        <template>
            <Kre:SwitchBody v-bind:name="name" v-bind:width="width" v-bind:height="height"
                            v-bind:n-slots="nSlots" v-bind:perspective="perspective" />
        </template>
        <style extends="SwitchBody">
            .switch-name { fill: white; text-shadow: 3px 3px 3px black; }
            .facet {fill: #d752ff;}
            .port-icon { fill: #520f75; }
            .port-icon.body { stroke: #fde3fd; }
        </style>
        <props>
            <prop name="width" type="Number" required="true" default="312.5" />
            <prop name="n-slots" type="Number" default="1" />
            <prop name="height" type="Number" required="true" />
            <prop name="perspective" type="String" choices="left,right,center,none" default="center" />
        </props>
    </component-class>

    <component-class name="ExtremeSwitch">
        <template>
            <Kre:Switch v-bind:name="name" v-bind:height="height" v-bind:n-ports="nPorts"
                v-bind:perspective="perspective" />
        </template>
        <style extends="Switch, ExtremeSwitchBody" />
        <props>
            <prop name="nPorts" type="Number" default="8" />
            <prop name="height" type="Number" required="true" />
            <prop name="perspective" type="String" choices="left,right,center,none" default="center" />
        </props>
    </component-class>

    <component-class name="Extreme-X590-24x">
        <template>
            <Kre:ExtremeSwitchBody v-bind:name="name" v-bind:height="height" v-bind:width="width" 
                                   v-bind:perspective="perspective" />
            <template v-for="i in 12">
                <Kre:SfpPort v-bind:x="height*(i*0.5-0.2)" v-bind:y="height*0.15" v-bind:d="height/3" v-bind:name="i*2-1" />
                <Kre:SfpPort v-bind:x="height*(i*0.5-0.2)" v-bind:y="height*0.53" v-bind:d="height/3" v-bind:name="i*2" />
            </template>
            <Kre:XfpPort v-bind:x="height*7" v-bind:y="height*0.53" v-bind:h="height/3" v-bind:name="25" />
            <Kre:XfpPort v-bind:x="height*8" v-bind:y="height*0.15" v-bind:h="height/3" v-bind:name="26" />
            <Kre:XfpPort v-bind:x="height*8" v-bind:y="height*0.53" v-bind:h="height/3" v-bind:name="27" />
        </template>
        <style extends="ExtremeSwitchBody" />
        <props>
            <prop name="height" type="Number" required="true" default="75"/>
            <prop name="perspective" type="String" choices="left,right,center,none" default="center" />
        </props>
        <computed-props>
            <computed-prop name="width">props.height * 9.1</computed-prop>
        </computed-props>
    </component-class>

    <component-class name="Extreme-X590-24x-Stack">
        <template>
            <Kre:ExtremeSwitchBody v-bind:name="name" v-bind:height="height" v-bind:width="width"
                                   v-bind:n-slots="nSlots" v-bind:perspective="perspective" />
            <template v-for="slot in nSlots">
                <template v-for="i in 12">
                    <Kre:SfpPort v-bind:x="height*(i*0.5-0.2)" v-bind:y="height*(slot-0.85)" v-bind:d="height/3" v-bind:name="i*2-1" />
                    <Kre:SfpPort v-bind:x="height*(i*0.5-0.2)" v-bind:y="height*(slot-0.47)" v-bind:d="height/3" v-bind:name="i*2" />
                </template>
                <Kre:XfpPort v-bind:x="height*7" v-bind:y="height*(slot-0.47)" v-bind:h="height/3" v-bind:name="25" />
                <Kre:XfpPort v-bind:x="height*8" v-bind:y="height*(slot-0.85)" v-bind:h="height/3" v-bind:name="26" />
                <Kre:XfpPort v-bind:x="height*8" v-bind:y="height*(slot-0.47)" v-bind:h="height/3" v-bind:name="27" />
            </template>
        </template>
        <style extends="ExtremeSwitchBody" />
        <props>
            <prop name="height" type="Number" required="true" default="75"/>
            <prop name="n-slots" type="Number" default="1" />
            <prop name="perspective" type="String" choices="left,right,center,none" default="center" />
        </props>
        <computed-props>
            <computed-prop name="width">props.height * 9.1</computed-prop>
        </computed-props>
    </component-class>

    <component-class name="Hub">
        <template>
            <Kre:Switch v-bind:name="name" v-bind:height="height" v-bind:n-ports="nPorts"
                v-bind:perspective="perspective" />
        </template>
        <style extends="Switch">
            .switch-name { fill: white; text-shadow: 3px 3px 3px black; }
            .facet {fill: #ffcc00;}
            .port-icon { fill: #ff6600; }
            .port-icon.body { stroke: #ffcc00; }
        </style>
        <props>
            <prop name="nPorts" type="Number" default="8" />
            <prop name="height" type="Number" required="true" />
            <prop name="perspective" type="String" choices="left,right,center,none" default="center" />
        </props>
    </component-class>

    <component-class name="Catalyst">
        <template>
            <Kre:Switch v-bind:name="name" v-bind:height="height" v-bind:n-ports="nPorts"
                v-bind:perspective="perspective" />
        </template>
        <style extends="Switch">
            .switch-name { fill: yellow; text-shadow: 3px 3px 3px black; }
            .facet {fill: darkcyan;}
            .port-icon {fill: #005757;}
        </style>
        <props>
            <prop name="nPorts" type="Number" default="8" />
            <prop name="height" type="Number" required="true" />
            <prop name="perspective" type="String" choices="left,right,center,none" default="center" />
        </props>
    </component-class>

    <!-- Various link types -->
    <link-class name="twisted-pair" type="copper">
        <style>
            .link {stroke: #8c8c8c;}
            .padding {stroke-width: 8px;}
            .segment {stroke-width: 2px;}
            .segment.highlighted {stroke: #525440; stroke-width: 3px}
            .segment.selected {stroke: #525440; stroke-width: 4px}
            .vertex {stroke: #525440; stroke-width: 4px; fill: white; r: 6px}
            .vertex.padding {r: 60px; fill: gray; fill-opacity: 0.3}
            .vertex.blinker {r: 10px; stroke: red; stroke-width: 2px; fill: red; fill-opacity: 0.2;}
        </style>
    </link-class>
</kresmer-library>