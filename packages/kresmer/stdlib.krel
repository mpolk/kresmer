<?xml version="1.0" encoding="utf-8"?>
<?xml-model href="xsd/kresmer-library.xsd"?>
<kresmer-library xmlns:Kre="Kre" xmlns:v-bind="v-bind" xmlns:v-on="v-on" xmlns:v-slot="v-slot">
    <!-- Crossing arrows traditionally used to be drawn on the top of routers and switches -->
    <component-class name="cross-arrows" category=".non-istantiable"> 
        <defs>
            {{$global("crossArrows", [ [0.1,0.5], [0.2,0.7], [0.2,0.6], [0.4,0.6], [0.4,0.8],
                [0.3,0.8], [0.5,0.9], [0.7,0.8], [0.6,0.8], [0.6,0.6], [0.8,0.6], [0.8,0.7], [0.9,0.5],
                [0.8,0.3], [0.8,0.4], [0.6,0.4], [0.6,0.2], [0.7,0.2], [0.5,0.1], [0.3,0.2], [0.4,0.2],
                [0.4,0.4], [0.2,0.4], [0.2,0.3] ])}}
        </defs>
        <template></template>
    </component-class>

    <!-- Switch or router port -->
    <component-class name="Port" category=".ports">
        <template>
            <rect v-bind:width="w" v-bind:height="h" class="port-icon body" />
            <slot />
            <rect v-if="portInfo?.operStatus" v-bind:width="h*0.25" v-bind:height="h*0.25" class="status-indicator" />
            <text v-bind:x="w/2"
                v-bind:y="h*0.8" text-anchor="middle" v-bind:font-size="fontSize*h"
                class="port-name" v-bind:class="{disabled: !(portInfo?.adminStatus ?? true)}">{{label}}</text>
            <title>{{title}}</title>
            <connection-point
                v-for="({x, y}, dir) in {up: {x: w/2, y: 0}, right: {x: w, y: h/2}, down: {x: w/2, y: h}, left: {x: 0, y: h/2}}" 
                v-bind="{name: `${name}@${dir[0]}`, d: h*0.7, x, y, dir}" />
        </template>
        <style>
            .port-name {font-family: sans-serif; fill: white;}
            .port-name.disabled {fill: lightgray; opacity: 0.75;}
            .port-icon.body {stroke: white;}
            .status-indicator {fill: #b7f598; stroke: green; stroke-width: 1px}
            .connection-point-marker {fill: yellow;}
        </style>
        <props>
            <prop name="w" type="Number" required="true" default="25" category="Geometry" description="Port icon width"/>
            <prop name="h" type="Number" required="true" default="25" category="Geometry" description="Port icon height"/>
            <prop name="prefix" type="String" default="" description="Port name prefix that may be stripped when displaying in the limited area"/>
            <prop name="font-size" type="Number" default="0.8" category="Presentation"/>
            <prop name="port-info" type="object" description="Various port configuration and state parameters"/>
        </props>
        <computed-props>
            <computed-prop name="label">String(props.name).replace(props.prefix, '')</computed-prop>
            <computed-prop name="title">
                props.name + 
                    (props.portInfo?.description ? ` ${props.portInfo.description}` : '') +
                    (props.portInfo?.speed ? ` (${props.portInfo.speed})` : '')
            </computed-prop>
        </computed-props>
    </component-class>

    <component-class name="Ferrule" category=".ports">
        <template>
            <circle class="ferrule" v-bind:cx="cx" v-bind:cy="cy" v-bind:r="d/2" />
        </template>
        <props>
            <prop name="cx" type="Number" required="true" default="0" category="Geometry"/>
            <prop name="cy" type="Number" required="true" default="0" category="Geometry"/>
            <prop name="d" type="Number" required="true" default="25" category="Geometry"/>
        </props>
        <style>
            .ferrule {fill: #000000; stroke: #707070; stroke-width: 1px;}
        </style>
    </component-class>

    <component-class name="PluginModule" category=".ports">
        <template>
            <polyline v-bind:points="
                keyPosition === 'top' ?
                    `${cx+h*0.25},${cy-h*q} ${cx+w*q},${cy-h*q} ${cx+w*q},${cy+h*q}
                     ${cx-w*q},${cy+h*q}    ${cx-w*q},${cy-h*q} ${cx-h*0.2},${cy-h*q}`
                :
                    `${cx+h*0.25},${cy+h*q} ${cx+w*q},${cy+h*q} ${cx+w*q},${cy-h*q}
                     ${cx-w*q},${cy-h*q}    ${cx-w*q},${cy+h*q} ${cx-h*0.2},${cy+h*q}`" 
                class="border" v-bind:stroke-width="Math.min(w, h)*0.12" />
        </template>
        <props>
            <prop name="cx" type="Number" required="true" default="0" category="Geometry"/>
            <prop name="cy" type="Number" required="true" default="0" category="Geometry"/>
            <prop name="w" type="Number" required="true" default="25" category="Geometry"/>
            <prop name="h" type="Number" required="true" default="25" category="Geometry"/>
            <prop name="key-position" type="String" choices="top,bottom" default="top" category="Geometry" description="Key groove position"/>
        </props>
        <computed-props>
            <computed-prop name="q">0.4</computed-prop>
        </computed-props>
        <style>
            .border {fill: none; stroke: #8998a9;}
        </style>
    </component-class>

    <component-class name="RJ45" category=".ports">
        <defs>
            <pattern id="kre:std:rj45-contacts" patternUnits="objectBoundingBox" width="0.125" height="1" viewBox="0 0 10 10" 
                preserveAspectRatio="none">
                <rect x="2" y="0" width="6" height="10" fill="#b28e01" />
            </pattern>
        </defs>
        <template>
            <polyline v-bind:points="
                keyPosition === 'top' ?
                    `${cx+h*0.25},${cy-h*q} ${cx+w*q},${cy-h*q} ${cx+w*q},${cy+h*q}
                     ${cx-w*q},${cy+h*q}    ${cx-w*q},${cy-h*q} ${cx-h*0.2},${cy-h*q}`
                :
                    `${cx+h*0.25},${cy+h*q} ${cx+w*q},${cy+h*q} ${cx+w*q},${cy-h*q}
                     ${cx-w*q},${cy-h*q}    ${cx-w*q},${cy+h*q} ${cx-h*0.2},${cy+h*q}`" 
                class="border" v-bind:stroke-width="Math.min(w, h)*0.16" />
            <rect v-bind:x="w*0.2" v-bind:y="keyPosition === 'top' ? h*0.5 : h*0.2" v-bind:width="w*0.6" v-bind:height="h*0.3" 
                  fill="url(#kre:std:rj45-contacts)"/>
        </template>
        <props>
            <prop name="cx" type="Number" required="true" default="0" category="Geometry"/>
            <prop name="cy" type="Number" required="true" default="0" category="Geometry"/>
            <prop name="w" type="Number" required="true" default="25" category="Geometry"/>
            <prop name="h" type="Number" required="true" default="25" category="Geometry"/>
            <prop name="key-position" type="String" choices="top,bottom" default="top" category="Geometry" description="Key groove position"/>
        </props>
        <computed-props>
            <computed-prop name="q">0.4</computed-prop>
        </computed-props>
        <style>
            .border {fill: none; stroke: #597865;}
        </style>
    </component-class>

    <component-class name="RJ45Port" category=".ports">
        <template>
            <Kre:Port v-bind:w="d" v-bind:h="d" v-bind:name="name" v-bind:prefix="prefix" v-bind:font-size="fontSize" 
                    v-bind:port-info="portInfo">
                <Kre:RJ45 v-bind:cx="d/2" v-bind:cy="d/2" v-bind:w="d" v-bind:h="d" v-bind:key-position="keyPosition"/>
            </Kre:Port>
        </template>
        <props extend="Port" except="w,h">
            <prop name="d" type="Number" required="true" default="25" category="Geometry" description="Port icon width and height"/>
            <prop name="key-position" type="String" choices="top,bottom" default="top" category="Geometry" description="Key groove position"/>
        </props>
    </component-class>

    <component-class name="SfpPort" category=".ports">
        <template>
            <Kre:Port v-bind:w="d" v-bind:h="d" v-bind:name="name" v-bind:prefix="prefix" v-bind:font-size="fontSize" 
                    v-bind:port-info="portInfo">
                <Kre:PluginModule v-bind:cx="d/2" v-bind:cy="d/2" v-bind:w="d" v-bind:h="d" v-bind:key-position="keyPosition"/>
            </Kre:Port>
        </template>
        <props extend="Port" except="w,h">
            <prop name="d" type="Number" required="true" default="25" category="Geometry" description="Port icon width and height"/>
            <prop name="key-position" type="String" choices="top,bottom" default="top" category="Geometry" description="Key groove position"/>
        </props>
    </component-class>

    <component-class name="XfpPort" category=".ports">
        <template>
            <Kre:Port v-bind:w="h*2.5" v-bind:h="h" v-bind:name="name" v-bind:prefix="prefix" v-bind:font-size="fontSize"
                    v-bind:port-info="portInfo">
                <Kre:PluginModule v-bind:cx="h*1.25" v-bind:cy="h/2" v-bind:w="h*2.75" v-bind:h="h" v-bind:key-position="keyPosition" />
            </Kre:Port>
        </template>
        <props>
            <prop name="h" type="Number" required="true" default="25" category="Geometry" />
            <prop name="prefix" type="String" default="" />
            <prop name="font-size" type="Number" default="0.8" category="Presentation"/>
            <prop name="key-position" type="String" choices="top,bottom" default="top" category="Geometry" />
            <prop name="port-info" type="object" description="Various port configuration and state parameters"/>
        </props>
    </component-class>

    <!-- General device prototypes -->
    <component-class name="ManagedDevice" category=".general">
        <template/>
        <props>
            <prop name="ip-address" type="String" default="" pattern="\d+\.\d+\.\d+\.\d+(/\d+)?" category="Network"
                description="Device management ip-address"/>
            <prop name="management-protocol" type="String" category="Network"
                description="Device management protocol (to open management sessions from the on-drawing hyperlinks)"/>
            <prop name="management-ref-target" type="String" choices="_self,_blank" category="Network"
                description="Target for on-drawing hyperlinks"/>
            <prop name="comment" type="String" description="Device general info"/>
        </props>
    </component-class>

    <component-class name="RackMountDevice" category=".general">
        <template>
            <title v-if="comment">{{comment}}</title>
            <rect x="0" y="0" v-bind:width="width" v-bind:height="unitHeight*nUnits" class="facet front"/>
            <slot name="frontFacet"/>
            <g v-if="perspective === 'center'" v-bind:transform="`scale(${width} ${-topFacetSize*unitHeight})`">
                <polyline
                    v-bind:points="$p($ThreeVectorTransform({u:[1,0], v:[0.2,1], w:[-0.4,0]})
                                                           ([0,0], [0,1], [1,1], [1,0]))"
                    class="top facet" />
                <slot name="topFacetC"/>
            </g>
            <g v-if="perspective === 'right'"
                v-bind:transform="`skewX(${-topFacetSkew}) scale(${width} ${-topFacetSize*unitHeight})`">
                <polyline points="0,0 0,1 1,1 1,0" class="top facet" />
                <slot name="topFacetLR"/>
            </g>
            <polygon
                v-if="perspective === 'right'"
                v-bind:points="`${width},0 ${width},${unitHeight*nUnits} 
                                ${width+topFacetSkewShift},${unitHeight*(nUnits - topFacetSize*1.2)} 
                                ${width+topFacetSkewShift},${-unitHeight*topFacetSize}`"
                class="side facet" />
            <g
                v-if="perspective === 'left'"
                v-bind:transform="`skewX(${topFacetSkew}) scale(${width} ${-topFacetSize*unitHeight})`">
                <polyline points="0,0 0,1 1,1 1,0" class="top facet" />
                <slot name="topFacetLR"/>
            </g>
            <polygon
                v-if="perspective === 'left'"
                v-bind:points="`0,0 0,${unitHeight*nUnits} 
                                ${-topFacetSkewShift},${unitHeight*(nUnits - topFacetSize*1.2)} 
                                ${-topFacetSkewShift},${-unitHeight*topFacetSize}`"
                class="side facet" />
            <text v-if="showDeviceName"
                v-bind:x="nameX" v-bind:y="nameY" v-bind:font-size="unitHeight*0.75"
                text-anchor="middle" class="device-name"
                v-bind:class='{"no-persp": perspective === "none"}'>{{name}}</text>
            <template v-if="ipAddress &amp;&amp; showIpAddress">
                <a v-if="managementProtocol" v-bind:href="managementProtocol + ipAddress" 
                   v-bind:target="managementRefTarget">
                    <text
                        v-bind:x="nameX" v-bind:y="nameY + unitHeight*0.25" v-bind:font-size="unitHeight*0.25"
                        text-anchor="middle" class="ip-address href"
                        v-bind:class='{"no-persp": perspective === "none"}'>
                        {{ipAddress}}
                    </text>
                </a>
                <text v-else=""
                    v-bind:x="nameX" v-bind:y="nameY + unitHeight*0.25" v-bind:font-size="unitHeight*0.25"
                    text-anchor="middle" class="ip-address"
                    v-bind:class='{"no-persp": perspective === "none"}'>
                    {{ipAddress}}
                </text>
            </template>
        </template>
        <style>
            .device-name { font-family: sans-serif; fill: black; text-shadow: none}
            .device-name.no-persp { font-family: sans-serif!important; fill: black!important; text-shadow: none!important}
            .ip-address { font-family: sans-serif; }
            a { text-decoration: none; }
            a:hover { text-decoration: underline; }
            .port-icon { fill: #404040; }
            .facet {
                --facet-color: #e6e6e6;
                fill: var(--facet-color); stroke: var(--facet-color); stroke-width: 0;
            }
            .top.facet { filter: brightness(0.7); }
            .side.facet { filter: brightness(0.5); }
            .unit-boundary { stroke: black; stroke-opacity: 0.3; stroke-width: 2px; }
        </style>
        <props extend="ManagedDevice">
            <prop name="n-units" type="Number" default="1" category="Hardware" description="The number of units (devices) in the stack"/>
            <prop name="unit-height" type="Number" required="true" default="75" category="Geometry" />
            <prop name="width" type="Number" required="true" default="312.5" category="Geometry" />
            <prop name="perspective" type="String" choices="left,right,center,none" default="center" category="Presentation" 
                  description="Visual perspective of the device image"/>
            <prop name="top-facet-size" type="Number" default="1.4" category="Geometry" />
            <prop name="top-facet-skew" type="Number" default="60" category="Geometry" />
            <prop name="show-device-name" type="boolean" default="true" />
            <prop name="show-ip-address" type="boolean" default="true" />
        </props>
        <computed-props>
            <computed-prop name="topFacetSkewShift">
                props.unitHeight * props.topFacetSize * Math.tan(props.topFacetSkew * Math.PI/180)
            </computed-prop>
            <computed-prop name="nameX">
                props.perspective === 'right' ? props.width/2 + computedProps.topFacetSkewShift*0.393 :
                props.perspective === 'left' ? props.width/2 - computedProps.topFacetSkewShift*0.393 :
                props.width*0.5
            </computed-prop>
            <computed-prop name="nameY">
                props.perspective === "none" ? -props.unitHeight*0.3 : -props.unitHeight*props.topFacetSize*0.393
            </computed-prop>
        </computed-props>
    </component-class>

    <component-class name="StackUnitBadge" category=".switch-parts">
        <template>
            <rect x="0" y="0" v-bind:width="width" v-bind:height="height" class="unit-badge" />
            <text v-bind:x="width/2" v-bind:y="height*0.75" v-bind:font-size="height*0.75"
                text-anchor="middle" class="unit-badge-text">{{unit}}</text>
        </template>
        <style>
            .unit-badge { fill: lightgray; rx: 3px; stroke: white; stroke-width: 2px}
            .unit-badge-text { font-family: sans-serif; fill: black; vertical-align: middle;}
        </style>
        <props>
            <prop name="unit" type="Number" required="true" />
            <prop name="width" type="Number" required="true" category="Geometry" />
            <prop name="height" type="Number" required="true" category="Geometry" />
        </props>
    </component-class>

    <!-- General switch -->
    <component-class name="SwitchBody" category=".switch-parts">
        <template>
            <Kre:RackMountDevice v-bind:name="name" v-bind:unit-height="unitHeight" v-bind:width="width"
                v-bind:n-units="nStackUnits" v-bind:perspective="perspective" 
                v-bind:top-facet-size="topFacetSize" v-bind:top-facet-skew="topFacetSkew"
                v-bind:ip-address="ipAddress" v-bind:management-protocol="managementProtocol"
                v-bind:management-ref-target="managementRefTarget"
                v-bind:comment="comment"
                >
                <template v-slot:frontFacet="{}">
                    <line v-for="i in nStackUnits-1" x1="0" v-bind:y1="i*unitHeight" v-bind:x2="width" v-bind:y2="i*unitHeight" class="unit-boundary" />
                    <slot name="frontFacet" />
                </template>
                <template v-slot:topFacetC="{}">
                    <polyline v-bind:points="$p($ThreeVectorTransform({u:[1,0], v:[0.2,1], w:[-0.4,0]})(...$$.crossArrows))" class="facet" />
                    <slot name="topFacetC"/>
                </template>
                <template v-slot:topFacetLR="{}">
                    <polyline v-bind:points="$p($$.crossArrows)" class="facet" />
                    <slot name="topFacetLR"/>
                </template>
            </Kre:RackMountDevice>
        </template>
        <style extends="RackMountDevice">
            .facet { --facet-color: lightgray; }
        </style>
        <props extend="RackMountDevice" except="n-units">
            <prop name="n-stack-units" type="Number" default="1" category="Hardware" description="The number of units (devices) in the stack"/>
            <prop name="ports-info" type="object" default="{}" category="Network" 
                description="Ports info for displaying in tooltips and similar"/>
        </props>
    </component-class>

    <component-class name="Switch" category="Switches">
        <template>
            <Kre:SwitchBody 
                v-bind:width="width" v-bind:unit-height="height"
                v-bind:perspective="perspective" v-bind:name="name" 
                v-bind:ip-address="ipAddress" v-bind:management-protocol="managementProtocol" 
                v-bind:management-ref-target="managementRefTarget"
                v-bind:comment="comment"
                />
            <Kre:Port v-for="i in nPorts"
                v-bind:x="height*(0.75*i - 0.5)" v-bind:y="height/4" v-bind:d="height/2"
                v-bind:name="i" v-bind:port-info="portsInfo[i]"
                />
        </template>
        <style extends="SwitchBody" />
        <props extend="SwitchBody">
            <prop name="nPorts" type="Number" default="8" category="Hardware" />
            <prop name="height" type="Number" required="true" default="50" category="Geometry" />
            <prop name="width" type="Number" category="Geometry"/>
        </props>
        <computed-props>
            <computed-prop name="width">props.height * (0.25 + 0.75*props.nPorts)</computed-prop>
        </computed-props>
    </component-class>


    <!-- The following class is not really useful. But it was the first one comletely generated by Copilot,
         and I want to keep it for the memory. The biggest surprise was that Copilot definitely did not see 
         Kresmer classes before and also he could not know that we call concentrator switches in our 
         metro-network "hubs". -->
    <component-class name="Hub" category="Switches">
        <template>
            <Kre:Switch v-bind:name="name" v-bind:height="height" v-bind:n-ports="nPorts"
                v-bind:perspective="perspective" 
                v-bind:comment="comment"
                />
        </template>
        <style extends="Switch">
            .device-name { fill: white; text-shadow: 3px 3px 3px black; }
            .facet {fill: #ffcc00;}
            .port-icon { fill: #ff6600; }
            .port-icon.body { stroke: #ffcc00; }
        </style>
        <props extend="Switch"/>
    </component-class>


    <!-- General router body (differ form the switch body only with a circle on the top facet -->

    <component-class name="RouterBody" category=".router-parts">
        <template>
            <Kre:RackMountDevice v-bind:name="name" v-bind:unit-height="unitHeight" v-bind:width="width"
                v-bind:n-units="nUnits" v-bind:perspective="perspective" 
                v-bind:top-facet-size="topFacetSize" v-bind:top-facet-skew="topFacetSkew"
                v-bind:ip-address="ipAddress" v-bind:management-protocol="managementProtocol"
                v-bind:management-ref-target="managementRefTarget"
                v-bind:comment="comment"
                >
                <template v-slot:frontFacet="{}">
                    <line v-for="i in nUnits-1" x1="0" v-bind:y1="i*unitHeight" v-bind:x2="width" v-bind:y2="i*unitHeight" class="unit-boundary" />
                    <slot name="frontFacet" />
                </template>
                <template v-slot:topFacetC="{}">
                    <ellipse cx="0.5" cy="0.48" rx="0.35" ry="0.45" class="facet" style="fill: none; stroke-width: 0.015" />
                    <polyline v-bind:points="$p($ThreeVectorTransform({u:[1,0], v:[0.2,1], w:[-0.4,0]})(...$$.crossArrows))" class="facet" />
                    <slot name="topFacetC"/>
                </template>
                <template v-slot:topFacetLR="{}">
                    <circle cx="0.5" cy="0.5" r="0.45" class="facet" style="fill: none; stroke-width: 0.015" />
                    <polyline v-bind:points="$p($$.crossArrows)" class="facet" />
                    <slot name="topFacetLR"/>
                </template>
            </Kre:RackMountDevice>
        </template>
        <style extends="RackMountDevice"/>
        <props extend="RackMountDevice">
            <prop name="ports-info" type="object" default="{}" category="Network" 
                description="Ports info for displaying in tooltips and similar"/>
        </props>
    </component-class>


    <!-- ********************************** Links ****************************** -->
    <link-class name="_abstract-link" category=".abstract-links">
        <defs>
            <marker id="kre:link-marker-circle" markerWidth="3" markerHeight="3" refX="5" refY="5" viewBox="0 0 10 10">
                <circle r="5" cx="5" cy="5" fill="context-stroke" stroke="context-stroke" />
            </marker>
            <marker id="kre:link-marker-arrow" markerWidth="5" markerHeight="3" refX="5" refY="5" viewBox="0 0 10 10" 
                    orient="auto-start-reverse" preserveAspectRatio="none">
                <polygon points="0,0 10,5 0,10 2,5" fill="context-stroke" stroke="context-stroke"/>
            </marker>
            <marker id="kre:link-marker-square" markerWidth="3" markerHeight="3" refX="5" refY="5" viewBox="0 0 10 10"
                    orient="auto-start-reverse">
                <rect x="0" y="0" width="10" height="10" fill="context-stroke" stroke="context-stroke"/>
            </marker>
            <marker id="kre:link-marker-diamond" markerWidth="4" markerHeight="4" refX="5" refY="5" viewBox="0 0 10 10"
                    orient="auto-start-reverse">
                <polygon points="0,5 5,0 10,5 5,10" fill="context-stroke" stroke="context-stroke"/>
            </marker>
        </defs>
        <props>
            <prop name="mediaType" type="string" category="Network"/>
            <prop name="acceptMediaTypes" type="string" category="Network"/>
            <prop name="startLabel" type="string"/>
            <prop name="endLabel" type="string"/>
            <prop name="startMarker" type="string" choices="arrow,circle,square,diamond" category="Presentation"/>
            <prop name="endMarker" type="string" choices="arrow,circle,square,diamond" category="Presentation"/>
        </props>
        <style>
            .padding {stroke-width: 8px;}
            .link {stroke: #3b3b3b}
            .segment {stroke-width: 2px; stroke-linecap: round; xx-filter: url(#kre:fltLinkFilter)}
            .segment.highlighted {stroke: black; stroke-width: 4px}
            .segment.selected {stroke: black; stroke-width: 5px}
            .vertex {stroke: black; stroke-width: 4px; fill: white; r: 6px}
            .vertex.padding {r: 60px; fill: gray; fill-opacity: 0.3}
            .vertex.blinker {r: 10px; stroke: red; stroke-width: 2px; fill: red; fill-opacity: 0.2;}
            .connection-point-marker {
                r: 8px;
                fill: yellow; stroke: rgb(184, 169, 0); stroke-width: 1;
            }
            .label {font-family: sans-serif; font-size: 1rem; fill: black;}
        </style>
    </link-class>

    <!-- Various link types -->
    <link-class name="twisted-pair" category="copper-links">
        <extends base="_abstract-link" media-type="twisted-pair" accept-media-types="none"/>
        <style>
            .segment {stroke: #3d3d3d}
        </style>
    </link-class>

    <link-class name="DAC" category="copper-links">
        <extends base="_abstract-link" media-type="DAC" accept-media-types="none"/>
        <style>
            .link {stroke: #236e85;}
            .padding {stroke-width: 10px;}
            .segment {stroke-width: 3px; stroke-linejoin: round;}
            .segment.highlighted {stroke: #2f97b6; stroke-width: 5px}
            .segment.selected {stroke: #2f97b6; stroke-width: 6px}
            .vertex {stroke: #2f97b6; stroke-width: 4px; fill: white; r: 6px}
            .label {fill: #2f97b6;}
        </style>
    </link-class>

    <link-class name="AOC" category="optical-links">
        <extends base="_abstract-link" media-type="AOC" accept-media-types="none"/>
        <style>
            .link {stroke: #0098c7;}
            .padding {stroke-width: 10px;}
            .segment {stroke-width: 3px; stroke-linejoin: round;}
            .segment.highlighted {stroke: #00b8f0; stroke-width: 5px}
            .segment.selected {stroke: #00b8f0; stroke-width: 6px}
            .vertex {stroke: #009ccc; stroke-width: 4px; fill: white; r: 6px}
            .label {fill: #0098c7;}
        </style>
    </link-class>

    <link-class name="AOC-fan" category="optical-links">
        <extends base="AOC" media-type="AOC-fan" accept-media-types="AOC"/>
        <style>
            .segment {stroke-width: 4px; }
        </style>
    </link-class>
</kresmer-library>