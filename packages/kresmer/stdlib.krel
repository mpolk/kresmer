<?xml version="1.0" encoding="utf-8"?>
<?xml-model href="xsd/kresmer-library.xsd"?>
<kresmer-library xmlns:Kre="Kre" xmlns:v-bind="v-bind" xmlns:v-slot="v-slot">
    <!-- Test data (just for fun)-->
    <defs>
        <text id="kre:std:Crown">👑</text>
    </defs>

    <component-class name="YellowRectangle">
        <template>
            <rect x="0" y="0" v-bind:width="width" v-bind:height="height"
                v-bind:fill="fill" stroke="black" stroke-width="5px" stroke-opacity="0.5"></rect>
        </template>
        <props>
            <prop name="width" type="Number" required="true" default="300" />
            <prop name="height" type="Number" required="true" default="100" />
            <prop name="fill" type="String" default="yellow" />
        </props>
    </component-class>

    <component-class name="Rectangle">
        <template>
            <rect x="0" y="0" v-bind:width="width" v-bind:height="height"
                v-bind:fill="fill"></rect>
        </template>
        <props>
            <prop name="width" type="Number" required="true" default="300" />
            <prop name="height" type="Number" required="true" default="100" />
            <prop name="fill" type="String" default="yellow" />
        </props>
    </component-class>


    <component-class name="Text">
        <template>
            <text x="0" y="0" v-bind:fill="color" v-bind:font-size="fontSize"
                v-bind:font-family="fontFamily">
                <slot>Text</slot>
            </text>
        </template>
        <props>
            <prop name="color" type="String" default="black" />
            <prop name="font-size" type="String" default="32" />
            <prop name="font-family" type="String" />
        </props>
    </component-class>

    <component-class name="BorderedKresmer">
        <template>
            <rect x="0" y="0" v-bind:width="width" v-bind:height="height"
                v-bind:fill="fill" stroke="black" stroke-width="5px" stroke-opacity="0.5"></rect>
            <use
                href="#kre:std:Crown" x="10" y="30" />
            <text x="40" y="30" v-bind:fill="textColor"
                v-bind:font-size="fontSize" v-bind:font-family="fontFamily">{{text}}</text>
        </template>
        <props>
            <prop name="width" type="Number" required="true" default="200" />
            <prop name="height" type="Number" required="true" default="50" />
            <prop name="fill" type="String" default="yellow" />
            <prop name="text" type="String" default="BorderedKresmer" />
            <prop name="textColor" type="String" default="black" />
            <prop name="font-size" type="String" />
            <prop name="font-family" type="String" />
        </props>
    </component-class>

    <component-class name="PatrioticKresmer">
        <template>
            <rect x="0" y="0" v-bind:width="width" v-bind:height="height/2" fill="blue" />
            <rect
                x="0" v-bind:y="height/2" v-bind:width="width" v-bind:height="height/2"
                fill="yellow" />
            <text v-bind:x="width*0.2" v-bind:y="height/1.7" fill="white"
                v-bind:font-size="fontSize" v-bind:font-family="fontFamily">{{text}}</text>
            <text
                v-bind:x="width*0.2 + 1" v-bind:y="height/1.7 + 1" fill="blue"
                v-bind:font-size="fontSize" v-bind:font-family="fontFamily">{{text}}</text>
        </template>
        <props>
            <prop name="width" type="Number" required="true" default="500" />
            <prop name="height" type="Number" required="true" default="50" />
            <prop name="text" type="String" default="Справжний Кресмер" />
            <prop name="font-size" type="String" default="28" />
            <prop name="font-family" type="String" default="sans-serif" />
        </props>
    </component-class>

    <component-class name="Crown">
        <template>
            <text x="0" y="0" v-bind:stroke="color" v-bind:font-size="fontSize">👑</text>
        </template>
        <props>
            <prop name="fontSize" type="String" />
            <prop name="color" type="String" default="gold" />
        </props>
    </component-class>

    <component-class name="SilverKresmer">
        <template>
            <rect x="0" y="0" v-bind:width="width" v-bind:height="height"
                vector-effect="non-scaling-stroke"
                stroke="silver" stroke-width="8px" stroke-opacity="0.5" />
            <text
                v-bind:x="width*0.25" v-bind:y="height*0.6" stroke="silver"
                v-bind:font-size="fontSize">{{text}}</text>
            <Kre:Crown v-bind:x="10"
                v-bind:y="height*0.6" v-bind:font-size="fontSize" color="silver" />
            <text
                v-bind:x="width*0.75 + i*22" v-bind:y="height*0.6" fill="silver"
                v-bind:font-size="fontSize" v-for="i in 3">⚜</text>
        </template>
        <props>
            <prop name="width" type="Number" required="true" default="400" />
            <prop name="height" type="Number" required="true" default="50" />
            <prop name="text" type="String" default="Silver Kresmer" />
            <prop name="font-size" type="String" default="32" />
            <prop name="font-family" type="String" default="sans-serif" />
        </props>
    </component-class>

    <component-class name="Lilly">
        <template>
            <rect x="0" y="0" v-bind:width="width" v-bind:height="height"
                vector-effect="non-scaling-stroke"
                stroke="silver" stroke-width="8px" stroke-opacity="0.5" />
            <text
                v-bind:x="width*0.015" v-bind:y="height*0.76" fill="silver"
                v-bind:font-size="fontSize">⚜</text>
        </template>
        <props>
            <prop name="width" type="Number" required="true" default="256" />
            <prop name="height" type="Number" required="true" default="256" />
            <prop name="text" type="String" default="Silver Kresmer" />
            <prop name="font-size" type="String" default="200" />
            <prop name="font-family" type="String" default="sans-serif" />
        </props>
    </component-class>

    <!--                       Something like real definitions                      -->

    <!-- Crossing arrows traditionally used to be drawn on the top of routers and switches -->
    <component-class name="CrossArrows" instantiate="auto">
        <template> {{$global("crossArrows", [ [0.1,0.5], [0.2,0.7], [0.2,0.6], [0.4,0.6], [0.4,0.8],
            [0.3,0.8], [0.5,0.9], [0.7,0.8], [0.6,0.8], [0.6,0.6], [0.8,0.6], [0.8,0.7], [0.9,0.5],
            [0.8,0.3], [0.8,0.4], [0.6,0.4], [0.6,0.2], [0.7,0.2], [0.5,0.1], [0.3,0.2], [0.4,0.2],
            [0.4,0.4], [0.2,0.4], [0.2,0.3] ])}} </template>
    </component-class>

    <!-- Switch or router port -->
    <component-class name="Port">
        <template>
            <rect v-bind:width="w" v-bind:height="h" class="port-icon body" />
            <slot />
            <text v-bind:x="w/2"
                v-bind:y="h*0.8" text-anchor="middle" v-bind:font-size="fontSize*h"
                class="port-name">{{label}}<title>{{name}}</title></text>
            <connection-point v-bind:name="`${name}@u`" v-bind:d="cpDiameter" v-bind:x="w/2" v-bind:y="0" dir="up" />
            <connection-point v-bind:name="`${name}@r`" v-bind:d="cpDiameter" v-bind:x="w" v-bind:y="h/2" dir="right" />
            <connection-point v-bind:name="`${name}@d`" v-bind:d="cpDiameter" v-bind:x="w/2" v-bind:y="h" dir="down" />
            <connection-point v-bind:name="`${name}@l`" v-bind:d="cpDiameter" v-bind:x="0" v-bind:y="h/2" dir="left" />
        </template>
        <style>
            .port-name {font-family: sans-serif; fill: white;}
            .port-icon.body {stroke: white;}
        </style>
        <props>
            <prop name="w" type="Number" required="true" default="25" />
            <prop name="h" type="Number" required="true" default="25" />
            <prop name="prefix" type="String" default="" />
            <prop name="font-size" type="Number" default="0.8"/>
        </props>
        <computed-props>
            <computed-prop name="label">String(props.name).replace(props.prefix, '')</computed-prop>
            <computed-prop name="cpDiameter">props.h*0.7</computed-prop>
        </computed-props>
    </component-class>

    <component-class name="SquarePort">
        <template>
            <Kre:Port v-bind:w="d" v-bind:h="d" v-bind:name="name" v-bind:prefix="prefix" v-bind:font-size="fontSize">
                <slot/>
            </Kre:Port>
        </template>
        <props>
            <prop name="d" type="Number" required="true" default="25" /> <!-- diameter (or similar size parameter-->
            <prop name="prefix" type="String" default="" />
            <prop name="font-size" type="Number" default="0.8"/>
        </props>
    </component-class>

    <component-class name="Ferrule">
        <template>
            <circle class="ferrule" v-bind:cx="cx" v-bind:cy="cy" v-bind:r="d/2" />
        </template>
        <props>
            <prop name="cx" type="Number" required="true" default="0"/>
            <prop name="cy" type="Number" required="true" default="0"/>
            <prop name="d" type="Number" required="true" default="25" />
        </props>
        <style>
            .ferrule {fill: #000000; stroke: #707070; stroke-width: 1px;}
        </style>
    </component-class>

    <component-class name="SfpPort">
        <template>
            <Kre:SquarePort v-bind:d="d" v-bind:name="name" v-bind:prefix="prefix" v-bind:font-size="fontSize">
                <Kre:Ferrule v-bind:cx="d/2" v-bind:cy="d/2" v-bind:d="d*0.4" />
            </Kre:SquarePort>
        </template>
        <props>
            <prop name="d" type="Number" required="true" default="25" /> <!-- diameter (or similar size parameter-->
            <prop name="prefix" type="String" default="" />
            <prop name="font-size" type="Number" default="0.8"/>
        </props>
    </component-class>

    <component-class name="XfpPort">
        <template>
            <Kre:Port v-bind:w="h*2.5" v-bind:h="h" v-bind:name="name" v-bind:prefix="prefix" v-bind:font-size="fontSize">
                <Kre:Ferrule v-bind:cx="h*1.25" v-bind:cy="h/2" v-bind:d="h*0.4" />
            </Kre:Port>
        </template>
        <props>
            <prop name="h" type="Number" required="true" default="25" />
            <prop name="prefix" type="String" default="" />
            <prop name="font-size" type="Number" default="0.8"/>
        </props>
    </component-class>


    <!-- General switch -->
    <component-class name="SwitchBody">
        <template>
            <rect x="0" y="0" v-bind:width="width" v-bind:height="height*nSlots" class="facet" />
            <line v-for="i in nSlots-1" x1="0" v-bind:y1="i*height"
                v-bind:x2="width" v-bind:y2="i*height" class="slot-boundary" />
            <g v-if="perspective === 'center'" v-bind:transform="`scale(${width} ${-topFacetSize*height})`">
                <polyline
                    v-bind:points="$p($ThreeVectorTransform({u:[1,0], v:[0.2,1], w:[-0.4,0]})
                                                           ([0,0], [0,1], [1,1], [1,0]))"
                    class="top facet" />
                <polyline
                    v-bind:points="$p($ThreeVectorTransform({u:[1,0], v:[0.2,1], w:[-0.4,0]})(...$$.crossArrows))"
                    class="facet" />
                <slot name="topFacet"/>
            </g>
            <g v-if="perspective === 'right'"
                v-bind:transform="`skewX(${-topFacetSkew}) scale(${width} ${-topFacetSize*height})`">
                <polyline points="0,0 0,1 1,1 1,0" class="top facet" />
                <polyline v-bind:points="$p($$.crossArrows)" class="facet" />
                <slot name="topFacet"/>
            </g>
            <polygon
                v-if="perspective === 'right'"
                v-bind:points="`${width},0 ${width},${height*nSlots} 
                                ${width+topFacetSkewShift},${height*(nSlots - topFacetSize*1.2)} 
                                ${width+topFacetSkewShift},${-height*topFacetSize}`"
                class="side facet" />
            <g
                v-if="perspective === 'left'"
                v-bind:transform="`skewX(${topFacetSkew}) scale(${width} ${-topFacetSize*height})`">
                <polyline points="0,0 0,1 1,1 1,0" class="top facet" />
                <polyline v-bind:points="$p($$.crossArrows)" class="facet" />
                <slot name="topFacet"/>
            </g>
            <polygon
                v-if="perspective === 'left'"
                v-bind:points="`0,0 0,${height*nSlots} 
                                ${-topFacetSkewShift},${height*(nSlots - topFacetSize*1.2)} 
                                ${-topFacetSkewShift},${-height*topFacetSize}`"
                class="side facet" />
            <text
                v-bind:x="nameX" v-bind:y="nameY" v-bind:font-size="height*0.75"
                text-anchor="middle" class="device-name"
                v-bind:class='{"no-persp": perspective === "none"}'>{{name}}</text>
        </template>
        <style>
            .device-name { font-family: sans-serif; fill: black; text-shadow: none}
            .device-name.no-persp { font-family: sans-serif!important; fill: black!important; text-shadow: none!important}
            .port-icon { fill: #404040; }
            .facet {
                --facet-color: lightgray;
                fill: var(--facet-color); stroke: var(--facet-color); stroke-width: 0;
            }
            .top.facet { filter: brightness(0.7); }
            .side.facet { filter: brightness(0.5); }
            .slot-boundary { stroke: black; stroke-opacity: 0.3; stroke-width: 2px; }
        </style>
        <props>
            <prop name="n-slots" type="Number" default="1" />
            <prop name="height" type="Number" required="true" default="50" />
            <prop name="width" type="Number" required="true" default="312.5" />
            <prop name="perspective" type="String" choices="left,right,center,none" default="center" />
            <prop name="top-facet-size" type="Number" default="1.4" />
            <prop name="top-facet-skew" type="Number" default="60" />
        </props>
        <computed-props>
            <computed-prop name="topFacetSkewShift">
                props.height * props.topFacetSize * Math.tan(props.topFacetSkew * Math.PI/180)
            </computed-prop>
            <computed-prop name="nameX">
                props.perspective === 'right' ? props.width/2 + computedProps.topFacetSkewShift*0.393 :
                props.perspective === 'left' ? props.width/2 - computedProps.topFacetSkewShift*0.393 :
                props.width*0.5
            </computed-prop>
            <computed-prop name="nameY">
                props.perspective === "none" ? -props.height*0.3 : -props.height*props.topFacetSize*0.393
            </computed-prop>
        </computed-props>
    </component-class>

    <component-class name="SwitchStackSlotBadge">
        <template>
            <rect x="0" y="0" v-bind:width="width" v-bind:height="height"
                class="slot-badge" />
            <text v-bind:x="width/2" v-bind:y="height*0.75" v-bind:font-size="height*0.75"
                text-anchor="middle" class="slot-badge-text">{{slot}}</text>
        </template>
        <style>
            .slot-badge { fill: lightgray; rx: 3px; stroke: white; stroke-width: 2px}
            .slot-badge-text { font-family: sans-serif; fill: black; vertical-align: middle;}
        </style>
        <props>
            <prop name="slot" type="Number" required="true" />
            <prop name="width" type="Number" required="true" />
            <prop name="height" type="Number" required="true" />
        </props>
    </component-class>

    <component-class name="Switch">
        <template>
            <Kre:SwitchBody v-bind:width="width" v-bind:height="height"
                v-bind:perspective="perspective" v-bind:name="name" />
            <Kre:SquarePort v-for="i in nPorts"
                v-bind:x="height*(0.75*i - 0.5)" v-bind:y="height/4" v-bind:d="height/2"
                v-bind:name="i" />
        </template>
        <style extends="SwitchBody" />
        <props>
            <prop name="nPorts" type="Number" default="8" />
            <prop name="height" type="Number" required="true" default="50" />
            <prop name="perspective" type="String" choices="left,right,center,none" default="center" />
        </props>
        <computed-props>
            <computed-prop name="width">props.height * (0.25 + 0.75*props.nPorts)</computed-prop>
        </computed-props>
    </component-class>

    <!-- Various breeds of Switches -->
    <component-class name="ExtremeSwitchBody">
        <template>
            <Kre:SwitchBody v-bind:name="name" v-bind:width="width" v-bind:height="height"
                            v-bind:n-slots="nSlots" v-bind:top-facet-size="topFacetSize" 
                            v-bind:perspective="perspective" />
        </template>
        <style extends="SwitchBody">
            .device-name { fill: white; text-shadow: 3px 3px 3px black; }
            .model-name { fill: white; }
            .facet {fill: #cf34fe;}
            .port-icon { fill: #520f75; }
            .port-icon.body { stroke: #fde3fd; }
        </style>
        <props>
            <prop name="width" type="Number" required="true" default="312.5" />
            <prop name="n-slots" type="Number" default="1" />
            <prop name="height" type="Number" required="true" />
            <prop name="perspective" type="String" choices="left,right,center,none" default="center" />
            <prop name="top-facet-size" type="Number" default="1.4" />
        </props>
    </component-class>

    <component-class name="ExtremeSwitchStack">
        <template/>
        <style>
            .slot-badge { fill: #7e0133; stroke: #e0d900; }
            .slot-badge-text { fill: white; }
        </style>
    </component-class>

    <component-class name="ExtremeSwitch">
        <template>
            <Kre:Switch v-bind:name="name" v-bind:height="height" v-bind:n-ports="nPorts"
                v-bind:perspective="perspective" />
        </template>
        <style extends="Switch, ExtremeSwitchBody" />
        <props>
            <prop name="nPorts" type="Number" default="8" />
            <prop name="height" type="Number" required="true" />
            <prop name="perspective" type="String" choices="left,right,center,none" default="center" />
        </props>
    </component-class>

    <component-class name="Extreme-X590-24x">
        <template>
            <Kre:ExtremeSwitchBody v-bind:name="name" v-bind:height="height" v-bind:width="width" 
                                   v-bind:top-facet-size="1" v-bind:perspective="perspective" />
            <text v-bind:x="height*7" v-bind:y="height/3" v-bind:font-size="height*0.25" 
                  class="model-name">X590</text>
            <template v-for="i in 12">
                <Kre:SfpPort v-bind:x="height*(i*0.5-0.2)" v-bind:y="height*0.15" v-bind:d="height/3" v-bind:name="i*2-1" />
                <Kre:SfpPort v-bind:x="height*(i*0.5-0.2)" v-bind:y="height*0.53" v-bind:d="height/3" v-bind:name="i*2" />
            </template>
            <Kre:XfpPort v-bind:x="height*7" v-bind:y="height*0.53" v-bind:h="height/3" v-bind:name="25" />
            <Kre:XfpPort v-bind:x="height*8" v-bind:y="height*0.15" v-bind:h="height/3" v-bind:name="26" />
            <Kre:XfpPort v-bind:x="height*8" v-bind:y="height*0.53" v-bind:h="height/3" v-bind:name="27" />
        </template>
        <style extends="ExtremeSwitchBody" />
        <props>
            <prop name="height" type="Number" required="true" default="75"/>
            <prop name="width" type="Number"/>
            <prop name="perspective" type="String" choices="left,right,center,none" default="center" />
        </props>
        <computed-props>
            <computed-prop name="width">props.width ?? props.height * 9.1</computed-prop>
        </computed-props>
    </component-class>

    <component-class name="Extreme-X590-24x-Stack">
        <template>
            <Kre:ExtremeSwitchBody v-bind:name="name" v-bind:height="height" v-bind:width="width"
                                   v-bind:n-slots="nSlots" v-bind:top-facet-size="1" 
                                   v-bind:perspective="perspective" />
            <text v-bind:x="height*7" v-bind:y="height/3" v-bind:font-size="height*0.25" 
                  class="model-name">X590</text>
            <template v-for="slot in nSlots">
                <Kre:SwitchStackSlotBadge v-bind:x="height*0.1" v-bind:y="height*(-0.9 + slot)"
                    v-bind:width = "height*0.25" v-bind:height = "height*0.25" v-bind:slot="slot" />
                <template v-for="i in 12">
                    <Kre:SfpPort v-bind:x="height*(i*0.5)" v-bind:y="height*(slot-0.85)" v-bind:d="height/3" 
                        v-bind:name="`${slot}:${i*2-1}`" v-bind:prefix="`${slot}:`"/>
                    <Kre:SfpPort v-bind:x="height*(i*0.5)" v-bind:y="height*(slot-0.47)" v-bind:d="height/3" 
                        v-bind:name="`${slot}:${i*2}`" v-bind:prefix="`${slot}:`"/>
                </template>
                <Kre:XfpPort v-bind:x="height*7" v-bind:y="height*(slot-0.47)" v-bind:h="height/3" v-bind:name="`${slot}:25`" />
                <Kre:XfpPort v-bind:x="height*8" v-bind:y="height*(slot-0.85)" v-bind:h="height/3" v-bind:name="`${slot}:26`" />
                <Kre:XfpPort v-bind:x="height*8" v-bind:y="height*(slot-0.47)" v-bind:h="height/3" v-bind:name="`${slot}:27`" />
            </template>
        </template>
        <style extends="ExtremeSwitchBody, SwitchStackSlotBadge, ExtremeSwitchStack"/>
        <props>
            <prop name="height" type="Number" required="true" default="75"/>
            <prop name="width" type="Number"/>
            <prop name="n-slots" type="Number" default="1" />
            <prop name="perspective" type="String" choices="left,right,center,none" default="center" />
        </props>
        <computed-props>
            <computed-prop name="width">props.width ?? props.height * 9.1</computed-prop>
        </computed-props>
    </component-class>

    <component-class name="Extreme-X670-48x">
        <template>
            <Kre:ExtremeSwitchBody v-bind:name="name" v-bind:height="height" v-bind:width="width" 
                                   v-bind:top-facet-size="1" v-bind:perspective="perspective" />
            <template v-for="i in 24">
                <Kre:SfpPort v-bind:x="height*(i*0.5-0.2)" v-bind:y="height*0.15" v-bind:d="height/3" v-bind:name="i*2-1" />
                <Kre:SfpPort v-bind:x="height*(i*0.5-0.2)" v-bind:y="height*0.53" v-bind:d="height/3" v-bind:name="i*2" />
            </template>
        </template>
        <style extends="ExtremeSwitchBody" />
        <props>
            <prop name="height" type="Number" required="true" default="75"/>
            <prop name="width" type="Number"/>
            <prop name="perspective" type="String" choices="left,right,center,none" default="center" />
        </props>
        <computed-props>
            <computed-prop name="width">props.width ?? props.height * 12.45</computed-prop>
        </computed-props>
    </component-class>

    <component-class name="Extreme-X670-48x-Stack">
        <template>
            <Kre:ExtremeSwitchBody v-bind:name="name" v-bind:height="height" v-bind:width="width"
                                   v-bind:top-facet-size="1" v-bind:n-slots="nSlots" 
                                   v-bind:perspective="perspective" />
            <template v-for="slot in nSlots">
                <Kre:SwitchStackSlotBadge v-bind:x="height*0.1" v-bind:y="height*(-0.9 + slot)"
                    v-bind:width = "height*0.25" v-bind:height = "height*0.25" v-bind:slot="slot" />
                <template v-for="i in 24">
                    <Kre:SfpPort v-bind:x="height*(i*0.5)" v-bind:y="height*(slot-0.85)" v-bind:d="height/3" 
                        v-bind:name="`${slot}:${i*2-1}`" v-bind:prefix="`${slot}:`" />
                    <Kre:SfpPort v-bind:x="height*(i*0.5)" v-bind:y="height*(slot-0.47)" v-bind:d="height/3" 
                        v-bind:name="`${slot}:${i*2}`" v-bind:prefix="`${slot}:`" />
                </template>
            </template>
        </template>
        <style extends="ExtremeSwitchBody, SwitchStackSlotBadge, ExtremeSwitchStack"/>
        <props>
            <prop name="height" type="Number" required="true" default="75"/>
            <prop name="width" type="Number"/>
            <prop name="n-slots" type="Number" default="1" />
            <prop name="perspective" type="String" choices="left,right,center,none" default="center" />
        </props>
        <computed-props>
            <computed-prop name="width">props.width ?? props.height * 12.51</computed-prop>
        </computed-props>
    </component-class>


    <!-- The following class is not really useful. But it was the first one comletely generated by Copilot,
         and I want to keep it for the memory. The biggest surprise was that Copilot definitely did not see 
         Kresmer classes before and also he could not know that we call concentrator switches in our 
         metro-network "hubs". -->
    <component-class name="Hub">
        <template>
            <Kre:Switch v-bind:name="name" v-bind:height="height" v-bind:n-ports="nPorts"
                v-bind:perspective="perspective" />
        </template>
        <style extends="Switch">
            .device-name { fill: white; text-shadow: 3px 3px 3px black; }
            .facet {fill: #ffcc00;}
            .port-icon { fill: #ff6600; }
            .port-icon.body { stroke: #ffcc00; }
        </style>
        <props>
            <prop name="nPorts" type="Number" default="8" />
            <prop name="height" type="Number" required="true" />
            <prop name="perspective" type="String" choices="left,right,center,none" default="center" />
        </props>
    </component-class>

    <component-class name="Catalyst">
        <template>
            <Kre:Switch v-bind:name="name" v-bind:height="height" v-bind:n-ports="nPorts"
                v-bind:perspective="perspective" />
        </template>
        <style extends="Switch">
            .device-name { fill: yellow; text-shadow: 3px 3px 3px black; }
            .facet {fill: darkcyan;}
            .port-icon {fill: #005757;}
        </style>
        <props>
            <prop name="nPorts" type="Number" default="8" />
            <prop name="height" type="Number" required="true" />
            <prop name="perspective" type="String" choices="left,right,center,none" default="center" />
        </props>
    </component-class>


    <!-- Various breeds of routers -->

    <component-class name="RouterBody">
        <template>
            <Kre:SwitchBody v-bind:name="name" v-bind:height="height" v-bind:width="width"
                v-bind:n-slots="nSlots" v-bind:perspective="perspective" 
                v-bind:top-facet-size="topFacetSize" v-bind:top-facet-skew="topFacetSkew">
                <template v-slot:topFacet="{}">
                    <ellipse cx="0.5" cy="0.5" rx="0.35" ry="0.45" style="fill: none; stroke-width: 0.015" class="facet" />
                </template>
            </Kre:SwitchBody>
        </template>
        <style extends="SwitchBody"/>
        <props>
            <prop name="n-slots" type="Number" default="1" />
            <prop name="height" type="Number" required="true" default="50" />
            <prop name="width" type="Number" required="true" default="312.5" />
            <prop name="perspective" type="String" choices="left,right,center,none" default="center" />
            <prop name="top-facet-size" type="Number" default="1.4" />
            <prop name="top-facet-skew" type="Number" default="60" />
        </props>
    </component-class>

    <component-class name="Juniper-MX204">
        <template>
            <Kre:RouterBody v-bind:name="name" v-bind:height="height" v-bind:width="width" 
                             v-bind:top-facet-size="1" v-bind:perspective="perspective" />
            <text v-bind:x="height*0.25" v-bind:y="height*0.25" v-bind:font-size="height*0.25" 
                  class="model-name">MX204</text>
            <Kre:XfpPort v-for="i in 4" v-bind:x="height*(i-0.8)" v-bind:y="height*0.53" v-bind:h="height/3" 
                         v-bind:name="`et0/0/${i-1}`" prefix="et0/"/>
            <template v-for="i in 4">
                <Kre:SfpPort v-bind:x="height*(i*0.5+5)" v-bind:y="height*0.15" v-bind:d="height/3" 
                             v-bind:name="`xe0/1/${i*2-2}`" prefix="xe0/" v-bind:font-size="0.7"/>
                <Kre:SfpPort v-bind:x="height*(i*0.5+5)" v-bind:y="height*0.53" v-bind:d="height/3" 
                             v-bind:name="`xe0/1/${i*2-1}`" prefix="xe0/" v-bind:font-size="0.7"/>
            </template>
            <template v-for="i in 2">
                <circle v-for="j in 2" v-bind:cx="height*(7.8+i*0.2)" v-bind:cy="height*(0.33+j*0.2)" 
                        v-bind:r="height*0.05" class="sync-port"/>
            </template>
        </template>
        <style extends="RouterBody">
            .device-name { fill: #ffffff; text-shadow: 3px 3px 3px black; }
            .model-name { fill: #ffffff; }
            .facet {--facet-color: #b8b8b8;}
            .sync-port {fill: #8f6b00; stroke: #ffce1f; stroke-width: 2px;}
        </style>
        <props>
            <prop name="height" type="Number" required="true" default="75"/>
            <prop name="width" type="Number"/>
            <prop name="perspective" type="String" choices="left,right,center,none" default="center" />
        </props>
        <computed-props>
            <computed-prop name="width">props.width ?? props.height * 9.1</computed-prop>
        </computed-props>
    </component-class>

    <!-- Various link types -->
    <link-class name="twisted-pair" type="copper">
        <style>
            .link {stroke: #3b3b3b;}
            .padding {stroke-width: 8px;}
            .segment {stroke-width: 3px;}
            .segment.highlighted {stroke: black; stroke-width: 4px}
            .segment.selected {stroke: black; stroke-width: 5px}
            .vertex {stroke: black; stroke-width: 4px; fill: white; r: 6px}
            .vertex.padding {r: 60px; fill: gray; fill-opacity: 0.3}
            .vertex.blinker {r: 10px; stroke: red; stroke-width: 2px; fill: red; fill-opacity: 0.2;}
        </style>
    </link-class>

    <link-class name="DAC" type="fiber-optics">
        <style>
            .link {stroke: #236e85;}
            .padding {stroke-width: 8px;}
            .segment {stroke-width: 4px; stroke-linejoin: round;}
            .segment.highlighted {stroke: #2f97b6; stroke-width: 5px}
            .segment.selected {stroke: #2f97b6; stroke-width: 6px}
            .vertex {stroke: #2f97b6; stroke-width: 4px; fill: white; r: 6px}
            .vertex.padding {r: 60px; fill: gray; fill-opacity: 0.3}
            .vertex.blinker {r: 10px; stroke: red; stroke-width: 2px; fill: red; fill-opacity: 0.2;}
        </style>
    </link-class>

    <link-class name="AOC" type="fiber-optics">
        <style>
            .link {stroke: #0098c7;}
            .padding {stroke-width: 8px;}
            .segment {stroke-width: 4px; stroke-linejoin: round;}
            .segment.highlighted {stroke: #00b8f0; stroke-width: 5px}
            .segment.selected {stroke: #00b8f0; stroke-width: 6px}
            .vertex {stroke: #009ccc; stroke-width: 4px; fill: white; r: 6px}
            .vertex.padding {r: 60px; fill: gray; fill-opacity: 0.3}
            .vertex.blinker {r: 10px; stroke: red; stroke-width: 2px; fill: red; fill-opacity: 0.2;}
        </style>
    </link-class>
</kresmer-library>