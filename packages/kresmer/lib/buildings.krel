<?xml version="1.0" encoding="utf-8"?>
<?xml-model href="xsd/kresmer-library.xsd"?>
<!-- **************************************************************************>
 *                            ðŸ‘‘ KresMer ðŸ‘‘
 *       "Kreslennya Merezh" - network diagram editor and viewer
 *      Copyright (C) 2022-2024 Dmitriy Stepanenko. All Rights Reserved.
 * ___________________________________________________________________________
 *                          Buildings library
 *        This library contains building templates for the site plans
<*************************************************************************** -->

<kresmer-library name="buildings" xmlns:Kre="Kre" xmlns:v-bind="v-bind" xmlns:v-on="v-on" xmlns:v-slot="v-slot">
    <import library="stdlib" />

    <!-- Abstract base building -->
    <component-class name="Building" category=".Buildings">
        <props>
            <prop name="h" type="Number" category="Geometry" default="50" required="true" 
                  description="Vertical size of the building image (in its own coords)"/>
            <prop name="w" type="Number" category="Geometry" 
                  description="Horizontal size of the building image (in its own coords)"/>
            <prop name="nFloors" type="Number" category="Construction" description="The number of floors" />
            <prop name="material" type="String" category="Construction" choices="concrete, brick, stone, wood" description="Building material"/>
            <prop name="roofShape" type="String" choices="flat, pitched" category="Construction" description="The roof shape"/>
            <prop name="street" type="String" category="Location"/>
            <prop name="buildingNumber" type="String" category="Location" description="The building street number"/>
            <prop name="buildingNumberPosition" type="String" category="Presentation" description="The position of the building number label"/>
            <prop name="nFloorsPosition" type="String" category="Presentation" description="The position of the number of the flows label"/>
            <prop name="entrancesLayout" type="String" category="Construction" description="The location and the order of the entrances"/>
        </props>
        <computed-props>
            <computed-prop name="title">$streetAddress({street: props.street, buildingNumber: props.buildingNumber})</computed-prop>
        </computed-props>
        <style>
            .building { stroke: #bf6731; fill: #f4a615; stroke-width: "2px"; }
            .building.wood { fill: #fad46b }
            .building.number { fill: #393432; stroke: none; }
            .building.number.c  { text-anchor: middle; dominant-baseline: central; }
            .building.number.nw { text-anchor: start;  dominant-baseline: text-before-edge; }
            .building.number.n  { text-anchor: middle; dominant-baseline: text-before-edge; }
            .building.number.ne { text-anchor: end;    dominant-baseline: text-before-edge; }
            .building.number.e  { text-anchor: end;    dominant-baseline: central; }
            .building.number.se { text-anchor: end;    dominant-baseline: text-after-edge; }
            .building.number.s  { text-anchor: middle; dominant-baseline: text-after-edge; }
            .building.number.sw { text-anchor: start;  dominant-baseline: text-after-edge; }
            .building.number.w  { text-anchor: start;  dominant-baseline: central; }
        </style>
    </component-class>

    <!-- Building elements -->
    <component-class name="Entrance" category=".Buildings">
        <template>
            <template v-if="align === 'bottom'">
                <rect v-for="i in nStairs" v-bind:x="-w/2" v-bind:y="-lStair * i" v-bind:width="w" v-bind:height="lStair" class="entrance"
                    v-bind:opacity="i/nStairs" />
                <text class="number" v-bind:font-size="fontSize">{{number}}</text>
            </template>
            <template v-else-if="align === 'top'">
                <rect v-for="i in nStairs" v-bind:x="-w/2" v-bind:y="lStair * (i - 1)" v-bind:width="w" v-bind:height="lStair" class="entrance"
                    v-bind:opacity="i/nStairs" />
                <text class="number" v-bind:y="nStairs * lStair" v-bind:font-size="fontSize">{{number}}</text>
            </template>
        </template>
        <props>
            <prop name="h" type="Number" />
            <prop name="w" type="Number" required="true" />
            <prop name="number" type="[String, Number]" />
            <prop name="align" type="String" choices="top, bottom, left, right" default="bottom"/>
        </props>
        <computed-props>
            <computed-prop name="nStairs">4</computed-prop>
            <computed-prop name="lStair">props.h ?? props.w/3</computed-prop>
            <computed-prop name="fontSize">computedProps.lStair * computedProps.nStairs * 0.75</computed-prop>
        </computed-props>
        <style>
            .entrance { fill: #bf6731; stroke: none; }
            .number { fill: white; text-anchor: middle; dominant-baseline: ideographic; }
        </style>
    </component-class>

    <component-class name="NFloorsLabel" category=".Buildings">
        <template>
            <g class="n-floors-label">
                <polyline v-if="roofShape === 'pitched'" 
                    v-bind:points="`0,${-h*0.4} ${align === 'right' ? -w/2 : w/2},${-h*0.7} ${align === 'right' ? -w : w},${-h*0.4}`"/>
                <line v-else="" x1="0" v-bind:y1="-h/2" v-bind:x2="align === 'right' ? -w : w" v-bind:y2="-h/2"/>
                <line x1="0" v-bind:y1="h/2" v-bind:x2="align === 'right' ? -w : w" v-bind:y2="h/2"/>
                <text v-bind:x="align === 'right' ? -w/2 : w/2" v-bind:y="0" v-bind:font-size="h*0.75">{{nFloors}}</text>
            </g>
        </template>
        <props>
            <prop name="n-floors" type="Number" required="true"/>
            <prop name="roofShape" type="String" />
            <prop name="w" type="Number" />
            <prop name="h" type="Number" required="true" />
            <prop name="align" type="String" choices="left, right" default="left"/>
        </props>
        <computed-props>
            <computed-prop name="w">props.w ?? props.h/1.5</computed-prop>
        </computed-props>
        <style>
            .n-floors-label { fill: white }
            .n-floors-label text { text-anchor: middle; dominant-baseline: central; }
            .n-floors-label line, .n-floors-label polyline { stroke-width: 1px; stroke: white; fill: none; }
        </style>
    </component-class>
    
    <!-- Various building shapes (inspired by Pentamino) -->
    
    <!-- I-shaped building:  
        +============+
        |++++++++++++|
        +============+
     -->
    <component-class name="I-Building" category="Buildings">
        <extends base="Building"/>
        <template>
            <title>{{title}}</title>
            <rect x="0" y="0" v-bind:width="w" v-bind:height="h" class="building" v-bind:class="material" />
            <template v-if="entrancesLayout === 'bottom-ccw'">
                <Kre:Entrance v-for="i in nEntrances" v-bind:x="entrStep * (i - 0.5)" v-bind:y="h" v-bind:w="entrW" v-bind:number="i"/>
            </template>
            <template v-else-if="entrancesLayout === 'bottom-cw'">
                <Kre:Entrance v-for="i in nEntrances" v-bind:x="entrStep * (nEntrances - i + 0.5)" v-bind:y="h" v-bind:w="entrW" v-bind:number="i"/>
            </template>
            <template v-else-if="entrancesLayout === 'top-ccw'">
                <Kre:Entrance v-for="i in nEntrances" v-bind:x="entrStep * (nEntrances - i + 0.5)" v-bind:y="0" v-bind:w="entrW" align="top" v-bind:number="i"/>
            </template>
            <template v-else-if="entrancesLayout === 'top-cw'">
                <Kre:Entrance v-for="i in nEntrances" v-bind:x="entrStep * (i - 0.5)" v-bind:y="0" v-bind:w="entrW" align="top" v-bind:number="i"/>
            </template>
            <Kre:NFloorsLabel v-if="nFloors" v-bind:n-floors="nFloors" v-bind="nFloorsPos" v-bind:h="h/3" 
                v-bind:nFloors="nFloors" v-bind:roof-shape="roofShape"/>
            <text v-bind="bldNumbPos" class="building number" v-bind:class="{[buildingNumberPosition]: true}" v-bind:font-size="numberFontSize">
                {{buildingNumber}}
            </text>
            <adjustment-ruler target-prop="h" v-bind:x1="0" v-bind:y1="0" v-bind:x2="0" v-bind:y2="h" fixed-end="1"/>
            <adjustment-ruler target-prop="w" v-bind:x1="0" v-bind:y1="0" v-bind:x2="w" v-bind:y2="0" fixed-end="1"/>
        </template>
        <props>
            <prop name="w" type="Number" default="200"/>
            <prop name="nEntrances" type="Number" category="Construction" description="The number of entrances" />
            <prop name="entrancesLayout" type="String" choices="bottom-cw, bottom-ccw, top-cw, top-ccw" default="bottom-ccw" />
            <prop name="buildingNumberPosition" type="String" choices="c, nw, n, ne, e, se, s, sw, w" default="c"/>
            <prop name="nFloorsPosition" type="String" choices="w, e" default="w"/>
        </props>
        <computed-props>
            <computed-prop name="entrStep">props.w / props.nEntrances</computed-prop>
            <computed-prop name="entrW">computedProps.entrStep/4</computed-prop>
            <computed-prop name="bldNumbPos">
                props.buildingNumberPosition === "nw" ? {x: props.w*0.02, y: props.h*0.02} :
                props.buildingNumberPosition === "n"  ? {x: props.w/2, y: props.h*0.02} :
                props.buildingNumberPosition === "ne" ? {x: props.w*0.98, y: props.h*0.02} :
                props.buildingNumberPosition === "e"  ? {x: props.w*0.98, y: props.h/2} :
                props.buildingNumberPosition === "se" ? {x: props.w*0.98, y: props.h*0.98} :
                props.buildingNumberPosition === "s"  ? {x: props.w/2,    y: props.h*0.98} :
                props.buildingNumberPosition === "sw" ? {x: props.w*0.02, y: props.h*0.98} :
                props.buildingNumberPosition === "w"  ? {x: props.w*0.02, y: props.h/2} :
                {x: props.w/2, y: props.h/2}
            </computed-prop>
            <computed-prop name="nFloorsPos">
                props.nFloorsPosition === "w" ? {x: props.w*0.02, y: props.h/2, align: "left"} :
                                                       {x: props.w*0.98, y: props.h/2, align: "right"}
            </computed-prop>
            <computed-prop name="numberFontSize">props.h/3</computed-prop>
        </computed-props>
    </component-class>
    
    <!-- L-shaped building:  
        +====+
        |++++|
        |++++|
        |+++++======+
        |+++++++++++|
        +===========+
     -->
     <component-class name="L-Building" category="Buildings">
        <extends base="Building"/>
        <template>
            <title>{{title}}</title>
            <rect x="0" y="0" v-bind:width="w" v-bind:height="h" class="building" v-bind:class="material" />
            <template v-if="entrancesLayout === 'bottom-ccw'">
                <Kre:entrance v-for="i in nEntrances" v-bind:x="h * (i - 0.5)" v-bind:y="h" v-bind:w="h/4" v-bind:number="i"/>
            </template>
            <template v-else-if="entrancesLayout === 'bottom-cw'">
                <Kre:entrance v-for="i in nEntrances" v-bind:x="h * (nEntrances - i + 0.5)" v-bind:y="h" v-bind:w="h/4" v-bind:number="i"/>
            </template>
            <template v-else-if="entrancesLayout === 'top-ccw'">
                <Kre:entrance v-for="i in nEntrances" v-bind:x="h * (nEntrances - i + 0.5)" v-bind:y="0" v-bind:w="h/4" align="top" v-bind:number="i"/>
            </template>
            <template v-else-if="entrancesLayout === 'top-cw'">
                <Kre:entrance v-for="i in nEntrances" v-bind:x="h * (i - 0.5)" v-bind:y="0" v-bind:w="h/4" align="top" v-bind:number="i"/>
            </template>
            <adjustment-ruler target-prop="h" v-bind:x1="0" v-bind:y1="0" v-bind:x2="0" v-bind:y2="h" fixed-end="1"/>
            <adjustment-ruler target-prop="w" v-bind:x1="0" v-bind:y1="0" v-bind:x2="w" v-bind:y2="0" fixed-end="1"/>
        </template>
        <props>
            <prop name="w" type="Number" default="200"/>
            <prop name="entrancesLayout" type="String" choices="bottom-cw, bottom-ccw, top-cw, top-ccw" default="bottom-ccw" 
                category="Construction" description="The location and the order of the entrances"/>
        </props>
        <computed-props>
            <computed-prop name="w">
                props.w === undefined || props.w === 200 ? props.h * props.nEntrances : props.w
            </computed-prop>
        </computed-props>
    </component-class>

</kresmer-library>