<?xml version="1.0" encoding="utf-8"?>
<?xml-model href="xsd/kresmer-library.xsd"?>
<!-- **************************************************************************>
 *                            ðŸ‘‘ KresMer ðŸ‘‘
 *       "Kreslennya Merezh" - network diagram editor and viewer
 *      Copyright (C) 2022-2024 Dmitriy Stepanenko. All Rights Reserved.
 * ___________________________________________________________________________
 *                          Buildings library
 *        This library contains building templates for the site plans
<*************************************************************************** -->

<kresmer-library name="buildings" xmlns:Kre="Kre" xmlns:v-bind="v-bind" xmlns:v-on="v-on" xmlns:v-slot="v-slot">
    <import library="stdlib" />

    <!-- Abstract base building -->
    <component-class name="building" category=".Buildings">
        <props>
            <prop name="h" type="Number" category="Geometry" default="50" required="true" 
                  description="Vertical size of the building image (in its own coords)"/>
            <prop name="w" type="Number" category="Geometry" 
                  description="Horizontal size of the building image (in its own coords)"/>
            <prop name="nFloors" type="Number" category="Construction" description="The number of floors" />
            <prop name="nEntrances" type="Number" default="4" category="Construction" description="The number of entrances" />
            <prop name="material" type="String" category="Construction" choices="concrete, brick, stone, wood" description="Building material"/>
            <prop name="street" type="String" category="Location"/>
            <prop name="number" type="String" category="Location" description="The building street number"/>
        </props>
        <computed-props>
            <computed-prop name="title">$streetAddress({street: props.street, buildingNumber: props.number})</computed-prop>
        </computed-props>
        <style>
            .building { stroke: #bf6731; fill: #f4a615; stroke-width: "2px"; }
            .building.wood { fill: #fad46b }
        </style>
    </component-class>

    <!-- Building elements -->
    <component-class name="entrance" category=".Buildings">
        <template>
            <rect v-for="i in nStairs" v-bind:x="-w/2" v-bind:y="-h * i" v-bind:width="w" v-bind:height="h" class="entrance"
                  v-bind:opacity="i/nStairs" />
            <text class="number" v-bind:font-size="fontSize">{{number}}</text>
        </template>
        <props>
            <prop name="h" type="Number" />
            <prop name="w" type="Number" required="true" />
            <prop name="number" type="[String, Number]" />
            <prop name="align" type="String" choices="top, bottom, left, right" default="bottom"/>
        </props>
        <computed-props>
            <computed-prop name="nStairs">4</computed-prop>
            <computed-prop name="h">props.h ?? props.w/3</computed-prop>
            <computed-prop name="fontSize">computedProps.h * computedProps.nStairs * 0.75</computed-prop>
        </computed-props>
        <style>
            .entrance { fill: #bf6731; stroke: none; }
            .number { fill: white; text-anchor: middle; dominant-baseline: ideographic; }
        </style>
    </component-class>

    <!-- Various building shapes (inspired by Pentamino) -->
    
    <!-- I-shaped building:  
        +==========+
        |          |
        +==========+
     -->
    <component-class name="I-building" category="Buildings">
        <extends base="building"/>
        <template>
            <title>{{title}}</title>
            <rect x="0" y="0" v-bind:width="w" v-bind:height="h" class="building" v-bind:class="material" />
            <template v-if="entrancesLayout === 'bottom-ccw'">
                <Kre:entrance v-for="i in nEntrances" v-bind:x="h * (i - 0.5)" v-bind:y="h" v-bind:w="h/4" v-bind:number="i"/>
            </template>
            <template v-else-if="entrancesLayout === 'bottom-cw'">
                <Kre:entrance v-for="i in nEntrances" v-bind:x="h * (nEntrances - i + 0.5)" v-bind:y="h" v-bind:w="h/4" v-bind:number="i"/>
            </template>
            <template v-else-if="entrancesLayout === 'top-ccw'">
                <Kre:entrance v-for="i in nEntrances" v-bind:x="h * (nEntrances - i + 0.5)" v-bind:y="0" v-bind:w="h/4" align="top" v-bind:number="i"/>
            </template>
            <template v-else-if="entrancesLayout === 'top-cw'">
                <Kre:entrance v-for="i in nEntrances" v-bind:x="h * (i - 0.5)" v-bind:y="0" v-bind:w="h/4" align="top" v-bind:number="i"/>
            </template>
            <adjustment-ruler target-prop="h" v-bind:x1="0" v-bind:y1="0" v-bind:x2="0" v-bind:y2="h" fixed-end="1"/>
            <adjustment-ruler target-prop="w" v-bind:x1="0" v-bind:y1="0" v-bind:x2="w" v-bind:y2="0" fixed-end="1"/>
        </template>
        <props>
            <prop name="w" type="Number" default="200"/>
            <prop name="entrancesLayout" type="String" choices="bottom-cw, bottom-ccw, top-cw, top-ccw" default="bottom-ccw" 
                category="Construction" description="The location and the order of the entrances"/>
        </props>
        <computed-props>
            <computed-prop name="w">
                props.w === undefined || props.w === 200 ? props.h * props.nEntrances : props.w
            </computed-prop>
        </computed-props>
    </component-class>

</kresmer-library>