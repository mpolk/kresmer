<?xml version="1.0" encoding="utf-8"?>
<?xml-model href="xsd/kresmer-library.xsd"?>
<!-- **************************************************************************>
 *                            ðŸ‘‘ KresMer ðŸ‘‘
 *       "Kreslennya Merezh" - network diagram editor and viewer
 *      Copyright (C) 2022-2024 Dmitriy Stepanenko. All Rights Reserved.
 * ___________________________________________________________________________
 *                          Buildings library
 *        This library contains building templates for the site plans
<*************************************************************************** -->

<kresmer-library name="buildings" xmlns:Kre="Kre" xmlns:v-bind="v-bind" xmlns:v-on="v-on" xmlns:v-slot="v-slot">
    <import library="stdlib" />

    <!-- Abstract base building -->
    <component-class name="Building" category=".Buildings">
        <props>
            <prop name="h" type="Number" category="Geometry" default="50" required="true" 
                  description="Vertical size of the building image (in its own coords)"/>
            <prop name="w" type="Number" category="Geometry" 
                  description="Horizontal size of the building image (in its own coords)"/>
            <prop name="nFloors" type="Number" category="Construction" description="The number of floors" />
            <prop name="material" type="String" category="Construction" choices="concrete, brick, stone, wood" description="Building material"/>
            <prop name="roofShape" type="String" choices="flat, pitched" category="Construction" description="The roof shape"/>
            <prop name="street" type="String" category="Location"/>
            <prop name="buildingNumber" type="String" category="Location" description="The building street number"/>
            <prop name="buildingNumberPosition" type="String" category="Presentation" description="The position of the building number label"/>
            <prop name="nFloorsPosition" type="String" category="Presentation" description="The position of the number of the flows label"/>
            <prop name="entrancesLayout" type="String" category="Construction" description="The location and the order of the entrances"/>
        </props>
        <functions>
            <function name="labelPosBase" params="posCode">
                const result = 
                    posCode === "nw" ? {x: props.w*0.02, y: props.h*0.02, align: "left",   valign: "top"} :
                    posCode === "n"  ? {x: props.w/2,    y: props.h*0.02, align: "middle", valign: "top"} :
                    posCode === "ne" ? {x: props.w*0.98, y: props.h*0.02, align: "right",  valign: "top"} :
                    posCode === "e"  ? {x: props.w*0.98, y: props.h/2,    align: "right",  valign: "middle"} :
                    posCode === "se" ? {x: props.w*0.98, y: props.h*0.98, align: "right",  valign: "bottom"} :
                    posCode === "s"  ? {x: props.w/2,    y: props.h*0.98, align: "middle", valign: "bottom"} :
                    posCode === "sw" ? {x: props.w*0.02, y: props.h*0.98, align: "left",   valign: "bottom"} :
                    posCode === "w"  ? {x: props.w*0.02, y: props.h/2,    align: "left",   valign: "middle"} :
                  /*posCode === "s" ?*/{x: props.w/2,    y: props.h/2,    align: "middle", valign: "middle"};
                return result;
            </function>
            <function name="addTextAttrs" params="pos">
                switch (pos.align) {
                    case "left": pos["text-anchor"] = "start"; break;
                    case "right": pos["text-anchor"] = "end"; break;
                    case "middle": pos["text-anchor"] = "middle"; break;
                }//switch

                switch (pos.valign) {
                    case "top": pos["dominant-baseline"] = "text-before-edge"; break;
                    case "middle": pos["dominant-baseline"] = "central"; break;
                    case "bottom": pos["dominant-baseline"] = "text-after-edge"; break;
                }//switch

                return pos;
            </function>
            <function name="labelPos" params="posCode">
                return fn$.addTextAttrs(fn$.labelPosBase(posCode));
            </function>
        </functions>
        <computed-props>
            <computed-prop name="title">$streetAddress({street: props.street, buildingNumber: props.buildingNumber})</computed-prop>
        </computed-props>
        <style>
            .building { stroke: #bf6731; fill: #f4a615; stroke-width: "2px"; }
            .building.wood { fill: #fad46b }
            .building.number { fill: #393432; stroke: none; }
            .building.number.c, .building.number.c1, .building.number.c2, .building.number.m 
                { text-anchor: middle; dominant-baseline: central; }
            .building.number.nw { text-anchor: start;  dominant-baseline: text-before-edge; }
            .building.number.n, .building.number.n1, .building.number.n2 { text-anchor: middle; dominant-baseline: text-before-edge; }
            .building.number.ne, .building.number.ne1, .building.number.ne2 { text-anchor: end; dominant-baseline: text-before-edge; }
            .building.number.e, .building.number.e1, .building.number.e2 { text-anchor: end;    dominant-baseline: central; }
            .building.number.se { text-anchor: end;    dominant-baseline: text-after-edge; }
            .building.number.s  { text-anchor: middle; dominant-baseline: text-after-edge; }
            .building.number.sw { text-anchor: start;  dominant-baseline: text-after-edge; }
            .building.number.w  { text-anchor: start;  dominant-baseline: central; }
        </style>
    </component-class>

    <!-- Building elements -->
    <component-class name="Entrance" category=".Buildings">
        <template>
            <template v-if="align === 'bottom'">
                <rect v-for="i in nStairs" v-bind:x="-w/2" v-bind:y="-lStair * i" v-bind:width="w" v-bind:height="lStair" class="entrance"
                    v-bind:opacity="i/nStairs" />
                <text class="number" v-bind:font-size="fontSize">{{number}}</text>
            </template>
            <template v-else-if="align === 'top'">
                <rect v-for="i in nStairs" v-bind:x="-w/2" v-bind:y="lStair * (i - 1)" v-bind:width="w" v-bind:height="lStair" class="entrance"
                    v-bind:opacity="i/nStairs" />
                <text class="number" v-bind:y="nStairs * lStair" v-bind:font-size="fontSize">{{number}}</text>
            </template>
            <template v-else-if="align === 'right'">
                <rect v-for="i in nStairs" v-bind:y="-w/2" v-bind:x="-lStair * i" v-bind:width="lStair" v-bind:height="w" class="entrance"
                    v-bind:opacity="i/nStairs" />
                <text class="number horz" v-bind:x="-lStair*nStairs/2" v-bind:y="0" v-bind:font-size="fontSize">{{number}}</text>
            </template>
            <template v-else-if="align === 'left'">
                <rect v-for="i in nStairs" v-bind:y="-w/2" v-bind:x="lStair * (i - 1)" v-bind:width="lStair" v-bind:height="w" class="entrance"
                    v-bind:opacity="i/nStairs" />
                <text class="number horz" v-bind:x="lStair*nStairs/2" v-bind:y="0" v-bind:font-size="fontSize">{{number}}</text>
            </template>
        </template>
        <props>
            <prop name="h" type="Number" />
            <prop name="w" type="Number" required="true" />
            <prop name="number" type="[String, Number]" />
            <prop name="align" type="String" choices="top, bottom, left, right" default="bottom"/>
        </props>
        <computed-props>
            <computed-prop name="nStairs">4</computed-prop>
            <computed-prop name="lStair">props.h ?? props.w/3</computed-prop>
            <computed-prop name="fontSize">cp$.lStair * cp$.nStairs * 0.75</computed-prop>
        </computed-props>
        <style>
            .entrance { fill: #bf6731; stroke: none; }
            .number { fill: white; text-anchor: middle; dominant-baseline: ideographic; }
            .number.horz { dominant-baseline: central; }
        </style>
    </component-class>

    <component-class name="NFloorsLabel" category=".Buildings">
        <template>
            <g class="n-floors-label">
                <polyline v-if="roofShape === 'pitched'" 
                    v-bind:points="`${x1},${y1+h*0.1} ${(x1 + x2)/2},${y1-h*0.1} ${x2},${y1+h*0.1}`"/>
                <line v-else="" v-bind:x1="x1" v-bind:y1="y1" v-bind:x2="x2" v-bind:y2="y1"/>
                <line v-bind:x1="x1" v-bind:y1="y2" v-bind:x2="x2" v-bind:y2="y2"/>
                <text v-bind:x="(x1 + x2)/2" v-bind:y="(y1*0.9 + y2*1.1)/2" v-bind:font-size="h*0.75">{{nFloors}}</text>
            </g>
        </template>
        <props>
            <prop name="n-floors" type="Number" required="true"/>
            <prop name="roofShape" type="String" />
            <prop name="w" type="Number" />
            <prop name="h" type="Number" required="true" />
            <prop name="align" type="String" choices="left, middle, right" default="left" />
            <prop name="valign" type="String" choices="top, middle, bottom" default="bottom" />
        </props>
        <computed-props>
            <computed-prop name="w">props.w ?? props.h/1.5</computed-prop>
            <computed-prop name="x1">props.align === 'middle' ? -cp$.w/2 : 0</computed-prop>
            <computed-prop name="x2">props.align === 'right' ? -cp$.w : props.align === 'left' ? cp$.w : cp$.w/2</computed-prop>
            <computed-prop name="y1">props.valign === 'top' ? 0 : props.valign === 'middle' ? -props.h*0.4 : -props.h*0.8</computed-prop>
            <computed-prop name="y2">props.valign === 'top' ? props.h*0.8 : props.valign === 'middle' ? props.h*0.4 : 0</computed-prop>
        </computed-props>
        <style>
            .n-floors-label { fill: white }
            .n-floors-label text { text-anchor: middle; dominant-baseline: central; }
            .n-floors-label line, .n-floors-label polyline { stroke-width: 1px; stroke: white; fill: none; }
        </style>
    </component-class>
    
    <!-- Various building shapes (inspired by Pentamino) -->
    
    <!-- I-shaped building:  
        +======w=====+
        |++++++++++++h
        +============+
     -->
    <component-class name="I-Building" category="Buildings" version="2024070800">
        <extends base="Building"/>
        <template>
            <title>{{title}}</title>
            <rect x="0" y="0" v-bind:width="w" v-bind:height="h" class="building" v-bind:class="material" />
            <template v-for="i in nEntrances">
                <Kre:Entrance v-bind="entrancePos(i)" v-bind:w="entrW" v-bind:number="i"/>
                <connection-point v-bind:name="i" v-bind:x="entrancePos(i).x" v-bind:y="h/2"/>
            </template>
            <Kre:NFloorsLabel v-if="nFloors" v-bind="labelPos(nFloorsPosition)" v-bind:h="h/3" 
                v-bind:n-floors="nFloors" v-bind:roof-shape="roofShape"/>
            <text v-bind="labelPos(buildingNumberPosition)" class="building number" v-bind:font-size="numberFontSize">
                {{buildingNumber}}
            </text>
            <adjustment-ruler target-prop="h" v-bind:x1="0" v-bind:y1="0" v-bind:x2="0" v-bind:y2="h" fixed-end="1"/>
            <adjustment-ruler target-prop="w" v-bind:x1="0" v-bind:y1="0" v-bind:x2="w" v-bind:y2="0" fixed-end="1"/>
        </template>
        <props>
            <prop name="w" type="Number" default="200"/>
            <prop name="nEntrances" type="Number" default="4" category="Construction" description="The number of entrances" />
            <prop name="entrancesLayout" type="String" choices="bottom-cw, bottom-ccw, top-cw, top-ccw" default="bottom-ccw" />
            <prop name="buildingNumberPosition" type="String" choices="c, nw, n, ne, e, se, s, sw, w" default="c"/>
            <prop name="nFloorsPosition" type="String" choices="c, nw, n, ne, e, se, s, sw, w" default="w"/>
        </props>
        <computed-props>
            <computed-prop name="entrStep">props.w / props.nEntrances</computed-prop>
            <computed-prop name="entrW">cp$.entrStep/4</computed-prop>
            <computed-prop name="numberFontSize">props.h/3</computed-prop>
        </computed-props>
        <functions>
            <function name="entrancePos" params="i">
                switch (props.entrancesLayout) {
                    case "bottom-ccw": return {x: cp$.entrStep * (i - 0.5), y: props.h, align: "bottom"};
                    case "bottom-cw": return {x: cp$.entrStep * (props.nEntrances - i + 0.5), y: props.h, align: "bottom"};
                    case "top-ccw": return {x: cp$.entrStep * (props.nEntrances - i + 0.5), y: 0, align: "top"};
                    case "top-cw": return {x: cp$.entrStep * (i - 0.5), y: 0, align: "top"};
                }//switch
                return undefined;
            </function>
        </functions>
    </component-class>
    
    <!-- L-shaped building:  
        +=====w=====+
        |+++++++++++h2
        |+++++======+
        h++++|
        |++++|
        |++++|
        +=w1=+
     -->
     <component-class name="L-Building" category="Buildings" version="2024070800">
        <extends base="Building"/>
        <template>
            <title>{{title}}</title>
            <polygon v-bind:points="`0,0 0,${h} ${w1},${h} ${w1},${h2} ${w},${h2} ${w},0`" class="building" v-bind:class="material" />
            <template  v-for="i in nEntrances">
                <Kre:Entrance v-bind="entrancePos(i)" v-bind:w="entrW" v-bind:number="i"/>
                <connection-point 
                    v-if="(entrancesLayout==='outside-cw' || entrancesLayout==='inside-ccw') &amp;&amp; (i &lt;= nEntrances1) ||
                          (entrancesLayout==='outside-ccw' || entrancesLayout==='inside-cw') &amp;&amp; (i &gt; nEntrances2)"
                    v-bind:x="w1/2" v-bind:y="entrancePos(i).y" v-bind:name="i"/>
                <connection-point v-else="" v-bind:x="entrancePos(i).x" v-bind:y="h2/2" v-bind:name="i"/>
            </template>
            <Kre:NFloorsLabel v-if="nFloors" v-bind="labelPos(nFloorsPosition)" v-bind:h="h2/3" 
                v-bind:n-floors="nFloors" v-bind:roof-shape="roofShape"/>
            <text v-bind="labelPos(buildingNumberPosition)" class="building number" v-bind:font-size="numberFontSize">
                {{buildingNumber}}
            </text>
            <adjustment-ruler target-prop="h" v-bind:x1="0" v-bind:y1="0" v-bind:x2="0" v-bind:y2="h" fixed-end="1"/>
            <adjustment-ruler target-prop="w" v-bind:x1="0" v-bind:y1="0" v-bind:x2="w" v-bind:y2="0" fixed-end="1"/>
            <adjustment-ruler target-prop="h2" v-bind:x1="w" v-bind:y1="0" v-bind:x2="w" v-bind:y2="h2" fixed-end="1"/>
            <adjustment-ruler target-prop="w1" v-bind:x1="0" v-bind:y1="h" v-bind:x2="w1" v-bind:y2="h" fixed-end="1"/>
        </template>
        <props>
            <prop name="h" type="Number" default="200"/>
            <prop name="w" type="Number" default="200"/>
            <prop name="h2" type="Number" default="50" category="Geometry" description="Visual height of the horizontal part"/>
            <prop name="w1" type="Number" default="50" category="Geometry" description="Visual width of the vertical part"/>
            <prop name="nEntrances1" type="Number" category="Construction" description="The number of entrances in the vertical part" default="2"/>
            <prop name="nEntrances2" type="Number" category="Construction" description="The number of entrances in the horizontal part" default="2"/>
            <prop name="entrancesLayout" type="String" choices="inside-cw, inside-ccw, outside-cw, outside-ccw" default="inside-ccw" />
            <prop name="buildingNumberPosition" type="String" choices="m, c1, c2, nw, n, ne, e1, e2, se1, se2, s1, s2, sw, w" default="m"/>
            <prop name="nFloorsPosition" type="String" choices="m, c1, c2, nw, n, ne, e1, e2, se1, se2, s1, s2, sw, w" default="w"/>
        </props>
        <functions>
            <function name="entrancePos" params="i">
                switch (props.entrancesLayout) {
                    case "inside-ccw": if (i &lt;= props.nEntrances1)
                            return {x: props.w1, y: props.h - cp$.entrStep1 * (i-0.5), align: "right"};
                        else 
                            return {x: props.w1 + cp$.entrStep2 * (i-props.nEntrances1-0.5), y: props.h2, align: "bottom"};
                    case "inside-cw": if (i &lt;= props.nEntrances2)
                            return {x: props.w - cp$.entrStep2 * (i-0.5), y: props.h2, align: "bottom"};
                        else 
                            return {x: props.w1, y: props.h2 + cp$.entrStep1 * (i-props.nEntrances2-0.5), align: "right"};
                    case "outside-ccw": if (i &lt;= props.nEntrances2)
                            return {x: props.w - cp$.entrStep2 * (i-0.5), y: 0, align: "top"};
                        else 
                            return {x: 0, y: cp$.entrStep1 * (i-props.nEntrances2-0.5), align: "left"};
                    case "outside-cw": if (i &lt;= props.nEntrances1)
                            return {x: 0, y: props.h - cp$.entrStep1 * (i-0.5), align: "left"};
                        else 
                            return {x: cp$.entrStep2 * (i-props.nEntrances1-0.5), y: 0, align: "top"};
                }//switch
                return undefined;
            </function>
            <function name="labelPosBase" params="posCode">
                const result = 
                    posCode === "sw"  ? {x: props.w*0.02,  y: props.h - props.h2*0.02, align: "left",   valign: "bottom"} :
                    posCode === "s1"  ? {x: props.w1/2,    y: props.h - props.h2*0.02, align: "middle", valign: "bottom"} :
                    posCode === "s2"  ? {x: props.w/2,     y: props.h2*0.98,           align: "middle", valign: "bottom"} :
                    posCode === "se1" ? {x: props.w1*0.98, y: props.h - props.h2*0.02, align: "right",  valign: "bottom"} :
                    posCode === "se2" ? {x: props.w*0.98,  y: props.h2*0.98,           align: "right",  valign: "bottom"} :
                    posCode === "e1"  ? {x: props.w1*0.98, y: props.h/2 + props.h2/2,  align: "right",  valign: "middle"} :
                    posCode === "e2"  ? {x: props.w*0.98,  y: props.h2/2,              align: "right",  valign: "middle"} :
                    posCode === "ne"  ? {x: props.w*0.98,  y: props.h2*0.02,           align: "right",  valign: "top"} :
                    posCode === "n"   ? {x: props.w/2,     y: props.h2*0.02,           align: "middle", valign: "top"} :
                    posCode === "nw"  ? {x: props.w*0.02,  y: props.h2*0.02,           align: "left",   valign: "top"} :
                   /* posCode === "w"   ? {x: props.w*0.02,  y: props.h/2,               align: "left",   valign: "middle"} : */
                    posCode === "c1"  ? {x: props.w1/2,    y: props.h/2,               align: "middle", valign: "middle"} :
                    posCode === "c2"  ? {x: props.w/2,     y: props.h2/2,              align: "middle", valign: "middle"} :
                    posCode === "m"   ? {x: props.w1/2,    y: props.h2/2,              align: "middle", valign: "middle"} :
                        super$.labelPosBase(posCode);

                return result;
            </function>
        </functions>
        <computed-props>
            <computed-prop name="nEntrances">props.nEntrances1 + props.nEntrances2</computed-prop>
            <computed-prop name="entrStep1">
                props.entrancesLayout.startsWith('outside') ? props.h/props.nEntrances1 : (props.h-props.h2)/props.nEntrances1
            </computed-prop>
            <computed-prop name="entrStep2">
                props.entrancesLayout.startsWith('outside') ? props.w/props.nEntrances2 : (props.w-props.w1)/props.nEntrances2
            </computed-prop>
            <computed-prop name="entrW">Math.min(cp$.entrStep1, cp$.entrStep2)/4</computed-prop>
            <computed-prop name="numberFontSize">props.h2/3</computed-prop>
        </computed-props>
    </component-class>

</kresmer-library>