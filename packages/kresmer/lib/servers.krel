<?xml version="1.0" encoding="utf-8"?>
<?xml-model href="xsd/kresmer-library.xsd"?>
<!-- **************************************************************************>
 *                            ðŸ‘‘ KresMer ðŸ‘‘
 *       "Kreslennya Merezh" - network diagram editor and viewer
 *      Copyright (C) 2022-2024 Dmitriy Stepanenko. All Rights Reserved.
 * ___________________________________________________________________________
 *                           Servers library
 *         This library contains graphics for network servers.
<*************************************************************************** -->
<kresmer-library name="servers" xmlns:Kre="Kre" xmlns:v-bind="v-bind" xmlns:v-on="v-on" xmlns:v-slot="v-slot">
    <import library="stdlib" />

    <!-- General server -->
    <component-class name="ServerBody" category=".server-parts">
        <extends base="RackMountDevice" v-bind:top-facet-size="0.8" 
            v-bind:show-device-name="false" v-bind:show-ip-address="false">
            <template v-slot:frontFacet="{}">
                <slot name="frontFacet" />
            </template>
            <template v-slot:topFacetC="{}">
                <ellipse cx="0.5" cy="0.48" rx="0.35" ry="0.45" class="facet"
                    style="fill: none; stroke-width: 0.015" />
                <slot name="topFacetC" />
            </template>
            <template v-slot:topFacetLR="{}">
                <circle cx="0.5" cy="0.5" r="0.45" class="facet"
                    style="fill: none; stroke-width: 0.015" />
                <slot name="topFacetLR" />
            </template>
        </extends>
    </component-class>

    <component-class name="Server" category="Servers" version="2024070300">
        <extends base="ServerBody"/>
        <template>
            <defs>
                <pattern v-bind:id="`kre:std:server-front-grid-${componentId}`" patternUnits="userSpaceOnUse" 
                        v-bind:width="unitHeight*0.08" v-bind:height="unitHeight*0.08" viewBox="0 0 10 10" 
                        >
                    <rect x="2" y="2" width="6" height="6" fill="#1f1f1f" />
                </pattern>
            </defs>
            <rect v-bind:x="unitHeight*0.08" v-bind:y="unitHeight*0.08"
                v-bind:height="unitHeight*0.84" v-bind:width="width-unitHeight*0.16"
                v-bind:fill="`url(#kre:std:server-front-grid-${componentId})`" />
            <rect v-bind:x="unitHeight*0.08"
                v-bind:y="unitHeight*0.08"
                v-bind:height="unitHeight*0.45" v-bind:width="unitHeight*0.15*Math.max(name.length, 8)"
                class="facet" />
            <text v-bind:x="unitHeight*0.18" v-bind:y="unitHeight*0.25"
                v-bind:font-size="unitHeight*0.2"
                class="device-name">{{name}}<title v-if="comment">{{comment}}</title></text>
            <template v-if="ipAddress">
                <a v-if="managementProtocol" v-bind:href="managementProtocol + ipAddress"
                    v-bind:target="managementRefTarget">
                    <text v-bind:x="unitHeight*0.18" v-bind:y="unitHeight*0.42" v-bind:font-size="unitHeight*0.15"
                        class="ip-address">{{ipAddress}}</text>
                </a>
                <text v-else=""
                    v-bind:x="unitHeight*0.18" v-bind:y="unitHeight*0.42" v-bind:font-size="unitHeight*0.15"
                    class="ip-address">{{ipAddress}}</text>
            </template>
            <rect
                v-bind:x="width - unitHeight" v-bind:y="unitHeight*0.08"
                v-bind:height="unitHeight*0.25" v-bind:width="unitHeight"
                class="facet" />
            <rect
                v-bind:x="width - unitHeight*0.95" v-bind:y="unitHeight*0.085"
                v-bind:height="unitHeight*0.2" v-bind:width="unitHeight*0.86"
                class="facet top" />
            <circle v-bind:cx="width - unitHeight*0.83" v-bind:cy="unitHeight*0.18"
                v-bind:r="unitHeight*0.05" v-bind:stroke-width="unitHeight*0.03" class="green led" />
            <circle
                v-bind:cx="width - unitHeight*0.63" v-bind:cy="unitHeight*0.18" v-bind:r="unitHeight*0.05"
                v-bind:stroke-width="unitHeight*0.03" class="dark-green led" />
            <circle
                v-bind:cx="width - unitHeight*0.43" v-bind:cy="unitHeight*0.18" v-bind:r="unitHeight*0.05"
                v-bind:stroke-width="unitHeight*0.03" class="green led" />
            <circle v-bind:cx="width - unitHeight*0.23"
                v-bind:cy="unitHeight*0.18" v-bind:r="unitHeight*0.05" v-bind:stroke-width="unitHeight*0.03"
                class="red led" />
            <rect v-bind:x="(width - uplinkPortPanelWidth)/2" v-bind:y="unitHeight*0.08"
                v-bind:height="unitHeight*0.45" v-bind:width="uplinkPortPanelWidth" class="facet" />
            <rect v-bind:x="(width - downlinkPortPanelWidth)/2" v-bind:y="unitHeight*0.45"
                v-bind:height="unitHeight*0.5" v-bind:width="downlinkPortPanelWidth" class="facet" />
            <component v-bind:is="interface.media == 'copper' ? 'Kre:RJ45-Port' : `Kre:SFP-Port`" 
                v-for="([name, interface], i) in uplinks" 
                v-bind:x="firstUplinkX + unitHeight*i*0.4" v-bind:y="unitHeight*0.15"
                v-bind:d="unitHeight/3"
                v-bind:name="name" v-bind:prefix="name.replace(/\d+$/, '')" v-bind:font-size="0.7"
                v-bind:port-info="interface" />
            <component v-bind:is="interface.media == 'copper' ? 'Kre:RJ45-Port' : `Kre:SFP-Port`" 
                v-for="([name, interface], i) in downlinks" 
                v-bind:x="firstDownlinkX + unitHeight*i*0.4" v-bind:y="unitHeight*0.53"
                v-bind:d="unitHeight/3"
                v-bind:name="name" v-bind:prefix="name.replace(/\d+$/, '')" v-bind:font-size="0.7"
                key-position="bottom"
                v-bind:port-info="interface" />
        </template>
        <style>
            .device-name { fill: #ffffff; text-shadow: 3px 3px 3px black; }
            .ip-address { fill: #faffd6; text-shadow: 1px 1px 1px black;}
            .model-name { fill: #ffffff; font-family: sans-serif; }
            .facet {--facet-color: #545454;}
            .sync-port {fill: #8f6b00; stroke: #ffce1f; stroke-width: 2px;}
            .led.green {stroke: #009900; fill: #1fd11f}
            .led.dark-green {stroke: #007a00; fill: #16b616}
            .led.red {stroke: #ad0101; fill: #d50101}
        </style>
        <props except="top-facet-size, top-facet-skew">
            <prop name="width" type="Number" default="none" />
            <prop name="perspective" type="String" choices="left,right,center,none" default="none" category="Presentation" 
                  description="Visual perspective of the device image"/>
            <prop name="interfaces" type="Object" category="Network" default="{}">
                <elements type="Object" type-ref="Ports.port-info"/>
            </prop>
        </props>
        <computed-props>
            <computed-prop name="width">props.width || props.unitHeight * 9.1</computed-prop>
            <computed-prop name="uplinks">Object.entries(props.interfaces).filter(([_, int]) => int.direction === "uplink")</computed-prop>
            <computed-prop name="nUplinks">computedProps.uplinks.length</computed-prop>
            <computed-prop name="uplinkPortRowLength">(computedProps.nUplinks*0.4-1/15)*props.unitHeight</computed-prop>
            <computed-prop name="firstUplinkX">(computedProps.width - computedProps.uplinkPortRowLength)/2</computed-prop>
            <computed-prop name="downlinks">Object.entries(props.interfaces).filter(([_, int]) => int.direction === "downlink")</computed-prop>
            <computed-prop name="nDownlinks">computedProps.downlinks.length</computed-prop>
            <computed-prop name="downlinkPortRowLength">(computedProps.nDownlinks*0.4-1/15)*props.unitHeight</computed-prop>
            <computed-prop name="firstDownlinkX">(computedProps.width - computedProps.downlinkPortRowLength)/2</computed-prop>
            <computed-prop name="uplinkPortPanelWidth">computedProps.uplinkPortRowLength + props.unitHeight*0.15</computed-prop>
            <computed-prop name="downlinkPortPanelWidth">computedProps.downlinkPortRowLength + props.unitHeight*0.15</computed-prop>
        </computed-props>
    </component-class>

</kresmer-library>