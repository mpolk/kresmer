<?xml version="1.0" encoding="utf-8"?>
<?xml-model href="xsd/kresmer-library.xsd"?>
<!-- **************************************************************************>
 *                            ðŸ‘‘ KresMer ðŸ‘‘
 *       "Kreslennya Merezh" - network diagram editor and viewer
 *      Copyright (C) 2022-2023 Dmitriy Stepanenko. All Rights Reserved.
 * ___________________________________________________________________________
 *                        The standard library
 * This library contains general graphics and network elements, like ports
 * switches and routers. More specific network units (servers, 
 * vendor-specific equipment etc.) contain other libraries.
<*************************************************************************** -->

<!-- Define some little things to make the life less hard -->
<!DOCTYPE inline_dtd[<!ENTITY nbsp "&#160;">]>

<kresmer-library name="stdlib" xmlns:Kre="Kre" xmlns:v-bind="v-bind" xmlns:v-on="v-on" xmlns:v-slot="v-slot">

                    <!-- General graphical elements -->
    <!-- Crossing arrows traditionally used to be drawn on the top of routers and switches 
                                    /\
                                   /  \
                                  /_  _\
                                 /|_||_|\
                                /        \
                                \  _  _  /
                                 \|_||_|/
                                  \    /
                                   \  /
                                    \/
    -->
    <defs>
        {{$global("crossArrows", [ 
            [0.1,0.5], [0.2,0.7], [0.2,0.6], [0.4,0.6], [0.4,0.8],
            [0.3,0.8], [0.5,0.9], [0.7,0.8], [0.6,0.8], [0.6,0.6], [0.8,0.6], [0.8,0.7], [0.9,0.5],
            [0.8,0.3], [0.8,0.4], [0.6,0.4], [0.6,0.2], [0.7,0.2], [0.5,0.1], [0.3,0.2], [0.4,0.2],
            [0.4,0.4], [0.2,0.4], [0.2,0.3] 
        ])}}
    </defs>

    <!-- Switch or router port -->
    <component-class name="SingleOrTwoFiberPort" category=".port-abstractions">
        <template/>
        <computed-props>
            <computed-prop name="nFibers">props.fiberInfo?.nFibers ?? props.portInfo?.nFibers ?? 1</computed-prop>
        </computed-props>
    </component-class>

    <component-class name="Port" category=".ports">
        <template>
            <rect v-bind:width="w" v-bind:height="h" class="port-icon body" />
            <slot />
            <rect v-if="portInfo?.operStatus" v-bind:width="h*0.25" v-bind:height="h*0.25" class="status-indicator" />
            <text v-bind:x="w/2"
                v-bind:y="labelY" text-anchor="middle" v-bind:font-size="fontSize*h"
                class="port-name" v-bind:class="{disabled: !(portInfo?.adminStatus ?? true)}">{{label}}</text>
            <title>{{title}}</title>
            <connection-point v-if="nFibers == 1"
                v-for="({x, y}, dir) in {up: {x: w/2, y: 0}, right: {x: w, y: h/2}, down: {x: w/2, y: h}, left: {x: 0, y: h/2}}" 
                v-bind="{name: `${name}@${dir[0]}`, d: h*0.7, x, y, dir}" />
            <connection-point v-else=""
                v-for="({x, y}, dir) in {
                    up1: {x: w*0.4, y: 0}, up2: {x: w*0.6, y: 0}, 
                    right1: {x: w, y: h*0.4}, right2: {x: w, y: h*0.6}, 
                    down1: {x: w*0.4, y: h}, down2: {x: w*0.6, y: h}, 
                    left1: {x: 0, y: h*0.4}, left2: {x: 0, y: h*0.6}
                }" 
                v-bind="{name: `${name}@${dir[0]}${dir[dir.length-1]}`, d: h*0.7, x, y, dir}" />
        </template>
        <style>
            .port-name {font-family: sans-serif; fill: white;}
            .port-name.disabled {fill: lightgray; opacity: 0.75;}
            .port-icon.body {stroke: white;}
            .status-indicator {fill: #b7f598; stroke: green; stroke-width: 1px}
            .connection-point-marker {fill: yellow;}
        </style>
        <props>
            <prop name="w" type="Number" required="true" default="25" category="Geometry" description="Port icon width"/>
            <prop name="h" type="Number" required="true" default="25" category="Geometry" description="Port icon height"/>
            <prop name="labelY" type="Number" category="Geometry" description="Port label vertical poisition"/>
            <prop name="prefix" type="String" default="" description="Port name prefix that may be stripped when displaying in the limited area"/>
            <prop name="font-size" type="Number" default="0.8" category="Presentation"/>
            <prop name="port-info" type="object" description="Various port configuration and state parameters"/>
            <prop name="fiber-info" type="object" description="Various fiber optical parameters"/>
            <prop name="combo" type="String" choices="copper,fiber" category="Hardware" description="Indicates that the port is a (specified) part of the combo-port"/>
        </props>
        <computed-props extend="SingleOrTwoFiberPort">
            <computed-prop name="label0">props.combo ? String(props.name ?? "").replace(new RegExp(`\\(${props.combo[0]}\\)$`), '') : String(props.name ?? "")</computed-prop>
            <computed-prop name="label">computedProps.label0.replace(new RegExp('^'+props.prefix), '')</computed-prop>
            <computed-prop name="labelY">props.labelY ?? props.h * 0.8</computed-prop>
            <computed-prop name="title">
                props.name + 
                    (props.portInfo?.description ? ` ${props.portInfo.description}` : '') +
                    (props.portInfo?.speed ? ` (${props.portInfo.speed})` : '')
            </computed-prop>
        </computed-props>
    </component-class>

    <!-- A ferrule inside the optical plugin-module (currently not used) -->
    <component-class name="Ferrule" category=".ports">
        <template>
            <circle class="ferrule" v-bind:cx="cx" v-bind:cy="cy" v-bind:r="d/2" />
        </template>
        <props>
            <prop name="cx" type="Number" required="true" default="0" category="Geometry"/>
            <prop name="cy" type="Number" required="true" default="0" category="Geometry"/>
            <prop name="d" type="Number" required="true" default="25" category="Geometry"/>
        </props>
        <style>
            .ferrule {fill: #000000; stroke: #707070; stroke-width: 1px;}
        </style>
    </component-class>

    <!-- A port plugin-module: SFP, XFP etc. -->

    <component-class name="KeyedConnector">
        <template/>
        <props>
            <prop name="key-position" type="String" choices="top,bottom,left,right" default="top" category="Geometry" description="Key groove position"/>
        </props>
    </component-class>

    <component-class name="RectangularConnector" category=".ports">
        <template>
            <polyline v-if="nFibers === 1" v-bind:points="
                keyPosition === 'top' ?
                    `${cx+h*0.2},${cy-h*q} ${cx+w*q},${cy-h*q} ${cx+w*q},${cy+h*q}
                     ${cx-w*q},${cy+h*q}    ${cx-w*q},${cy-h*q} ${cx-h*0.2},${cy-h*q}`
                : keyPosition === 'bottom' ?
                    `${cx+h*0.2},${cy+h*q} ${cx+w*q},${cy+h*q} ${cx+w*q},${cy-h*q}
                     ${cx-w*q},${cy-h*q}    ${cx-w*q},${cy+h*q} ${cx-h*0.2},${cy+h*q}`
                : keyPosition === 'left' ?
                    `${cy-h*q},${cx+h*0.2} ${cy-h*q},${cx+w*q} ${cy+h*q},${cx+w*q}
                     ${cy+h*q},${cx-w*q}    ${cy-h*q},${cx-w*q} ${cy-h*q},${cx-h*0.2}`
                :
                    `${-cy+h*q+w},${cx+h*0.2} ${-cy+h*q+w},${cx+w*q}  ${-cy-h*q+w},${cx+w*q}
                     ${-cy-h*q+w},${cx-w*q}    ${-cy+h*q+w},${cx-w*q}  ${-cy+h*q+w},${cx-h*0.2}`
                "
                class="border" v-bind:stroke-width="strokeWidth"/>
            <template v-else="">
                <polyline v-bind:points="
                    keyPosition === 'top' ?
                        `${cx+h*0.25},${cy-h*q} ${cx+w*q},${cy-h*q} ${cx+w*q},${cy+h*q}
                         ${cx-w*q},${cy+h*q}    ${cx-w*q},${cy-h*q} ${cx-h*0.25},${cy-h*q}`
                    : keyPosition === 'bottom' ?
                        `${cx+h*0.25},${cy+h*q} ${cx+w*q},${cy+h*q} ${cx+w*q},${cy-h*q}
                         ${cx-w*q},${cy-h*q}    ${cx-w*q},${cy+h*q} ${cx-h*0.25},${cy+h*q}`
                    : keyPosition === 'left' ?
                        `${cy-h*q},${cx+h*0.25} ${cy-h*q},${cx+w*q} ${cy+h*q},${cx+w*q}
                         ${cy+h*q},${cx-w*q}    ${cy-h*q},${cx-w*q} ${cy-h*q},${cx-h*0.25}`
                    :
                        `${-cy+h*q+w},${cx+h*0.25} ${-cy+h*q+w},${cx+w*q}  ${-cy-h*q+w},${cx+w*q}
                         ${-cy-h*q+w},${cx-w*q}    ${-cy+h*q+w},${cx-w*q}  ${-cy+h*q+w},${cx-h*0.25}`
                    "
                    class="border" v-bind:stroke-width="strokeWidth"/>
                <polyline v-bind:points="
                    keyPosition === 'top' ?
                        `${cx+h*0.1},${cy-h*q} ${cx-h*0.1},${cy-h*q}`
                    : keyPosition === 'bottom' ?
                        `${cx+h*0.1},${cy+h*q} ${cx-h*0.1},${cy+h*q}`
                    : keyPosition === 'left' ?
                        `${cy-h*q},${cx+h*0.1} ${cy-h*q},${cx-h*0.1}`
                    :
                        `${-cy+h*q+w},${cx+h*0.1} ${-cy+h*q+w},${cx-h*0.1}`
                    "
                    class="border" v-bind:stroke-width="strokeWidth"/>
            </template>
        </template>
        <props extend="KeyedConnector">
            <prop name="cx" type="Number" required="true" default="0" category="Geometry"/>
            <prop name="cy" type="Number" required="true" default="0" category="Geometry"/>
            <prop name="w" type="Number" required="true" default="25" category="Geometry"/>
            <prop name="h" type="Number" required="true" default="25" category="Geometry"/>
            <prop name="strokeWidth" type="number" category="Geometry"/>
            <prop name="nFibers" type="Number" choices="1,2" default="1" category="Optics" description="The number of optical fibers"/>
        </props>
        <computed-props>
            <computed-prop name="q">0.4</computed-prop>
            <computed-prop name="strokeWidth">props.strokeWidth ?? Math.min(props.w, props.h)*0.12</computed-prop>
        </computed-props>
    </component-class>

    <component-class name="PluginModule" category=".ports">
        <template>
            <Kre:RectangularConnector v-bind:cx="cx"  v-bind:cy="cy"  v-bind:w="w" v-bind:h="h" v-bind:key-position="keyPosition" v-bind:n-fibers="nFibers"/>
        </template>
        <props extend="RectangularConnector"/>
        <style>
            .border {fill: none; stroke: #8998a9;}
        </style>
    </component-class>

    <!-- An RJ45 connector (for placing inside the port) -->
    <component-class name="RJ45" category=".ports">
        <defs>
            <pattern id="kre:std:rj45-contacts-v" patternUnits="objectBoundingBox" width="0.125" height="1" viewBox="0 0 10 10" 
                preserveAspectRatio="none">
                <rect x="2" y="0" width="6" height="10" fill="#b28e01" />
            </pattern>
            <pattern id="kre:std:rj45-contacts-h" patternUnits="objectBoundingBox" width="1" height="0.125" viewBox="0 0 10 10" 
                preserveAspectRatio="none">
                <rect x="0" y="2" width="10" height="6" fill="#b28e01" />
            </pattern>
        </defs>
        <template>
            <Kre:RectangularConnector v-bind:cx="cx"  v-bind:cy="cy"  v-bind:w="w"  v-bind:h="h"  v-bind:key-position="keyPosition" 
                v-bind:stroke-width="Math.min(w, h)*0.16" />
            <rect v-bind:x="keyPosition === 'left' ? w*0.5 : w*0.2" 
                  v-bind:y="keyPosition === 'top' ? h*0.5 : h*0.2" 
                  v-bind:width="orientation === 'v' ? w*0.6 : h*0.3" 
                  v-bind:height="orientation === 'v' ? h*0.3 : w*0.6" 
                  v-bind:fill="`url(#kre:std:rj45-contacts-${orientation})`"/>
        </template>
        <props extend="RectangularConnector"/>
        <computed-props>
            <computed-prop name="orientation">props.keyPosition === "top" || props.keyPosition === "bottom" ? "v" : "h"</computed-prop>
        </computed-props>
        <style>
            .border {fill: none; stroke: #597865;}
        </style>
    </component-class>

    <!-- RJ45 Port -->
    <component-class name="RJ45-Port" category=".ports">
        <template>
            <Kre:Port v-bind:w="d" v-bind:h="d" v-bind:labelY="labelY" v-bind:name="name" v-bind:prefix="prefix" v-bind:font-size="fontSize" 
                    v-bind:port-info="portInfo" v-bind:combo="combo">
                <Kre:RJ45 v-bind:cx="d/2" v-bind:cy="d/2" v-bind:w="d" v-bind:h="d" v-bind:key-position="keyPosition"/>
            </Kre:Port>
        </template>
        <props extend="Port, KeyedConnector" except="w,h">
            <prop name="d" type="Number" required="true" default="25" category="Geometry" description="Port icon width and height"/>
        </props>
        <computed-props>
            <computed-prop name="labelY">props.keyPosition == 'top' ? props.d * 0.7 :  props.d * 0.8</computed-prop>
        </computed-props>
    </component-class>

    <!-- SFP Port -->
    <component-class name="SFP-Port" category=".ports">
        <template>
            <Kre:Port v-bind:w="d" v-bind:h="d" v-bind:labelY="labelY" v-bind:name="name" v-bind:prefix="prefix" v-bind:font-size="fontSize" 
                    v-bind:port-info="portInfo" v-bind:fiber-info="fiberInfo" v-bind:combo="combo">
                <Kre:PluginModule v-bind:cx="d/2" v-bind:cy="d/2" v-bind:w="d" v-bind:h="d" v-bind:key-position="keyPosition" v-bind:n-fibers="nFibers"/>
            </Kre:Port>
        </template>
        <props extend="Port, KeyedConnector" except="w,h">
            <prop name="d" type="Number" required="true" default="25" category="Geometry" description="Port icon width and height"/>
        </props>
        <computed-props extend="SingleOrTwoFiberPort">
            <computed-prop name="labelY">props.keyPosition == 'top' ? props.d * 0.7 :  props.d * 0.8</computed-prop>
        </computed-props>
    </component-class>

    <!-- XFP Port -->
    <component-class name="XFP-Port" category=".ports">
        <template>
            <Kre:Port v-bind:w="h*2.5" v-bind:h="h" v-bind:name="name" v-bind:prefix="prefix" v-bind:font-size="fontSize"
                    v-bind:port-info="portInfo" v-bind:fiber-info="fiberInfo" v-bind:combo="combo">
                <Kre:PluginModule v-bind:cx="h*1.25" v-bind:cy="h/2" v-bind:w="h*2.75" v-bind:h="h" v-bind:key-position="keyPosition" v-bind:n-fibers="nFibers" />
            </Kre:Port>
        </template>
        <props extend="Port, KeyedConnector" except="w"/>
        <computed-props extend="SingleOrTwoFiberPort"/>
    </component-class>

    <!-- QSFP Port -->
    <component-class name="QSFP-Port" category=".ports">
        <template>
            <Kre:Port v-bind:w="h*2" v-bind:h="h" v-bind:name="name" v-bind:prefix="prefix" v-bind:font-size="fontSize"
                    v-bind:port-info="portInfo" v-bind:fiber-info="fiberInfo">
                <Kre:PluginModule v-bind:cx="h" v-bind:cy="h/2" v-bind:w="h*2.3" v-bind:h="h" v-bind:key-position="keyPosition" v-bind:n-fibers="nFibers" />
            </Kre:Port>
        </template>
        <props extend="Port, KeyedConnector" except="w"/>
        <computed-props extend="SingleOrTwoFiberPort"/>
    </component-class>

    <!-- Optical fiber ports -->
    
    <component-class name="WDM-Port" category=".port-abstractions">
        <template/>
        <computed-props>
            <computed-prop name="beamColor">
                props.fiberInfo?.wavelength === 1470 ? "#949494" :
                props.fiberInfo?.wavelength === 1490 ? "#6B0094" :
                props.fiberInfo?.wavelength === 1510 ? "#0d4be7" :
                props.fiberInfo?.wavelength === 1530 ? "#01df01" :
                props.fiberInfo?.wavelength === 1550 ? "#fffc57" :
                props.fiberInfo?.wavelength === 1570 ? "#FF950E" :
                props.fiberInfo?.wavelength === 1590 ? "#ff0f0f" :
                props.fiberInfo?.wavelength === 1610 ? "#CC6633" :
                    undefined
            </computed-prop>
        </computed-props>
    </component-class>


    <component-class name="FC-Port" category=".ports">
        <template>
            <Kre:Port v-bind:w="d" v-bind:h="d" v-bind:labelY="labelY" v-bind:name="name" v-bind:prefix="prefix" v-bind:font-size="fontSize" 
                    v-bind:port-info="portInfo" v-bind:fiber-info="fiberInfo">
                <polygon class="nut" v-bind:transform="`translate(${r}, ${r})`" v-bind:stroke="beamColor ?? 'white'"
                    v-bind:points="`0,${rNut}  ${rNut*cos60},${rNut/2}  ${rNut*cos60},${-rNut/2}
                                    0,${-rNut} ${-rNut*cos60},${-rNut/2} ${-rNut*cos60},${rNut/2}`" />
                <circle class="cap" v-bind:cx="r" v-bind:cy="r" v-bind:r="r*0.6"/>
                <circle v-if="fiberInfo &amp;&amp; false" v-bind:cx="r" v-bind:cy="r" v-bind:r="r*0.55" fill="none" v-bind:stroke-width="r*0.2" v-bind:stroke="beamColor"/>
            </Kre:Port>
            <template v-if="fiberInfo">
                <text v-bind:x="r" v-bind:y="0" text-anchor="middle" dominant-baseline="middle" v-bind:font-size="fontSize*d*0.75" class="fiber-info">
                    {{fiberInfo.signalDirection}}
                </text>
                <text v-bind:x="r" v-bind:y="d*1.1" text-anchor="middle" dominant-baseline="middle" v-bind:font-size="fontSize*d*0.75" class="fiber-info">
                    {{fiberInfo.wavelength}}
                </text>
            </template>
        </template>
        <props extend="Port" except="w,h">
            <prop name="d" type="Number" required="true" default="25" category="Geometry" description="Port icon width and height"/>
            <prop name="font-size" type="Number" default="0.5" category="Presentation"/>
        </props>
        <computed-props extend="WDM-Port">
            <computed-prop name="labelY">props.d*0.67</computed-prop>
            <computed-prop name="r">props.d*0.5</computed-prop>
            <computed-prop name="rNut">props.d*0.5</computed-prop>
            <computed-prop name="cos60">Math.sqrt(3)/2</computed-prop>
            <computed-prop name="fiberInfoPathID">`kre:port[${props.id},${props.name}]FiberInfoPath`</computed-prop>
        </computed-props>
        <style extends="Port">
            .port-icon.body {fill: transparent; stroke: transparent;}
            .port-name {fill: white; font-weight: bold}
            .nut {fill: silver; }
            .cap {fill: #d00101; stroke: #bd0000; stroke-width: 2px}
            .fiber-info {fill: #3d3d3d;}
        </style>
    </component-class>

    <component-class name="FC-APC-Port" category=".ports">
        <template>
            <Kre:FC-Port v-bind:d="d" v-bind:name="name" v-bind:prefix="prefix" v-bind:font-size="fontSize" 
                v-bind:port-info="portInfo" v-bind:fiber-info="fiberInfo"/>
        </template>
        <props extend="FC-Port"/>
        <style extends="FC-Port">
            .cap {fill: #18b933; stroke: #199a2e;}
        </style>
    </component-class>

    <component-class name="SC-Port" category=".ports">
        <template>
            <Kre:Port v-bind:w="d" v-bind:h="d" v-bind:labelY="labelY" v-bind:name="name" v-bind:prefix="prefix" v-bind:font-size="fontSize" 
                    v-bind:port-info="portInfo" v-bind:fiber-info="fiberInfo">
                <Kre:RectangularConnector v-bind:cx="d/2" v-bind:cy="d/2" v-bind:w="d" v-bind:h="d" v-bind:key-position="keyPosition"/>
                <circle v-if="ferruleVisible" class="ferrule" v-bind:cx="d/2" v-bind:cy="d/2" v-bind:r="d/8" />
            </Kre:Port>
        </template>
        <props extend="Port, KeyedConnector" except="w,h">
            <prop name="d" type="Number" required="true" default="25" category="Geometry" description="Port icon width and height"/>
            <prop name="ferruleVisible" type="Boolean" default="false"/>
        </props>
        <computed-props>
            <computed-prop name="labelY">props.keyPosition == 'top' ? props.d * 0.7 :  props.d * 0.8</computed-prop>
        </computed-props>
        <style>
            .RectangularConnector .border {fill: none; stroke: #057aff;}
            .ferrule {fill: #ababab; stroke: #707070; stroke-width: 1px;}
        </style>
    </component-class>

    <component-class name="SC-APC-Port" category=".ports">
        <template>
            <Kre:SC-Port v-bind:d="d" v-bind:name="name" v-bind:prefix="prefix" v-bind:font-size="fontSize" 
                v-bind:port-info="portInfo" v-bind:fiber-info="fiberInfo" />
        </template>
        <props extend="SC-Port"/>
        <style>
            .RectangularConnector .border {fill: none; stroke: #18b933;}
        </style>
    </component-class>

    <!-- *************************************** General device prototypes ******************************************** -->
    
    <!-- Any device that has an ip-address and can be managed using some network protocol -->
    <component-class name="ManagedDevice" category=".general">
        <template/>
        <props>
            <prop name="ip-address" type="String" default="" pattern="\d+\.\d+\.\d+\.\d+(/\d+)?" category="Network"
                description="Device management ip-address"/>
            <prop name="management-protocol" type="String" category="Network"
                description="Device management protocol (to open management sessions from the on-drawing hyperlinks)"/>
            <prop name="management-ref-target" type="String" choices="_self,_blank" category="Network"
                description="Target for on-drawing hyperlinks"/>
            <prop name="comment" type="String" description="Device general info"/>
        </props>
    </component-class>

    <!-- A rack-mount device that can be stacked (i.t. consists of one or more stack units) and can be viewed in left, right or central perspective -->
    <component-class name="RackMountDevice" category=".general">
        <template>
            <title v-if="comment">{{comment}}</title>
            <template v-for="i in nUnits">
                <rect x="0" v-bind:y="(i-1)*(unitHeight+interUnitGap)" v-bind:width="width" v-bind:height="unitHeight" class="facet front"/>
                <template v-if="i &amp;&amp; i &lt; nUnits">
                    <line v-if="!interUnitGap" x1="0" v-bind:y1="i*unitHeight" v-bind:x2="width" v-bind:y2="i*unitHeight" class="unit-boundary" />
                    <rect v-else="" x="1" v-bind:y="i*unitHeight+(i-1)*interUnitGap" v-bind:width="width-2" v-bind:height="interUnitGap" class="facet top inter-unit-gap"/>
                </template>
            </template>
            <slot name="frontFacet"/>
            <g v-if="perspective === 'center'" v-bind:transform="`scale(${width} ${-topFacetSize*unitHeight})`">
                <polyline
                    v-bind:points="$p($ThreeVectorTransform({u:[1,0], v:[0.2,1], w:[-0.4,0]})
                                                           ([0,0], [0,1], [1,1], [1,0]))"
                    class="top facet" />
                <slot name="topFacetC"/>
            </g>
            <template v-if="perspective === 'right'">
                <g v-bind:transform="`skewX(${-topFacetSkew}) scale(${width} ${-topFacetSize*unitHeight})`">
                    <polyline v-bind:points="`0,0 ${(1-perspCorrection)*0.4},1 1,1 1,0`" class="top facet" />
                    <g v-bind:transform="`translate(${perspCorrection*0.025}, 0)`">
                        <slot name="topFacetLR"/>
                    </g>
                </g>
                <template v-for="i in nUnits">
                    <polygon class="side facet"
                        v-bind:points="`${width},${(i-1)*(unitHeight+interUnitGap)} ${width},${i*unitHeight+(i-1)*interUnitGap} 
                                        ${width+topFacetSkewShift},${(i*perspCorrection-topFacetSize)*unitHeight+(i-1)*perspCorrection*interUnitGap} 
                                        ${width+topFacetSkewShift},${((i-1)*perspCorrection-topFacetSize)*unitHeight+(i-1)*perspCorrection*interUnitGap}`"
                        />
                    <polygon class="side facet inter-unit-gap" v-if="i &lt; nUnits"
                        v-bind:points="`${width},${i*unitHeight+(i-1)*interUnitGap} ${width},${i*(unitHeight+interUnitGap)}
                                        ${width+topFacetSkewShift},${(i*perspCorrection-topFacetSize)*unitHeight+i*perspCorrection*interUnitGap} 
                                        ${width+topFacetSkewShift},${(i*perspCorrection-topFacetSize)*unitHeight+(i-1)*perspCorrection*interUnitGap}`"
                        />
                </template>
            </template>
            <template v-if="perspective === 'left'">
                <g v-bind:transform="`skewX(${topFacetSkew}) scale(${width} ${-topFacetSize*unitHeight})`">
                    <polyline v-bind:points="`0,0 0,1 ${1-(1-perspCorrection)*0.4},1 1,0`" class="top facet" />
                    <g v-bind:transform="`translate(${-perspCorrection*0.025}, 0)`">
                        <slot name="topFacetLR"/>
                    </g>
                </g>
                <template v-for="i in nUnits">
                    <polygon class="side facet"
                        v-bind:points="`0,${(i-1)*(unitHeight+interUnitGap)} 0,${i*unitHeight+(i-1)*interUnitGap} 
                                        ${-topFacetSkewShift},${(i*perspCorrection-topFacetSize)*unitHeight+(i-1)*perspCorrection*interUnitGap} 
                                        ${-topFacetSkewShift},${((i-1)*perspCorrection-topFacetSize)*unitHeight+(i-1)*perspCorrection*interUnitGap}`"
                        />
                    <polygon class="side facet inter-unit-gap" v-if="i &lt; nUnits"
                        v-bind:points="`0,${i*unitHeight+(i-1)*interUnitGap} 0,${i*(unitHeight+interUnitGap)}
                                        ${-topFacetSkewShift},${(i*perspCorrection-topFacetSize)*unitHeight+i*perspCorrection*interUnitGap} 
                                        ${-topFacetSkewShift},${(i*perspCorrection-topFacetSize)*unitHeight+(i-1)*perspCorrection*interUnitGap}`"
                        />
                </template>
            </template>
            <template v-if="showDeviceName">
                <text v-if="perspective !== 'none'"
                    v-bind:x="nameX" v-bind:y="nameY" v-bind:font-size="unitHeight*0.75"
                    text-anchor="middle" class="device-name"
                    >{{name}}<title v-if="comment">{{comment}}</title></text>
                <a v-else-if="ipAddress &amp;&amp; managementProtocol" v-bind:href="managementProtocol + ipAddress" 
                    v-bind:target="managementRefTarget" class="no-persp">
                    <text v-bind:x="nameX" v-bind:y="nameY" text-anchor="middle">
                        <tspan v-bind:font-size="unitHeight*0.4" class="device-name no-persp">{{name}}</tspan>
                        <tspan v-bind:font-size="unitHeight*0.25" class="ip-address no-persp" dx="0.5rem">&nbsp;{{ipAddress}}</tspan>
                    </text>
                </a>
                <text v-else="" v-bind:x="nameX" v-bind:y="nameY" v-bind:font-size="unitHeight*0.4"
                    text-anchor="middle" class="device-name no-persp"
                    >{{name}}</text>
                </template>
            <template v-if="ipAddress &amp;&amp; showIpAddress &amp;&amp; perspective !== 'none'">
                <a v-if="managementProtocol" v-bind:href="managementProtocol + ipAddress" 
                   v-bind:target="managementRefTarget">
                    <text
                        v-bind:x="nameX" v-bind:y="nameY + unitHeight*0.25" v-bind:font-size="unitHeight*0.25"
                        text-anchor="middle" class="ip-address href"
                        >
                        {{ipAddress}}
                    </text>
                </a>
                <text v-else=""
                    v-bind:x="nameX" v-bind:y="nameY + unitHeight*0.25" v-bind:font-size="unitHeight*0.25"
                    text-anchor="middle" class="ip-address"
                    >
                    {{ipAddress}}
                </text>
            </template>
        </template>
        <style>
            .device-name { font-family: sans-serif; fill: black; text-shadow: none}
            .device-name.no-persp { font-family: sans-serif!important; fill: #474747!important; text-shadow: none!important; }
            .ip-address { font-family: sans-serif; }
            .ip-address.no-persp { fill: gray; text-shadow: none!important; }
            a { text-decoration: none; }
            a:hover { text-decoration: underline; }
            a.no-persp:hover { text-decoration: underline solid 1px!important; text-decoration-thickness: 1px!important; }
            .port-icon { fill: #404040; }
            .facet {
                --facet-color: #e6e6e6;
                fill: var(--facet-color); stroke: var(--facet-color); stroke-width: 0;
            }
            .top.facet { filter: brightness(0.7); }
            .side.facet { filter: brightness(0.5); }
            .unit-boundary { stroke: black; stroke-opacity: 0.3; stroke-width: 2px; }
            .inter-unit-gap { fill-opacity: 0.1; stroke-opacity: 0.5; stroke-width: 1px }
        </style>
        <props extend="ManagedDevice">
            <prop name="n-units" type="Number" default="1" category="Hardware" description="The number of units (devices) in the stack"/>
            <prop name="unit-height" type="Number" default="75" category="Geometry" description="The height of a single unit"/>
            <prop name="inter-unit-gap" type="Number" default="0" category="Geometry" description="The visual gap between the units"/>
            <prop name="width" type="Number" required="true" default="312.5" category="Geometry" />
            <prop name="perspective" type="String" choices="left,right,center,none" default="center" category="Presentation" 
                  description="Visual perspective of the device image"/>
            <prop name="top-facet-size" type="Number" default="1.4" category="Geometry" />
            <prop name="top-facet-skew" type="Number" default="60" category="Geometry" />
            <prop name="show-device-name" type="boolean" default="true" category="Presentation"/>
            <prop name="show-ip-address" type="boolean" default="true" category="Presentation" />
            <prop name="name-vertical-pos" type="Number" default="0.3" category="Presentation" description="Device name offset from the device top edge (relative to unitHeight)" />
        </props>
        <computed-props>
            <computed-prop name="perspCorrection">0.85</computed-prop>
            <computed-prop name="topFacetSkewShift">
                props.unitHeight * props.topFacetSize * Math.tan(props.topFacetSkew * Math.PI/180)
            </computed-prop>
            <computed-prop name="nameX">
                props.perspective === 'right' ? props.width/2 + computedProps.topFacetSkewShift*0.393 :
                props.perspective === 'left' ? props.width/2 - computedProps.topFacetSkewShift*0.393 :
                props.width*0.5
            </computed-prop>
            <computed-prop name="nameY">
                props.perspective === "none" ? -props.unitHeight*props.nameVerticalPos : -props.unitHeight*props.topFacetSize*0.393
            </computed-prop>
        </computed-props>
    </component-class>

    <!-- A badge for marking stack-units -->
    <component-class name="StackUnitBadge" category=".switch-parts">
        <template>
            <rect x="0" y="0" v-bind:width="width" v-bind:height="height" class="unit-badge" />
            <text v-bind:x="width/2" v-bind:y="height*0.75" v-bind:font-size="height*0.75"
                text-anchor="middle" class="unit-badge-text">{{unit}}</text>
        </template>
        <style>
            .unit-badge { fill: lightgray; rx: 3px; stroke: white; stroke-width: 2px}
            .unit-badge-text { font-family: sans-serif; fill: black; vertical-align: middle;}
        </style>
        <props>
            <prop name="unit" type="Number" required="true" />
            <prop name="width" type="Number" required="true" category="Geometry" />
            <prop name="height" type="Number" required="true" category="Geometry" />
        </props>
    </component-class>

    <!-- General switch body, i.e. a single box or some stacked boxes without ports -->
    <component-class name="SwitchBody" category=".switch-parts">
        <template>
            <Kre:RackMountDevice v-bind:name="name" v-bind:unit-height="unitHeight" v-bind:width="width"
                v-bind:n-units="nStackUnits" v-bind:inter-unit-gap="interUnitGap" v-bind:perspective="perspective" 
                v-bind:top-facet-size="topFacetSize" v-bind:top-facet-skew="topFacetSkew" v-bind:name-vertical-pos="nameVerticalPos"
                v-bind:ip-address="ipAddress" v-bind:management-protocol="managementProtocol"
                v-bind:management-ref-target="managementRefTarget"
                v-bind:comment="comment"
                >
                <template v-slot:frontFacet="{}">
                    <slot name="frontFacet" />
                </template>
                <template v-slot:topFacetC="{}">
                    <polyline v-bind:points="$p($ThreeVectorTransform({u:[1,0], v:[0.2,1], w:[-0.4,0]})(...$$.crossArrows))" class="facet" />
                    <slot name="topFacetC"/>
                </template>
                <template v-slot:topFacetLR="{}">
                    <polyline v-bind:points="$p($$.crossArrows)" class="facet" />
                    <slot name="topFacetLR"/>
                </template>
            </Kre:RackMountDevice>
        </template>
        <style extends="RackMountDevice">
            .facet { --facet-color: lightgray; }
        </style>
        <props extend="RackMountDevice" except="n-units">
            <prop name="n-stack-units" type="Number" default="1" category="Hardware" description="The number of units (devices) in the stack"/>
            <prop name="ports-info" type="object" default="{}" category="Network" 
                description="Ports info for displaying in tooltips and similar"/>
            <prop name="fibers-info" type="Object" default="{}" category="Optics" description="Various optical parameters of the individual fibers"/>
        </props>
    </component-class>

    <!-- General switch (non-stacked) -->
    <component-class name="Switch" category="Switches">
        <template>
            <Kre:SwitchBody 
                v-bind:width="width" v-bind:unit-height="height"
                v-bind:perspective="perspective" v-bind:name="name" v-bind:name-vertical-pos="nameVerticalPos"
                v-bind:ip-address="ipAddress" v-bind:management-protocol="managementProtocol" 
                v-bind:management-ref-target="managementRefTarget"
                v-bind:comment="comment"
                />
            <Kre:Port v-for="i in nPorts"
                v-bind:x="height*(0.75*i - 0.5)" v-bind:y="height/4" v-bind:d="height/2"
                v-bind:name="i" v-bind:port-info="portsInfo[i]" v-bind:fiber-info="fibersInfo[i]"
                />
        </template>
        <style extends="SwitchBody" />
        <props extend="SwitchBody">
            <prop name="nPorts" type="Number" default="8" category="Hardware" />
            <prop name="height" type="Number" required="true" default="50" category="Geometry" />
            <prop name="width" type="Number" category="Geometry"/>
        </props>
        <computed-props>
            <computed-prop name="width">props.height * (0.25 + 0.75*props.nPorts)</computed-prop>
        </computed-props>
    </component-class>


    <!-- The following class is not really useful. But it was the first one comletely generated by Copilot,
         and I want to keep it for the memory. The biggest surprise was that Copilot definitely did not see 
         Kresmer classes before and also he could not know that we call concentrator switches in our 
         metro-network "hubs". -->
    <component-class name="Hub" category="Switches">
        <template>
            <Kre:Switch v-bind:name="name" v-bind:height="height" v-bind:n-ports="nPorts"
                v-bind:perspective="perspective" v-bind:name-vertical-pos="nameVerticalPos"
                v-bind:comment="comment"
                />
        </template>
        <style extends="Switch">
            .device-name { fill: white; text-shadow: 3px 3px 3px black; }
            .facet {fill: #ffcc00;}
            .port-icon { fill: #ff6600; }
            .port-icon.body { stroke: #ffcc00; }
        </style>
        <props extend="Switch"/>
    </component-class>


    <!-- General router body (differ form the switch body only with a circle on the top facet -->

    <component-class name="RouterBody" category=".router-parts">
        <template>
            <Kre:RackMountDevice v-bind:name="name" v-bind:unit-height="unitHeight" v-bind:width="width"
                v-bind:n-units="nUnits" v-bind:inter-unit-gap="interUnitGap" v-bind:perspective="perspective" 
                v-bind:top-facet-size="topFacetSize" v-bind:top-facet-skew="topFacetSkew" v-bind:name-vertical-pos="nameVerticalPos"
                v-bind:ip-address="ipAddress" v-bind:management-protocol="managementProtocol"
                v-bind:management-ref-target="managementRefTarget"
                v-bind:comment="comment"
                >
                <template v-slot:frontFacet="{}">
                    <slot name="frontFacet" />
                </template>
                <template v-slot:topFacetC="{}">
                    <ellipse cx="0.5" cy="0.48" rx="0.35" ry="0.45" class="facet" style="fill: none; stroke-width: 0.015" />
                    <polyline v-bind:points="$p($ThreeVectorTransform({u:[1,0], v:[0.2,1], w:[-0.4,0]})(...$$.crossArrows))" class="facet" />
                    <slot name="topFacetC"/>
                </template>
                <template v-slot:topFacetLR="{}">
                    <circle cx="0.5" cy="0.5" r="0.45" class="facet" style="fill: none; stroke-width: 0.015" />
                    <polyline v-bind:points="$p($$.crossArrows)" class="facet" />
                    <slot name="topFacetLR"/>
                </template>
            </Kre:RackMountDevice>
        </template>
        <style extends="RackMountDevice"/>
        <props extend="RackMountDevice">
            <prop name="ports-info" type="object" default="{}" category="Network" description="Ports info for displaying in tooltips and similar"/>
            <prop name="fibers-info" type="Object" default="{}" category="Optics" description="Various optical parameters of the individual fibers"/>
        </props>
    </component-class>

    <component-class name="OpticalMultiplexer" category=".optical-equipment">
        <template/>
        <props>
            <prop name="division-mode" type="String" choices="CWDM, DWDM" category="Optics" description="Multiplexer signal division mode"/>
            <prop name="fibers-info" type="Object" category="Optics" description="Individual beam wavelengthes and directions"/>
        </props>
    </component-class>


    <!-- *********************************************** Links ********************************************************* -->

    <link-class name="_abstract-link" category=".abstract-links">
        <defs>
            <marker id="kre:link-marker-circle" markerWidth="4.5" markerHeight="4.5" refX="5" refY="5" viewBox="0 0 10 10">
                <circle r="5" cx="5" cy="5" fill="context-stroke" stroke="context-stroke" />
            </marker>
            <marker id="kre:link-marker-arrow" markerWidth="7.5" markerHeight="4.5" refX="5" refY="5" viewBox="0 0 10 10" 
                    orient="auto-start-reverse" preserveAspectRatio="none">
                <polygon points="0,0 10,5 0,10 2,5" fill="context-stroke" stroke="context-stroke"/>
            </marker>
            <marker id="kre:link-marker-square" markerWidth="4.5" markerHeight="4.5" refX="5" refY="5" viewBox="0 0 10 10"
                    orient="auto-start-reverse">
                <rect x="0" y="0" width="10" height="10" fill="context-stroke" stroke="context-stroke"/>
            </marker>
            <marker id="kre:link-marker-diamond" markerWidth="6" markerHeight="6" refX="5" refY="5" viewBox="0 0 10 10"
                    orient="auto-start-reverse">
                <polygon points="0,5 5,0 10,5 5,10" fill="context-stroke" stroke="context-stroke"/>
            </marker>
        </defs>
        <props>
            <prop name="mediaType" type="string" category="Network"/>
            <prop name="acceptMediaTypes" type="string" category="Network"/>
            <prop name="startLabel" type="string"/>
            <prop name="endLabel" type="string"/>
            <prop name="startMarker" type="string" choices="arrow,circle,square,diamond" category="Presentation"/>
            <prop name="endMarker" type="string" choices="arrow,circle,square,diamond" category="Presentation"/>
        </props>
        <style>
            .padding {stroke-width: 8px;}
            .link {--link-color: #3b3b3b; --highlighted-link-color: black;}
            .segment {stroke: var(--link-color); stroke-width: 2px; stroke-linecap: round; xx-filter: url(#kre:fltLinkFilter)}
            .segment.highlighted, .segment.selected {stroke: var(--highlighted-link-color); stroke-width: 3px}
            .vertex {stroke: var(--highlighted-link-color); stroke-width: 4px; fill: white; r: 6px}
            .vertex.padding {r: 60px; fill: gray; fill-opacity: 0.3}
            .vertex.blinker {r: 10px; stroke: red; stroke-width: 2px; fill: red; fill-opacity: 0.2;}
            .connection-point-marker {r: 8px; fill: yellow; stroke: rgb(184, 169, 0); stroke-width: 1;}
            .label {font-family: sans-serif; font-size: 0.75rem; fill: var(--link-color);}
            .link-number {font-family: sans-serif; font-size: 0.75rem; fill: var(--link-color); filter: brightness(0.8);}
            .blank.line {stroke: red; stroke-width: 2px;}
            .blank.origin {stroke: orange; stroke-width: 2px; fill: orange; fill-opacity: 0.5;}
            .blank.origin-center {fill: red;}
            .blank.header {stroke: var(--link-color); stroke-width: 2px; fill: var(--link-color); fill-opacity: 0.5;}
            .blank.header-center {fill: var(--link-color); filter: brightness(0.2);}
        </style>
    </link-class>

    <!-- Various link types -->
    <link-class name="twisted-pair" category="copper-links">
        <extends base="_abstract-link" media-type="twisted-pair" accept-media-types="none"/>
        <style>
            .link {--link-color: #5e5e5e; --highlighted-link-color: #c22a00; }
            .segment {stroke-width: 1px;}
            .segment.highlighted, .segment.selected {stroke-width: 2px}
            .blank.header {fill-opacity: 0.3;}
        </style>
    </link-class>

    <link-class name="sm-patch-cord" category="optical-links">
        <extends base="_abstract-link" media-type="sm-optics" accept-media-types="none"/>
        <style>
            .link {--link-color: #b39500; --highlighted-link-color: #f59300; }
            .segment {stroke-width: 1px;}
            .segment.highlighted, .segment.selected {stroke-width: 2px}
            .link-number {filter: brightness(0.6)}
            .blank.header {fill-opacity: 0.3;}
        </style>
    </link-class>

    <link-class name="DAC" category="copper-links">
        <extends base="_abstract-link" media-type="DAC" accept-media-types="none"/>
        <style>
            .link {--link-color: #236e85; --highlighted-link-color: #23beb3; }
            .padding {stroke-width: 10px;}
            .vertex.padding {fill: #23beb3;}
            .segment {stroke-width: 1.5px; stroke-linejoin: round;}
            .segment.highlighted, .segment.selected {stroke-width: 2px;}
            .vertex {stroke-width: 4px; r: 6px}
            .blank.header {fill-opacity: 0.3;}
        </style>
    </link-class>

    <link-class name="AOC" category="optical-links">
        <extends base="_abstract-link" media-type="AOC" accept-media-types="none"/>
        <style>
            .link {--link-color: #0098c7; --highlighted-link-color: #1de7e7; }
            .padding {stroke-width: 10px;}
            .vertex.padding {fill: #1de7e7;}
            .segment {stroke-width: 1.5px; stroke-linejoin: round;}
            .segment.highlighted, .segment.selected {stroke-width: 2px}
            .vertex {stroke-width: 4px; r: 6px}
            .blank.header {fill-opacity: 0.3;}
        </style>
    </link-class>

    <link-class name="AOC-fan" category="optical-links">
        <extends base="AOC" media-type="AOC-fan" accept-media-types="AOC"/>
        <style>
            .segment, .segment.highlighted, segment.selected, .blank.line {stroke-width: 3px; }
        </style>
    </link-class>

    <link-class name="multifiber-cable" category="optical-links">
        <extends base="_abstract-link" media-type="multifiber-cable" accept-media-types="multifiber-cable"/>
        <props>
            <prop name="nFibers" type="Number" category="Hardware" description="The number of fibers in the cable"/>
            <prop name="mode" type="String" category="Hardware" choices="single-mode, multi-mode" description="Optical mode use"/>
        </props>
        <style>
            .link {--link-color: black; --highlighted-link-color: #ff873d; }
            .padding {stroke-width: 10px;}
            .vertex.padding {fill: #ff873d;}
            .segment {stroke-width: 2px; stroke-linejoin: round;}
            .segment.highlighted, .segment.selected {stroke-width: 3px}
            .vertex {stroke-width: 4px; r: 6px}
            .blank.header {fill-opacity: 0.3;}
        </style>
    </link-class>

    <!-- Link bundles -->
    <link-bundle-class name="link-bundle" category="link-bundles">
        <extends base="_abstract-link" accept-media-types="none"/>
        <style>
            .link {--highlighted-link-color: #c22a00; }
            .segment, .segment.highlighted, segment.selected, .blank.line {stroke-width: 3px; stroke-linejoin: round; }
        </style>
    </link-bundle-class>

    <link-bundle-class name="DAC-bundle" category="copper-links">
        <extends base="link-bundle"/>
        <style extends="DAC"/>
    </link-bundle-class>

    <link-bundle-class name="AOC-bundle" category="optical-links">
        <extends base="link-bundle"/>
        <style extends="AOC"/>
    </link-bundle-class>

</kresmer-library>