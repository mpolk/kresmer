<?xml version="1.0" encoding="utf-8"?>
<?xml-model href="xsd/kresmer-library.xsd"?>
<!-- **************************************************************************>
 *                            ðŸ‘‘ KresMer ðŸ‘‘
 *       "Kreslennya Merezh" - network diagram editor and viewer
 *      Copyright (C) 2022-2024 Dmitriy Stepanenko. All Rights Reserved.
 * ___________________________________________________________________________
 *                        The standard library
 * This library contains general graphics and drawing elements, such as ports,
 * links, device bodies etc. More specific network units (servers, 
 * vendor-specific equipment etc.) are included in other libraries.
<*************************************************************************** -->

<!-- Define some little things to make the life less hard -->
<!DOCTYPE inline_dtd[<!ENTITY nbsp "&#160;">]>

<kresmer-library name="stdlib" xmlns="kresmer-library" xmlns:Kre="Kre" xmlns:kre="kresmer-builtin-elements" xmlns:v-bind="v-bind" xmlns:v-on="v-on" xmlns:v-slot="v-slot">
    <import library="std-graphics" />
    <import library="std-ports" />
    <import library="std-links" />

    <!-- *************************************** General device prototypes ******************************************** -->
    
    <!-- Any device that has an ip-address and can be managed using some network protocol -->
    <component-class name="ManagedDevice" category=".general">
        <props>
            <prop name="ip-address" type="String" default="" pattern="\d+\.\d+\.\d+\.\d+(/\d+)?" category="Network"
                description="Device management ip-address"/>
            <prop name="management-protocol" type="String" category="Network"
                description="Device management protocol (to open management sessions from the on-drawing hyperlinks)"/>
            <prop name="management-ref-target" type="String" choices="_self,_blank" category="Network"
                description="Target for on-drawing hyperlinks"/>
            <prop name="comment" type="String" description="Device general info"/>
        </props>
    </component-class>


    <!-- Abstract devices with the various kinds of ports -->
    <component-class name="DeviceWithManagedPorts" category=".general" version="2024070300">
        <props>
            <prop name="ports-info" type="object" default="{}" category="Network" description="Ports info for displaying in tooltips and similar">
                <elements type="Object" type-ref="Port.port-info"/>
            </prop>
        </props>
    </component-class>


    <component-class name="DeviceWithOpticalPorts" category=".general" version="2024070300">
        <props>
            <prop name="fibers-info" type="Object" default="{}" category="Optics" 
                description="Various optical parameters of the individual fibers connected to the port">
                <elements type="Object" type-ref="Port.fiber-info"/>
            </prop>
        </props>
    </component-class>


    <!-- A rack-mount device that can be stacked (i.t. consists of one or more stack units) and can be viewed in left, right or central perspective -->
    <component-class name="RackMountDevice" category=".general">
        <template>
            <title v-if="comment">{{comment}}</title>
            <template v-for="i in nUnits">
                <rect x="0" v-bind:y="(i-1)*(unitHeight+interUnitGap)" v-bind:width="width" v-bind:height="unitHeight" class="facet front"/>
                <template v-if="i &amp;&amp; i &lt; nUnits">
                    <line v-if="!interUnitGap" x1="0" v-bind:y1="i*unitHeight" v-bind:x2="width" v-bind:y2="i*unitHeight" class="unit-boundary" />
                    <rect v-else="" x="1" v-bind:y="i*unitHeight+(i-1)*interUnitGap" v-bind:width="width-2" v-bind:height="interUnitGap" class="facet top inter-unit-gap"/>
                </template>
            </template>
            <slot name="frontFacet"/>
            <g v-if="perspective === 'center'" v-bind:transform="`scale(${width} ${-topFacetSize*unitHeight})`">
                <polyline
                    v-bind:points="kre$p(kre$threeVectorTransform({u:[1,0], v:[0.2,1], w:[-0.4,0]})
                                                           ([0,0], [0,1], [1,1], [1,0]))"
                    class="top facet" />
                <slot name="topFacetC"/>
            </g>
            <template v-if="perspective === 'right'">
                <g v-bind:transform="`skewX(${-topFacetSkew}) scale(${width} ${-topFacetSize*unitHeight})`">
                    <polyline v-bind:points="`0,0 ${(1-perspCorrection)*0.4},1 1,1 1,0`" class="top facet" />
                    <g v-bind:transform="`translate(${perspCorrection*0.025}, 0)`">
                        <slot name="topFacetLR"/>
                    </g>
                </g>
                <template v-for="i in nUnits">
                    <polygon class="side facet"
                        v-bind:points="`${width},${(i-1)*(unitHeight+interUnitGap)} ${width},${i*unitHeight+(i-1)*interUnitGap} 
                                        ${width+topFacetSkewShift},${(i*perspCorrection-topFacetSize)*unitHeight+(i-1)*perspCorrection*interUnitGap} 
                                        ${width+topFacetSkewShift},${((i-1)*perspCorrection-topFacetSize)*unitHeight+(i-1)*perspCorrection*interUnitGap}`"
                        />
                    <polygon class="side facet inter-unit-gap" v-if="i &lt; nUnits"
                        v-bind:points="`${width},${i*unitHeight+(i-1)*interUnitGap} ${width},${i*(unitHeight+interUnitGap)}
                                        ${width+topFacetSkewShift},${(i*perspCorrection-topFacetSize)*unitHeight+i*perspCorrection*interUnitGap} 
                                        ${width+topFacetSkewShift},${(i*perspCorrection-topFacetSize)*unitHeight+(i-1)*perspCorrection*interUnitGap}`"
                        />
                </template>
            </template>
            <template v-if="perspective === 'left'">
                <g v-bind:transform="`skewX(${topFacetSkew}) scale(${width} ${-topFacetSize*unitHeight})`">
                    <polyline v-bind:points="`0,0 0,1 ${1-(1-perspCorrection)*0.4},1 1,0`" class="top facet" />
                    <g v-bind:transform="`translate(${-perspCorrection*0.025}, 0)`">
                        <slot name="topFacetLR"/>
                    </g>
                </g>
                <template v-for="i in nUnits">
                    <polygon class="side facet"
                        v-bind:points="`0,${(i-1)*(unitHeight+interUnitGap)} 0,${i*unitHeight+(i-1)*interUnitGap} 
                                        ${-topFacetSkewShift},${(i*perspCorrection-topFacetSize)*unitHeight+(i-1)*perspCorrection*interUnitGap} 
                                        ${-topFacetSkewShift},${((i-1)*perspCorrection-topFacetSize)*unitHeight+(i-1)*perspCorrection*interUnitGap}`"
                        />
                    <polygon class="side facet inter-unit-gap" v-if="i &lt; nUnits"
                        v-bind:points="`0,${i*unitHeight+(i-1)*interUnitGap} 0,${i*(unitHeight+interUnitGap)}
                                        ${-topFacetSkewShift},${(i*perspCorrection-topFacetSize)*unitHeight+i*perspCorrection*interUnitGap} 
                                        ${-topFacetSkewShift},${(i*perspCorrection-topFacetSize)*unitHeight+(i-1)*perspCorrection*interUnitGap}`"
                        />
                </template>
            </template>
            <template v-if="showDeviceName">
                <text v-if="perspective !== 'none'"
                    v-bind:x="nameX" v-bind:y="nameY" v-bind:font-size="unitHeight*0.75"
                    text-anchor="middle" class="device-name"
                    >{{name}}<title v-if="comment">{{comment}}</title></text>
                <a v-else-if="ipAddress &amp;&amp; managementProtocol" v-bind:href="managementProtocol + ipAddress" 
                    v-bind:target="managementRefTarget" class="no-persp">
                    <text v-bind:x="nameX" v-bind:y="nameY" text-anchor="middle">
                        <tspan v-bind:font-size="unitHeight*0.4" class="device-name no-persp">{{name}}</tspan>
                        <tspan v-bind:font-size="unitHeight*0.25" class="ip-address no-persp" dx="0.5rem">&nbsp;{{ipAddress}}</tspan>
                    </text>
                </a>
                <text v-else="" v-bind:x="nameX" v-bind:y="nameY" v-bind:font-size="unitHeight*0.4"
                    text-anchor="middle" class="device-name no-persp"
                    >{{name}}</text>
                </template>
            <template v-if="ipAddress &amp;&amp; showIpAddress &amp;&amp; perspective !== 'none'">
                <a v-if="managementProtocol" v-bind:href="managementProtocol + ipAddress" 
                   v-bind:target="managementRefTarget">
                    <text
                        v-bind:x="nameX" v-bind:y="nameY + unitHeight*0.25" v-bind:font-size="unitHeight*0.25"
                        text-anchor="middle" class="ip-address href"
                        >
                        {{ipAddress}}
                    </text>
                </a>
                <text v-else=""
                    v-bind:x="nameX" v-bind:y="nameY + unitHeight*0.25" v-bind:font-size="unitHeight*0.25"
                    text-anchor="middle" class="ip-address"
                    >
                    {{ipAddress}}
                </text>
            </template>
        </template>
        <style>
            .device-name { font-family: sans-serif; fill: black; text-shadow: none}
            .device-name.no-persp { font-family: sans-serif!important; fill: #474747!important; text-shadow: none!important; }
            .ip-address { font-family: sans-serif; }
            .ip-address.no-persp { fill: gray; text-shadow: none!important; }
            a { text-decoration: none; }
            a:hover { text-decoration: underline; }
            a.no-persp:hover { text-decoration: underline solid 1px!important; text-decoration-thickness: 1px!important; }
            .port-icon { fill: #404040; }
            .facet {
                --facet-color: #e6e6e6;
                fill: var(--facet-color); stroke: var(--facet-color); stroke-width: 0;
            }
            .top.facet { filter: brightness(0.7); }
            .side.facet { filter: brightness(0.5); }
            .unit-boundary { stroke: black; stroke-opacity: 0.3; stroke-width: 2px; }
            .inter-unit-gap { fill-opacity: 0.1; stroke-opacity: 0.5; stroke-width: 1px }
        </style>
        <props extend="ManagedDevice">
            <prop name="n-units" type="Number" default="1" category="Hardware" description="The number of units (devices) in the stack"/>
            <prop name="unit-height" type="Number" default="75" category="Geometry" description="The height of a single unit"/>
            <prop name="inter-unit-gap" type="Number" default="0" category="Geometry" description="The visual gap between the units"/>
            <prop name="width" type="Number" required="true" default="312.5" category="Geometry" />
            <prop name="perspective" type="String" choices="left,right,center,none" default="center" category="Presentation" 
                  description="Visual perspective of the device image"/>
            <prop name="top-facet-size" type="Number" default="1.4" category="Geometry" />
            <prop name="top-facet-skew" type="Number" default="60" category="Geometry" />
            <prop name="show-device-name" type="boolean" default="true" category="Presentation"/>
            <prop name="show-ip-address" type="boolean" default="true" category="Presentation" />
            <prop name="name-vertical-pos" type="Number" default="0.3" category="Presentation" description="Device name offset from the device top edge (relative to unitHeight)" />
        </props>
        <computed-props>
            <computed-prop name="perspCorrection">0.85</computed-prop>
            <computed-prop name="topFacetSkewShift">
                props.unitHeight * props.topFacetSize * Math.tan(props.topFacetSkew * Math.PI/180)
            </computed-prop>
            <computed-prop name="nameX">
                props.perspective === 'right' ? props.width/2 + computedProps.topFacetSkewShift*0.393 :
                props.perspective === 'left' ? props.width/2 - computedProps.topFacetSkewShift*0.393 :
                props.width*0.5
            </computed-prop>
            <computed-prop name="nameY">
                props.perspective === "none" ? -props.unitHeight*props.nameVerticalPos : -props.unitHeight*props.topFacetSize*0.393
            </computed-prop>
        </computed-props>
    </component-class>

    <!-- A badge for marking stack-units -->
    <component-class name="StackUnitBadge" category=".switch-parts">
        <template>
            <rect x="0" y="0" v-bind:width="width" v-bind:height="height" class="unit-badge" />
            <text v-bind:x="width/2" v-bind:y="height*0.75" v-bind:font-size="height*0.75"
                text-anchor="middle" class="unit-badge-text">{{unit}}</text>
        </template>
        <style>
            .unit-badge { fill: lightgray; rx: 3px; stroke: white; stroke-width: 2px}
            .unit-badge-text { font-family: sans-serif; fill: black; vertical-align: middle;}
        </style>
        <props>
            <prop name="unit" type="Number" required="true" />
            <prop name="width" type="Number" required="true" category="Geometry" />
            <prop name="height" type="Number" required="true" category="Geometry" />
        </props>
    </component-class>

    <!-- Graphics for adjustment-handles - visual elements used for "on-the-fly" editing network component props 
        without opening a modal form -->
    <defs name="AdjustmentHandles" version="2024062500">
        <g id="kre:adjustment-ruler-marker-common">
            <polygon points="0,5 5,0 10,5 5,10" />
            <circle cx="5" cy="5" r="2" style="filter: brightness(0.25) invert(100%)"/>
        </g>
        <marker id="kre:adjustment-ruler-marker" markerWidth="4" markerHeight="4" refX="5" refY="5" viewBox="0 0 10 10"
            orient="auto-start-reverse">
            <use href="#kre:adjustment-ruler-marker-common" class="adjustment-ruler-marker"/>
        </marker>
        <marker id="kre:adjustment-ruler-marker-fixed" markerWidth="4" markerHeight="4" refX="5" refY="5" viewBox="0 0 10 10"
            orient="auto-start-reverse">
            <use href="#kre:adjustment-ruler-marker-common" class="adjustment-ruler-marker fixed"/>
        </marker>
    </defs>
    <style name="AdjustmentHandles" version="2024062500">
        .adjustment-ruler {
            stroke: brown;
            stroke-width: 3px;
            opacity: 0.5;
            cursor: pointer;
        }
        .adjustment-ruler.selected, .adjustment-ruler:hover { opacity: 1; }
        .adjustment-ruler-marker { fill: green; }
        .adjustment-ruler-marker.fixed { fill: red; }
        .adjustment-ruler .marker-padding { r: 3px; }
    </style>

</kresmer-library>