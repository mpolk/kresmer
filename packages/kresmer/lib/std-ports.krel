<?xml version="1.0" encoding="utf-8"?>
<?xml-model href="xsd/kresmer-library.xsd"?>
<!-- **************************************************************************>
 *                            ðŸ‘‘ KresMer ðŸ‘‘
 *       "Kreslennya Merezh" - network diagram editor and viewer
 *      Copyright (C) 2022-2024 Dmitriy Stepanenko. All Rights Reserved.
 * ___________________________________________________________________________
 *                        The standard library
 *      This sub-library contains network ports and their parts
<*************************************************************************** -->

<kresmer-library name="std-ports" xmlns:Kre="Kre" xmlns:v-bind="v-bind" xmlns:v-on="v-on" xmlns:v-slot="v-slot">

    <!-- Switch or router port -->
    <component-class name="MultiFiberPort" category=".port-abstractions">
        <computed-props>
            <computed-prop name="nFibers">props.fiberInfo?.nFibers ?? props.portInfo?.nFibers ?? 1</computed-prop>
        </computed-props>
    </component-class>

    <component-class name="Port" category=".ports" version="2024070300">
        <template>
            <rect v-bind:width="w" v-bind:height="h" class="port-icon body" />
            <slot />
            <rect v-if="portInfo?.operStatus" v-bind:width="h*0.25" v-bind:height="h*0.25" class="status-indicator" />
            <text v-bind:x="w/2"
                v-bind:y="labelY" text-anchor="middle" v-bind:font-size="fontSize*h"
                class="port-name" v-bind:class="{disabled: !(portInfo?.adminStatus ?? true)}">{{label}}</text>
            <title>{{title}}</title>
            <connection-point v-if="isActive &amp;&amp; nFibers == 1"
                v-for="({x, y}, dir) in {up: {x: w/2, y: 0}, right: {x: w, y: h/2}, down: {x: w/2, y: h}, left: {x: 0, y: h/2}}" 
                v-bind="{name: `${name}@${dir[0]}`, d: h*0.7, x, y, dir}"
                v-bind:show-tooltip="false"
                />
            <connection-point v-else-if="isActive"
                v-for="({x, y}, dir) in {
                    up1: {x: w*0.4, y: 0}, up2: {x: w*0.6, y: 0}, 
                    right1: {x: w, y: h*0.4}, right2: {x: w, y: h*0.6}, 
                    down1: {x: w*0.4, y: h}, down2: {x: w*0.6, y: h}, 
                    left1: {x: 0, y: h*0.4}, left2: {x: 0, y: h*0.6}
                }" 
                v-bind="{name: `${name}@${dir[0]}${dir[dir.length-1]}`, d: h*0.7, x, y, dir}"
                v-bind:show-tooltip="false"
                />
        </template>
        <style>
            .port-name {font-family: sans-serif; fill: white;}
            .port-name.disabled {fill: lightgray; opacity: 0.75;}
            .port-icon.body {stroke: white;}
            .status-indicator {fill: #b7f598; stroke: green; stroke-width: 1px}
            .connection-point-marker {fill: yellow; stroke: rgb(184, 169, 0);}
        </style>
        <props>
            <prop name="w" type="Number" required="true" default="25" category="Geometry" description="Port icon width"/>
            <prop name="h" type="Number" required="true" default="25" category="Geometry" description="Port icon height"/>
            <prop name="labelY" type="Number" category="Geometry" description="Port label vertical poisition"/>
            <prop name="prefix" type="String" default="" description="Port name prefix that may be stripped when displaying in the limited area"/>
            <prop name="font-size" type="Number" default="0.8" category="Presentation"/>
            <prop name="port-info" type="object" description="Various port configuration and state parameters">
                <subprop name="description" type="String" />
                <subprop name="media" type="String" choices="copper,fiber" description="The media type for the combo-port"/>
                <subprop name="speed" type="String" description="The current physical port speed"/>
                <subprop name="maxSpeed" type="String" description="The maximum physical port speed"/>
                <subprop name="operStatus" type="Boolean" description="The current port status"/>
                <subprop name="adminStatus" type="Boolean" description="The administrative port status"/>
                <subprop name="statusMonitoring" type="Boolean" description="Is the port status monitoring turned on?"/>
                <subprop name="speedMonitoring" type="Boolean" description="Is the port speed monitoring turned on?"/>
            </prop>
            <prop name="fiber-info" type="object" description="Various optical parameters of the individual fiber connected to the port">
                <subprop name="nFibers" type="Number" description="The number of fibers that may be connected to this port"/>
                <subprop name="wavelength" type="Number" description="The wave length of the beam transmitted from this port"/>
                <subprop name="signalDirection" type="String" choices="rx,tx" description="The direction of the signal in this fiber (transmit/receive)"/>
            </prop>
            <prop name="combo" type="String" choices="copper,fiber" category="Hardware" description="Indicates that the port is a (specified) part of the combo-port"/>
            <prop name="is-active" type="Boolean" default="true" category="Network" description="Indicates whether this part (media) of the combo port is active" />
        </props>
        <computed-props extend="MultiFiberPort">
            <computed-prop name="label0">props.combo ? String(props.name ?? "").replace(new RegExp(`\\(${props.combo[0]}\\)$`), '') : String(props.name ?? "")</computed-prop>
            <computed-prop name="label">computedProps.label0.replace(new RegExp('^'+props.prefix), '')</computed-prop>
            <computed-prop name="labelY">props.labelY ?? props.h * 0.8</computed-prop>
            <computed-prop name="title">
                props.name + 
                    (props.portInfo?.description ? ` ${props.portInfo.description}` : '') +
                    (props.portInfo?.speed ? ` (${props.portInfo.speed})` : '')
            </computed-prop>
        </computed-props>
    </component-class>

    <!-- A ferrule inside the optical plugin-module (currently not used) -->
    <component-class name="Ferrule" category=".ports">
        <template>
            <circle class="ferrule" v-bind:cx="cx" v-bind:cy="cy" v-bind:r="d/2" />
        </template>
        <props>
            <prop name="cx" type="Number" required="true" default="0" category="Geometry"/>
            <prop name="cy" type="Number" required="true" default="0" category="Geometry"/>
            <prop name="d" type="Number" required="true" default="25" category="Geometry"/>
        </props>
        <style>
            .ferrule {fill: #000000; stroke: #707070; stroke-width: 1px;}
        </style>
    </component-class>

    <!-- A port plugin-module: SFP, XFP etc. -->

    <component-class name="KeyedConnector" category=".ports">
        <props>
            <prop name="key-position" type="String" choices="top,bottom,left,right" default="top" category="Geometry" 
                  description="Key groove position"/>
        </props>
    </component-class>

    <component-class name="RectangularConnector" category=".ports">
        <template>
            <polyline v-if="nFibers === 1" v-bind:points="
                keyPosition === 'top' ?
                    `${cx+h*0.2},${cy-h*q} ${cx+w*q},${cy-h*q} ${cx+w*q},${cy+h*q}
                     ${cx-w*q},${cy+h*q}    ${cx-w*q},${cy-h*q} ${cx-h*0.2},${cy-h*q}`
                : keyPosition === 'bottom' ?
                    `${cx+h*0.2},${cy+h*q} ${cx+w*q},${cy+h*q} ${cx+w*q},${cy-h*q}
                     ${cx-w*q},${cy-h*q}    ${cx-w*q},${cy+h*q} ${cx-h*0.2},${cy+h*q}`
                : keyPosition === 'left' ?
                    `${cy-h*q},${cx+h*0.2} ${cy-h*q},${cx+w*q} ${cy+h*q},${cx+w*q}
                     ${cy+h*q},${cx-w*q}    ${cy-h*q},${cx-w*q} ${cy-h*q},${cx-h*0.2}`
                :
                    `${-cy+h*q+w},${cx+h*0.2} ${-cy+h*q+w},${cx+w*q}  ${-cy-h*q+w},${cx+w*q}
                     ${-cy-h*q+w},${cx-w*q}    ${-cy+h*q+w},${cx-w*q}  ${-cy+h*q+w},${cx-h*0.2}`
                "
                class="border" v-bind:stroke-width="strokeWidth"/>
            <template v-else="">
                <polyline v-bind:points="
                    keyPosition === 'top' ?
                        `${cx+h*0.25},${cy-h*q} ${cx+w*q},${cy-h*q} ${cx+w*q},${cy+h*q}
                         ${cx-w*q},${cy+h*q}    ${cx-w*q},${cy-h*q} ${cx-h*0.25},${cy-h*q}`
                    : keyPosition === 'bottom' ?
                        `${cx+h*0.25},${cy+h*q} ${cx+w*q},${cy+h*q} ${cx+w*q},${cy-h*q}
                         ${cx-w*q},${cy-h*q}    ${cx-w*q},${cy+h*q} ${cx-h*0.25},${cy+h*q}`
                    : keyPosition === 'left' ?
                        `${cy-h*q},${cx+h*0.25} ${cy-h*q},${cx+w*q} ${cy+h*q},${cx+w*q}
                         ${cy+h*q},${cx-w*q}    ${cy-h*q},${cx-w*q} ${cy-h*q},${cx-h*0.25}`
                    :
                        `${-cy+h*q+w},${cx+h*0.25} ${-cy+h*q+w},${cx+w*q}  ${-cy-h*q+w},${cx+w*q}
                         ${-cy-h*q+w},${cx-w*q}    ${-cy+h*q+w},${cx-w*q}  ${-cy+h*q+w},${cx-h*0.25}`
                    "
                    class="border" v-bind:stroke-width="strokeWidth"/>
                <polyline v-bind:points="
                    keyPosition === 'top' ?
                        `${cx+h*0.1},${cy-h*q} ${cx-h*0.1},${cy-h*q}`
                    : keyPosition === 'bottom' ?
                        `${cx+h*0.1},${cy+h*q} ${cx-h*0.1},${cy+h*q}`
                    : keyPosition === 'left' ?
                        `${cy-h*q},${cx+h*0.1} ${cy-h*q},${cx-h*0.1}`
                    :
                        `${-cy+h*q+w},${cx+h*0.1} ${-cy+h*q+w},${cx-h*0.1}`
                    "
                    class="border" v-bind:stroke-width="strokeWidth"/>
            </template>
        </template>
        <props extend="KeyedConnector">
            <prop name="cx" type="Number" required="true" default="0" category="Geometry"/>
            <prop name="cy" type="Number" required="true" default="0" category="Geometry"/>
            <prop name="w" type="Number" required="true" default="25" category="Geometry"/>
            <prop name="h" type="Number" required="true" default="25" category="Geometry"/>
            <prop name="strokeWidth" type="number" category="Geometry"/>
            <prop name="nFibers" type="Number" choices="1,2" default="1" category="Optics" description="The number of optical fibers"/>
        </props>
        <computed-props>
            <computed-prop name="q">0.4</computed-prop>
            <computed-prop name="strokeWidth">props.strokeWidth ?? Math.min(props.w, props.h)*0.12</computed-prop>
        </computed-props>
    </component-class>

    <component-class name="PluginModule" category=".ports">
        <extends base="RectangularConnector" />
        <style>
            .border {fill: none; stroke: #8998a9;}
        </style>
    </component-class>

    <!-- An RJ45 connector (for placing inside the port) -->
    <component-class name="RJ45" category=".ports">
        <extends base="RectangularConnector" v-bind:stroke-width="Math.min(w, h)*0.16" />
        <defs>
            <pattern id="kre:std:rj45-contacts-v" patternUnits="objectBoundingBox" width="0.125" height="1" viewBox="0 0 10 10" 
                preserveAspectRatio="none">
                <rect x="2" y="0" width="6" height="10" fill="#b28e01" />
            </pattern>
            <pattern id="kre:std:rj45-contacts-h" patternUnits="objectBoundingBox" width="1" height="0.125" viewBox="0 0 10 10" 
                preserveAspectRatio="none">
                <rect x="0" y="2" width="10" height="6" fill="#b28e01" />
            </pattern>
        </defs>
        <template>
            <rect v-bind:x="keyPosition === 'left' ? w*0.5 : w*0.2" 
                  v-bind:y="keyPosition === 'top' ? h*0.5 : h*0.2" 
                  v-bind:width="orientation === 'v' ? w*0.6 : h*0.3" 
                  v-bind:height="orientation === 'v' ? h*0.3 : w*0.6" 
                  v-bind:fill="`url(#kre:std:rj45-contacts-${orientation})`"/>
        </template>
        <computed-props>
            <computed-prop name="orientation">props.keyPosition === "top" || props.keyPosition === "bottom" ? "v" : "h"</computed-prop>
        </computed-props>
        <style>
            .border {fill: none; stroke: #597865;}
        </style>
    </component-class>

    <!-- RJ45 Port -->
    <component-class name="RJ45-Port" category=".ports">
        <extends base="Port" v-bind:w="d" v-bind:h="d">
            <Kre:RJ45 v-bind:cx="d/2" v-bind:cy="d/2" v-bind:w="d" v-bind:h="d" v-bind:key-position="keyPosition"/>
        </extends>
        <props extend="KeyedConnector" except="w,h">
            <prop name="d" type="Number" required="true" default="25" category="Geometry" description="Port icon width and height"/>
        </props>
        <computed-props>
            <computed-prop name="labelY">props.keyPosition == 'top' ? props.d * 0.7 :  props.d * 0.8</computed-prop>
        </computed-props>
    </component-class>

    <!-- SFP Port -->
    <component-class name="SFP-Port" category=".ports">
        <extends base="Port" v-bind:w="d" v-bind:h="d">
            <Kre:PluginModule v-bind:cx="d/2" v-bind:cy="d/2" v-bind:w="d" v-bind:h="d" v-bind:key-position="keyPosition" v-bind:n-fibers="nFibers"/>
        </extends>
        <props extend="KeyedConnector" except="w,h">
            <prop name="d" type="Number" required="true" default="25" category="Geometry" description="Port icon width and height"/>
        </props>
        <computed-props extend="MultiFiberPort">
            <computed-prop name="labelY">props.keyPosition == 'top' ? props.d * 0.7 :  props.d * 0.8</computed-prop>
        </computed-props>
    </component-class>

    <!-- XFP Port -->
    <component-class name="XFP-Port" category=".ports">
        <extends base="Port" v-bind:w="h*2.5" >
            <Kre:PluginModule v-bind:cx="h*1.25" v-bind:cy="h/2" v-bind:w="h*2.75" v-bind:h="h" v-bind:key-position="keyPosition" v-bind:n-fibers="nFibers" />
        </extends>
        <props extend="KeyedConnector" except="w"/>
        <computed-props extend="MultiFiberPort"/>
    </component-class>

    <!-- QSFP Port -->
    <component-class name="QSFP-Port" category=".ports">
        <extends base="Port" v-bind:w="h*2" >
            <Kre:PluginModule v-bind:cx="h" v-bind:cy="h/2" v-bind:w="h*2.3" v-bind:h="h" v-bind:key-position="keyPosition" v-bind:n-fibers="nFibers" />
        </extends>
        <props extend="KeyedConnector" except="w"/>
        <computed-props extend="MultiFiberPort"/>
    </component-class>

    <!-- Optical fiber ports -->
    
    <component-class name="WDM-Port" category=".port-abstractions">
        <computed-props>
            <computed-prop name="beamColor">
                props.fiberInfo?.wavelength === 1470 ? "#949494" :
                props.fiberInfo?.wavelength === 1490 ? "#6B0094" :
                props.fiberInfo?.wavelength === 1510 ? "#0d4be7" :
                props.fiberInfo?.wavelength === 1530 ? "#01df01" :
                props.fiberInfo?.wavelength === 1550 ? "#fffc57" :
                props.fiberInfo?.wavelength === 1570 ? "#FF950E" :
                props.fiberInfo?.wavelength === 1590 ? "#ff0f0f" :
                props.fiberInfo?.wavelength === 1610 ? "#CC6633" :
                    undefined
            </computed-prop>
        </computed-props>
    </component-class>


    <component-class name="FC-Port" category=".ports">
        <extends base="Port" v-bind:w="d" v-bind:h="d">
            <polygon class="nut" v-bind:transform="`translate(${r}, ${r})`" v-bind:stroke="beamColor ?? 'white'"
                v-bind:points="`0,${rNut}  ${rNut*cos60},${rNut/2}  ${rNut*cos60},${-rNut/2}
                                0,${-rNut} ${-rNut*cos60},${-rNut/2} ${-rNut*cos60},${rNut/2}`" />
            <circle class="cap" v-bind:cx="r" v-bind:cy="r" v-bind:r="r*0.6"/>
            <circle v-if="fiberInfo &amp;&amp; false" v-bind:cx="r" v-bind:cy="r" v-bind:r="r*0.55" fill="none" v-bind:stroke-width="r*0.2" v-bind:stroke="beamColor"/>
        </extends>
        <template>
            <template v-if="fiberInfo">
                <text v-bind:x="r" v-bind:y="0" text-anchor="middle" dominant-baseline="middle" v-bind:font-size="fontSize*d*0.75" class="fiber-info">
                    {{fiberInfo.signalDirection}}
                </text>
                <text v-bind:x="r" v-bind:y="d*1.1" text-anchor="middle" dominant-baseline="middle" v-bind:font-size="fontSize*d*0.75" class="fiber-info">
                    {{fiberInfo.wavelength}}
                </text>
            </template>
        </template>
        <props except="w,h">
            <prop name="d" type="Number" required="true" default="25" category="Geometry" description="Port icon width and height"/>
            <prop name="font-size" type="Number" default="0.5" category="Presentation"/>
        </props>
        <computed-props extend="WDM-Port">
            <computed-prop name="labelY">props.d*0.67</computed-prop>
            <computed-prop name="r">props.d*0.5</computed-prop>
            <computed-prop name="rNut">props.d*0.5</computed-prop>
            <computed-prop name="cos60">Math.sqrt(3)/2</computed-prop>
            <computed-prop name="fiberInfoPathID">`kre:port[${props.id},${props.name}]FiberInfoPath`</computed-prop>
        </computed-props>
        <style>
            .port-icon.body {fill: transparent; stroke: transparent;}
            .port-name {fill: white; font-weight: bold}
            .nut {fill: silver; }
            .cap {fill: #3d3d3d; stroke: #d00101; stroke-width: 2px}
            .fiber-info {fill: #3d3d3d;}
        </style>
    </component-class>

    <component-class name="FC-APC-Port" category=".ports">
        <extends base="FC-Port" />
        <style>
            .cap {stroke: #18b933;}
        </style>
    </component-class>

    <component-class name="SC-Port" category=".ports">
        <extends base="Port" v-bind:w="d" v-bind:h="d">
            <Kre:RectangularConnector v-bind:cx="d/2" v-bind:cy="d/2" v-bind:w="d" v-bind:h="d" v-bind:key-position="keyPosition"/>
            <circle v-if="ferruleVisible" class="ferrule" v-bind:cx="d/2" v-bind:cy="d/2" v-bind:r="d/8" />
        </extends>
        <props extend="KeyedConnector" except="w,h">
            <prop name="d" type="Number" required="true" default="25" category="Geometry" description="Port icon width and height"/>
            <prop name="ferruleVisible" type="Boolean" default="false"/>
        </props>
        <computed-props>
            <computed-prop name="labelY">props.keyPosition == 'top' ? props.d * 0.7 :  props.d * 0.8</computed-prop>
        </computed-props>
        <style>
            .RectangularConnector .border {fill: none; stroke: #057aff;}
            .ferrule {fill: #ababab; stroke: #707070; stroke-width: 1px;}
        </style>
    </component-class>

    <component-class name="SC-APC-Port" category=".ports">
        <extends base="SC-Port" />
        <style>
            .RectangularConnector .border {fill: none; stroke: #18b933;}
        </style>
    </component-class>

</kresmer-library>