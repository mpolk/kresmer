<?xml version="1.0" encoding="utf-8"?>
<?xml-model href="xsd/kresmer-library.xsd"?>
<!-- **************************************************************************>
 *                            ðŸ‘‘ KresMer ðŸ‘‘
 *       "Kreslennya Merezh" - network diagram editor and viewer
 *      Copyright (C) 2022-2024 Dmitriy Stepanenko. All Rights Reserved.
 * ___________________________________________________________________________
 *                        Patch-panels library
 *         This library contains graphics for various fiber optics closures.
<*************************************************************************** -->
<kresmer-library name="fiber-optics-closures" xmlns:Kre="Kre" xmlns:v-bind="v-bind" xmlns:v-on="v-on" xmlns:v-slot="v-slot">
    <import library="stdlib" />

    <component-class name="CableAttachmentTable" category="Passive equipment" version="2024072400">
        <template>
            <title v-if="comment">{{comment}}</title>
            <rect x="0" y="0" v-bind:width="width" v-bind:height="height" v-bind:fill="color" v-bind:stroke="strokeColor"/>
            <line v-bind="cableSepPos" v-bind:stroke="strokeColor"/>
            <text v-bind="captionPos" class="caption" v-bind:transform="`rotate(${captionRotation})`" v-bind:transform-origin="`${captionPos.x} ${captionPos.y}`">
                {{caption}}
            </text>
            <connection-point name="c" v-bind="cableCPPos" connection-id="out:*"/>
            <connection-indicator v-for="i in nFibers" v-bind:connection-id="i">
                <rect v-bind="cellBgPos(i)" class="fiber-label background" />
                <line v-if="i &lt; nFibers" v-bind="cellSepPos(i)" v-bind:stroke="strokeColor"/>
                <text v-bind="cellCenter(i)" v-bind:font-size="fiberFontSize" class="fiber-label">{{labels &amp;&amp; labels[i] ? `${i}: ${labels[i]}` : i}}</text>
                <connection-point v-bind:name="i" v-bind="cellCPPos(i)" v-bind:connection-id="`${i}`"/>
            </connection-indicator>
        </template>
        <props>
            <prop name="comment" type="String"/>
            <prop name="caption" type="String" description="Cable caption"/>
            <prop name="height" type="Number" category="Geometry" description="Table height"/>
            <prop name="width" type="Number" category="Geometry" description="Table width"/>
            <prop name="orientation" type="String" choices="left,right,up,down" required="true" default="left" category="Geometry" description="Table orientation: the direction fibers are open in" />
            <prop name="nFibers" type="Number" required="true" default="12" category="Hardware" description="The number of fibers"/>
            <prop name="firstFiber" type="Number" default="1" category="Network" description="The base number of the whole fiber range"/>
            <prop name="color" type="Color" default="#e8f7f7" category="Presentation"/>
            <prop name="strokeColor" type="Color" default="#9fd8e5" category="Presentation"/>
            <prop name="labels" type="Object" description="Fiber labels">
                <elements type="String"/>
            </prop>
        </props>
        <computed-props>
            <computed-prop name="defaultCellSize">30</computed-prop>
            <computed-prop name="captionHeight">0.8</computed-prop><!-- relative to the cell width -->
            <computed-prop name="height">
                props.height ?? ((props.orientation === "left" || props.orientation === "right") ? 
                    computedProps.defaultCellSize * props.nFibers : 
                    computedProps.defaultCellSize*(1+computedProps.captionHeight))
            </computed-prop>
            <computed-prop name="width">
                props.width ?? ((props.orientation === "left" || props.orientation === "right") ? 
                    computedProps.defaultCellSize*(1+computedProps.captionHeight) : 
                    computedProps.defaultCellSize * props.nFibers)
            </computed-prop>
            <computed-prop name="cellStep">
                props.orientation === "left" || props.orientation === "right" ? 
                    computedProps.height/props.nFibers : 
                    computedProps.width/props.nFibers
            </computed-prop>
            <computed-prop name="cellWidth">
                props.orientation === "left" || props.orientation === "right" ? 
                    computedProps.width/(1+computedProps.captionHeight) : 
                    computedProps.height/(1+computedProps.captionHeight)
            </computed-prop>
            <computed-prop name="fiberFontSize">
                props.orientation === "left" || props.orientation === "right" ? 
                    computedProps.cellStep*0.6 : 
                    computedProps.cellWidth*0.6
            </computed-prop>
            <computed-prop name="captionPos">
                {
                    x:  props.orientation ==="left" ? computedProps.width * (1+computedProps.captionHeight/2)/(1+computedProps.captionHeight) :
                        props.orientation ==="right" ? computedProps.width * computedProps.captionHeight/2/(1+computedProps.captionHeight) :
                            computedProps.width / 2,
                    y:  props.orientation ==="up" ? computedProps.height * (1+computedProps.captionHeight/2)/(1+computedProps.captionHeight) :
                        props.orientation ==="down" ? computedProps.height * computedProps.captionHeight/2/(1+computedProps.captionHeight) :
                            computedProps.height / 2
                }
            </computed-prop>
            <computed-prop name="captionRotation">
                props.orientation ==="left" ? -90 :
                props.orientation ==="right" ? 90 :
                    0
            </computed-prop>
            <computed-prop name="captionFontSize">
                computedProps.cellWidth*0.25
            </computed-prop>
            <computed-prop name="cableSepPos">
                props.orientation === "left" ? {
                    x1: computedProps.width/(1+computedProps.captionHeight), y1: 0, 
                    x2: computedProps.width/(1+computedProps.captionHeight), y2: computedProps.height
                } :
                props.orientation === "right" ? {
                    x1: computedProps.width*computedProps.captionHeight/(1+computedProps.captionHeight), y1: 0, 
                    x2: computedProps.width*computedProps.captionHeight/(1+computedProps.captionHeight), y2: computedProps.height
                } :
                props.orientation === "up" ? {
                    x1: 0, y1: computedProps.height/(1+computedProps.captionHeight), 
                    x2: computedProps.width, y2: computedProps.height/(1+computedProps.captionHeight)
                } :
                {
                    x1: 0, y1: computedProps.height*computedProps.captionHeight/(1+computedProps.captionHeight), 
                    x2: computedProps.width, y2: computedProps.height*computedProps.captionHeight/(1+computedProps.captionHeight)
                }
            </computed-prop>
            <computed-prop name="cableCPPos">
                {
                    x:  props.orientation ==="left" ? computedProps.width :
                        props.orientation ==="right" ? 0 :
                            computedProps.width / 2,
                    y:  props.orientation ==="up" ? computedProps.height :
                        props.orientation ==="down" ? 0 :
                            computedProps.height / 2,
                    dir: props.orientation ==="left" ? 0 :
                        props.orientation ==="right" ? 180 :
                        props.orientation ==="up" ? 90 :
                        -90,
                    d: computedProps.cellStep/2,
                }
            </computed-prop>
        </computed-props>
        <functions>
            <function name="cellCenter" params="i">
                const pos =
                    props.orientation === "left"  ? {x: computedProps.cellWidth/2, y: computedProps.cellStep*(i-0.5)} :
                    props.orientation === "right" ? {x: computedProps.cellWidth/2 + computedProps.width*computedProps.captionHeight/(1+computedProps.captionHeight), y: computedProps.cellStep*(i-0.5)} :
                    props.orientation === "up"    ? {x: computedProps.cellStep*(i-0.5), y: computedProps.cellWidth/2} :
                                                    {x: computedProps.cellStep*(i-0.5), y: computedProps.cellWidth/2 + computedProps.height*computedProps.captionHeight/(1+computedProps.captionHeight)};
                return pos;
            </function>
            <function name="cellSepPos" params="i">
                const c = fn$.cellCenter(i);
                const pos =
                    props.orientation === "left" || props.orientation === "right" ? 
                        {x1: c.x - computedProps.cellWidth/2, y1: c.y + computedProps.cellStep/2,  x2: c.x + computedProps.cellWidth/2, y2: c.y + computedProps.cellStep/2} :
                        {x1: c.x + computedProps.cellStep/2,  y1: c.y - computedProps.cellWidth/2, x2: c.x + computedProps.cellStep/2,  y2: c.y + computedProps.cellWidth/2};
                return pos;
            </function>
            <function name="cellBgPos" params="i">
                const c1 = fn$.cellCenter(i-1);
                const pos =
                    props.orientation === "left" || props.orientation === "right" ? 
                        {x: c1.x - computedProps.cellWidth/2, y: c1.y + computedProps.cellStep/2,  width: computedProps.cellWidth, height: computedProps.cellStep} :
                        {x: c1.x + computedProps.cellStep/2,  y: c1.y - computedProps.cellWidth/2, width: computedProps.cellStep,  height: computedProps.cellWidth};
                return pos;
            </function>
            <function name="cellCPPos" params="i">
                const c = fn$.cellCenter(i);
                const pos =
                    props.orientation === "left"  ? {x: c.x - computedProps.cellWidth/2, y: c.y, dir: 180} :
                    props.orientation === "right" ? {x: c.x + computedProps.cellWidth/2, y: c.y, dir: 0} :
                    props.orientation === "up"    ? {x: c.x, y: c.y - computedProps.cellWidth/2, dir: -90} :
                        {x: c.x,  y: c.y + computedProps.cellWidth/2, dir: 90};
                pos.d = computedProps.cellStep/2;
                return pos;
            </function>
        </functions>
        <style>
            .fiber-label, .caption {fill: #333333; font-family: sans-serif; text-anchor: middle; dominant-baseline: central}
            .fiber-label.background {fill: none}
            .highlighted .fiber-label.background {fill: lightblue}
        </style>
    </component-class>

    <!-- Fiber Optics Splice Closure -->
    <component-class name="FOSC" category="Passive equipment" version="2024072400">
        <template>
            <rect v-bind:width="width" v-bind:height="height" class="body"/>
            <Kre:CableAttachmentTable v-for="(cableInfo, i) in leftCables" 
                v-bind:x="0" v-bind:y="0" v-bind:width="atw*width" v-bind:height="atw*height"
                v-bind:caption="cableInfo.cableName" orientation="right"
                v-bind:labels="cableInfo.fiberLabels"
                />
            <adjustment-ruler target-prop="height" v-bind:x1="0" v-bind:y1="0" v-bind:x2="0" v-bind:y2="height" fixed-end="1"/>
            <adjustment-ruler target-prop="width" v-bind:x1="0" v-bind:y1="0" v-bind:x2="width" v-bind:y2="0" fixed-end="1"/>
        </template>
        <props>
            <prop name="width" type="Number" category="Geometry" default="400"/>
            <prop name="height" type="Number" category="Geometry" default="400"/>
            <prop name="cables" type="Object" category="Network">
                <elements type="Object">
                    <subprop name="cableName" type="String"/>
                    <subprop name="position" type="String" choices="left,top,right,bottom" description="Visual position of the cable input" required="true"/>
                    <subprop name="nFibers" type="Number" required="true" description="The number of fibers in the cable"/>
                    <subprop name="fiberLabels" type="Object">
                        <elements type="String"/>
                    </subprop>
                </elements>
            </prop>
        </props>
        <computed-props>
            <computed-prop name="atw">1/3</computed-prop>
            <computed-prop name="leftCables">Object.values(props.cables).filter(v =&gt; v.position === "left")</computed-prop>
            <computed-prop name="nLeftCables">computedProps.leftCables.length</computed-prop>
        </computed-props>
        <style>
            .body {fill: #e6e6e6; stroke: gray; stroke-width: 1px; }
        </style>
    </component-class>

</kresmer-library>