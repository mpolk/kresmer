<?xml version="1.0" encoding="utf-8"?>
<?xml-model href="xsd/kresmer-library.xsd"?>
<!-- **************************************************************************>
 *                            ðŸ‘‘ KresMer ðŸ‘‘
 *       "Kreslennya Merezh" - network diagram editor and viewer
 *      Copyright (C) 2022-2024 Dmitriy Stepanenko. All Rights Reserved.
 * ___________________________________________________________________________
 *                        Patch-panels library
 *         This library contains graphics for various fiber optics closures.
<*************************************************************************** -->

<!DOCTYPE inline_dtd[<!ENTITY nbsp "&#160;">]>

<kresmer-library name="fiber-optics-closures" xmlns="kresmer-library" xmlns:kre="kresmer-builtin-elements" xmlns:Kre="kresmer-user-defined-elements" xmlns:v-bind="v-bind" xmlns:v-on="v-on" xmlns:v-slot="v-slot">
    <import library="stdlib" />

    <component-class name="CableAttachmentTable" category="Passive equipment" version="2024090202">
        <template>
            <title v-if="comment">{{comment}}</title>
            <rect x="0" y="0" v-bind:width="width" v-bind:height="height" v-bind:fill="color" v-bind:stroke="strokeColor"/>
            <line v-bind="cableSepPos" v-bind:stroke="strokeColor"/>
            <template v-if="caption">
                <a v-if="captionHref" class="caption href" v-bind:href="kre$href(captionHref)">
                    <text v-bind="captionPos" v-bind:font-size="captionFontSize"
                          v-bind:transform="`rotate(${captionRotation})`" v-bind:transform-origin="`${captionPos.x} ${captionPos.y}`">
                        {{caption}}
                    </text>
                </a>
                <text v-else="" v-bind="captionPos" class="caption"  v-bind:font-size="captionFontSize"
                      v-bind:transform="`rotate(${captionRotation})`" v-bind:transform-origin="`${captionPos.x} ${captionPos.y}`">
                    {{caption}}
                </text>
            </template>
            <kre:connection-point v-bind:name="`${connIdPrefix ? connIdPrefix + ':' : ''}c`" v-bind="cableCPPos" connection-id="out:*"/>
            <kre:connection-indicator v-for="i in nFibers" v-bind:connection-id="connID(i)">
                <rect v-bind="cellBgPos(i)" class="fiber-label background" />
                <line v-if="i &lt; nFibers" v-bind="cellSepPos(i)" v-bind:stroke="strokeColor"/>
                <text v-if="labels &amp;&amp; labels[i]"
                      v-bind="cellLabelPos(i)" v-bind:font-size="fiberFontSize"
                      v-bind:transform="labelTransform" v-bind:transform-origin="`${cellLabelPos(i).x} ${cellLabelPos(i).y}`"
                      class="fiber-label">&nbsp;{{i}}: {{labels[i]}}</text>
                <text v-else=""
                      v-bind="cellCenter(i)" v-bind:font-size="fiberFontSize"
                      v-bind:transform="labelTransform" v-bind:transform-origin="`${cellCenter(i).x} ${cellCenter(i).y}`"
                      class="fiber-label centered">{{i}}</text>
                <kre:connection-point v-bind:name="connID(i)" v-bind="cellCPPos(i)" v-bind:connection-id="connID(i)"/>
            </kre:connection-indicator>
            <kre:adjustment-ruler target-prop="captionHeight" v-bind="captionHeightRulerPos"/>
        </template>
        <props>
            <prop name="comment" type="String"/>
            <prop name="caption" type="String" description="Cable caption"/>
            <prop name="caption-href" type="String" description="Optional hyperlink for the caption" />
            <prop name="height" type="Number" category="Geometry" description="Table height"/>
            <prop name="width" type="Number" category="Geometry" description="Table width"/>
            <prop name="orientation" type="String" choices="left,right,up,down" required="true" default="left" category="Geometry" description="Table orientation: the direction fibers are open in" />
            <prop name="nFibers" type="Number" required="true" default="12" category="Hardware" description="The number of fibers"/>
            <prop name="firstFiber" type="Number" default="1" category="Network" description="The base number of the whole fiber range"/>
            <prop name="color" type="Color" default="#e8f7f7" category="Presentation"/>
            <prop name="strokeColor" type="Color" default="#9fd8e5" category="Presentation"/>
            <prop name="labels" type="Object" description="Fiber labels">
                <elements type="String"/>
            </prop>
            <prop name="connIdPrefix" type="String" category="Hidden" description="The prefix for connection ids for the fibers"/>
            <prop name="captionHeight" type="Number" category="Geometry" default="0.8" description="Caption height relative to the cell width"/>
        </props>
        <computed-props>
            <computed-prop name="defaultCellSize">30</computed-prop>
            <computed-prop name="height">
                props.height ?? ((props.orientation === "left" || props.orientation === "right") ? 
                    computedProps.defaultCellSize * props.nFibers : 
                    computedProps.defaultCellSize*(1+props.captionHeight))
            </computed-prop>
            <computed-prop name="width">
                props.width ?? ((props.orientation === "left" || props.orientation === "right") ? 
                    computedProps.defaultCellSize*(1+props.captionHeight) : 
                    computedProps.defaultCellSize * props.nFibers)
            </computed-prop>
            <computed-prop name="cellStep">
                props.orientation === "left" || props.orientation === "right" ? 
                    computedProps.height/props.nFibers : 
                    computedProps.width/props.nFibers
            </computed-prop>
            <computed-prop name="cellWidth">
                props.orientation === "left" || props.orientation === "right" ? 
                    computedProps.width/(1+props.captionHeight) : 
                    computedProps.height/(1+props.captionHeight)
            </computed-prop>
            <computed-prop name="fiberFontSize">computedProps.cellStep*0.6</computed-prop>
            <computed-prop name="captionPos">
                {
                    x:  props.orientation ==="left" ? computedProps.width * (1+props.captionHeight/2)/(1+props.captionHeight) :
                        props.orientation ==="right" ? computedProps.width * props.captionHeight/2/(1+props.captionHeight) :
                            computedProps.width / 2,
                    y:  props.orientation ==="up" ? computedProps.height * (1+props.captionHeight/2)/(1+props.captionHeight) :
                        props.orientation ==="down" ? computedProps.height * props.captionHeight/2/(1+props.captionHeight) :
                            computedProps.height / 2
                }
            </computed-prop>
            <computed-prop name="captionRotation">
                props.orientation ==="left" ? -90 :
                props.orientation ==="right" ? 90 :
                    0
            </computed-prop>
            <computed-prop name="captionFontSize">
                props.orientation === "left" || props.orientation === "right" ? 
                    computedProps.width*props.captionHeight/(1+props.captionHeight) * 0.6 : 
                    computedProps.height*props.captionHeight/(1+props.captionHeight) * 0.6
            </computed-prop>
            <computed-prop name="cableSepPos">
                props.orientation === "left" ? {
                    x1: computedProps.width/(1+props.captionHeight), y1: 0, 
                    x2: computedProps.width/(1+props.captionHeight), y2: computedProps.height
                } :
                props.orientation === "right" ? {
                    x1: computedProps.width*props.captionHeight/(1+props.captionHeight), y1: 0, 
                    x2: computedProps.width*props.captionHeight/(1+props.captionHeight), y2: computedProps.height
                } :
                props.orientation === "up" ? {
                    x1: 0, y1: computedProps.height/(1+props.captionHeight), 
                    x2: computedProps.width, y2: computedProps.height/(1+props.captionHeight)
                } :
                {
                    x1: 0, y1: computedProps.height*props.captionHeight/(1+props.captionHeight), 
                    x2: computedProps.width, y2: computedProps.height*props.captionHeight/(1+props.captionHeight)
                }
            </computed-prop>
            <computed-prop name="captionHeightRulerPos">
                props.orientation === "left" ? {
                    x1: computedProps.width/(1+props.captionHeight), y1: 0,
                    x2: computedProps.width, y2: 0,
                    fixedEnd: 1,
                } :
                props.orientation === "right" ? {
                    x1: 0, y1: 0, 
                    x2: computedProps.width*props.captionHeight/(1+props.captionHeight), y2: 0,
                    fixedEnd: 1,
                } :
                props.orientation === "up" ? {
                    x2: 0, y2: computedProps.height, 
                    x1: 0, y1: computedProps.height/(1+props.captionHeight),
                    fixedEnd: 2,
                } :
                {
                    x1: 0, y1: 0, 
                    x2: 0, y2: computedProps.height*props.captionHeight/(1+props.captionHeight),
                    fixedEnd: 1,
                }
            </computed-prop>
            <computed-prop name="cableCPPos">
                {
                    x:  props.orientation ==="left" ? computedProps.width :
                        props.orientation ==="right" ? 0 :
                            computedProps.width / 2,
                    y:  props.orientation ==="up" ? computedProps.height :
                        props.orientation ==="down" ? 0 :
                            computedProps.height / 2,
                    dir: props.orientation ==="left" ? 0 :
                        props.orientation ==="right" ? 180 :
                        props.orientation ==="up" ? 90 :
                        -90,
                    d: computedProps.cellStep/2,
                }
            </computed-prop>
            <computed-prop name="labelTransform">
                props.orientation === "up" || props.orientation === "down" ?
                    "rotate(-90)" :
                    undefined
            </computed-prop>
        </computed-props>
        <functions>
            <function name="connID" params="i">
                return `${props.connIdPrefix ? props.connIdPrefix + ':' : ''}${i}`;
            </function>
            <function name="cellCenter" params="i">
                const pos =
                    props.orientation === "left"  ? {x: computedProps.cellWidth/2, y: computedProps.cellStep*(i-0.5)} :
                    props.orientation === "right" ? {x: computedProps.cellWidth/2 + computedProps.width*props.captionHeight/(1+props.captionHeight), y: computedProps.cellStep*(i-0.5)} :
                    props.orientation === "up"    ? {x: computedProps.cellStep*(i-0.5), y: computedProps.cellWidth/2} :
                                                    {x: computedProps.cellStep*(i-0.5), y: computedProps.cellWidth/2 + computedProps.height*props.captionHeight/(1+props.captionHeight)};
                return pos;
            </function>
            <function name="cellSepPos" params="i">
                const c = fn$.cellCenter(i);
                const pos =
                    props.orientation === "left" || props.orientation === "right" ? 
                        {x1: c.x - computedProps.cellWidth/2, y1: c.y + computedProps.cellStep/2,  x2: c.x + computedProps.cellWidth/2, y2: c.y + computedProps.cellStep/2} :
                        {x1: c.x + computedProps.cellStep/2,  y1: c.y - computedProps.cellWidth/2, x2: c.x + computedProps.cellStep/2,  y2: c.y + computedProps.cellWidth/2};
                return pos;
            </function>
            <function name="cellBgPos" params="i">
                const c1 = fn$.cellCenter(i-1);
                const pos =
                    props.orientation === "left" || props.orientation === "right" ? 
                        {x: c1.x - computedProps.cellWidth/2, y: c1.y + computedProps.cellStep/2,  width: computedProps.cellWidth, height: computedProps.cellStep} :
                        {x: c1.x + computedProps.cellStep/2,  y: c1.y - computedProps.cellWidth/2, width: computedProps.cellStep,  height: computedProps.cellWidth};
                return pos;
            </function>
            <function name="cellCPPos" params="i">
                const c = fn$.cellCenter(i);
                const pos =
                    props.orientation === "left"  ? {x: c.x - computedProps.cellWidth/2, y: c.y, dir: 180} :
                    props.orientation === "right" ? {x: c.x + computedProps.cellWidth/2, y: c.y, dir: 0} :
                    props.orientation === "up"    ? {x: c.x, y: c.y - computedProps.cellWidth/2, dir: -90} :
                        {x: c.x,  y: c.y + computedProps.cellWidth/2, dir: 90};
                pos.d = computedProps.cellStep/2;
                return pos;
            </function>
            <function name="cellLabelPos" params="i">
                const c = fn$.cellCenter(i);
                const pos =
                    props.orientation === "left"  ? {x: c.x + computedProps.cellWidth/2, y: c.y} :
                    props.orientation === "right" ? {x: c.x - computedProps.cellWidth/2, y: c.y} :
                    props.orientation === "up"    ? {x: c.x, y: c.y + computedProps.cellWidth/2} :
                        {x: c.x,  y: c.y - computedProps.cellWidth/2};
                pos.d = computedProps.cellStep/2;
                return pos;
            </function>
        </functions>
        <style>
            .fiber-label {fill: #333333; font-family: sans-serif; dominant-baseline: central}
            .fiber-label.centered {text-anchor: middle;}
            .caption {fill: #333333; font-family: sans-serif; text-anchor: middle; dominant-baseline: central}
            .caption.href {text-decoration: none}
            .caption.href:hover {text-decoration: underline}
            .fiber-label.background {fill: transparent}
            .highlighted .fiber-label.background {fill: lightblue}
        </style>
    </component-class>


    <!-- Fiber Optics Splice Closure -->
    <component-class name="FOSC" category="Passive equipment" version="2024073101">
        <template>
            <rect v-bind:width="width" v-bind:height="height" class="body"/>
            <Kre:CableAttachmentTable v-for="(cableInfo, i) in leftCables" 
                v-bind:conn-id-prefix="`l${i}`"
                v-bind:x="0" v-bind:y="lY(i-1)" v-bind:width="lWidth" v-bind:height="cableInfo.nFibers*lStep"
                v-bind:caption="cableInfo.cableName" v-bind:captionHeight="ltch" v-bind:caption-href="cableInfo.cableHref"
                v-bind:nFibers="cableInfo.nFibers" orientation="right"
                v-bind:labels="cableInfo.fiberLabels"
                />
            <Kre:CableAttachmentTable v-for="(cableInfo, i) in rightCables" 
                v-bind:conn-id-prefix="`r${i}`"
                v-bind:x="x1" v-bind:y="rY(i-1)" v-bind:width="rWidth" v-bind:height="cableInfo.nFibers*rStep"
                v-bind:caption="cableInfo.cableName" v-bind:captionHeight="rtch" v-bind:caption-href="cableInfo.cableHref"
                v-bind:nFibers="cableInfo.nFibers" orientation="left"
                v-bind:labels="cableInfo.fiberLabels"
                />
            <Kre:CableAttachmentTable v-for="(cableInfo, i) in topCables" 
                v-bind:conn-id-prefix="`t${i}`"
                v-bind:x="tX(i-1)" v-bind:y="0" v-bind:width="cableInfo.nFibers*tStep" v-bind:height="tHeight"
                v-bind:caption="cableInfo.cableName" v-bind:captionHeight="ttch" v-bind:caption-href="cableInfo.cableHref"
                v-bind:nFibers="cableInfo.nFibers" orientation="down"
                v-bind:labels="cableInfo.fiberLabels"
                />
            <Kre:CableAttachmentTable v-for="(cableInfo, i) in bottomCables" 
                v-bind:conn-id-prefix="`b${i}`"
                v-bind:x="bX(i-1)" v-bind:y="height-bHeight" v-bind:width="cableInfo.nFibers*bStep" v-bind:height="bHeight"
                v-bind:caption="cableInfo.cableName" v-bind:captionHeight="btch" v-bind:caption-href="cableInfo.cableHref"
                v-bind:nFibers="cableInfo.nFibers" orientation="up"
                v-bind:labels="cableInfo.fiberLabels"
                />
            <kre:adjustment-ruler v-if="nLeftCables" target-prop="ltch" v-bind:x1="0" v-bind:y1="height/2" v-bind:x2="lWidth*ltch/(1+ltch)" v-bind:y2="height/2" fixed-end="1"/>
            <kre:adjustment-ruler v-if="nRightCables" target-prop="rtch" v-bind:x1="width" v-bind:y1="height/2" v-bind:x2="width - rWidth*rtch/(1+rtch)" v-bind:y2="height/2" fixed-end="1"/>
            <kre:adjustment-ruler v-if="nTopCables" target-prop="ttch" v-bind:x1="width/2" v-bind:y1="0" v-bind:x2="width/2" v-bind:y2="tHeight*ttch/(1+ttch)" fixed-end="1"/>
            <kre:adjustment-ruler v-if="nBottomCables" target-prop="btch" v-bind:x1="width/2" v-bind:y1="height" v-bind:x2="width/2" v-bind:y2="height - bHeight*btch/(1+btch)" fixed-end="1"/>
            <kre:adjustment-ruler target-prop="ltw" v-bind:x1="0" v-bind:y1="height" v-bind:x2="lWidth" v-bind:y2="height" fixed-end="1"/>
            <kre:adjustment-ruler target-prop="rtw" v-bind:x1="width-rWidth" v-bind:y1="height" v-bind:x2="width" v-bind:y2="height" fixed-end="2"/>
            <kre:adjustment-ruler target-prop="tth" v-bind:x1="width" v-bind:y1="0" v-bind:x2="width" v-bind:y2="tHeight" fixed-end="1"/>
            <kre:adjustment-ruler target-prop="bth" v-bind:x1="width" v-bind:y1="height" v-bind:x2="width" v-bind:y2="height-bHeight" fixed-end="1"/>
            <kre:adjustment-ruler target-prop="height" v-bind:x1="0" v-bind:y1="0" v-bind:x2="0" v-bind:y2="height" fixed-end="1"/>
            <kre:adjustment-ruler target-prop="width" v-bind:x1="0" v-bind:y1="0" v-bind:x2="width" v-bind:y2="0" fixed-end="1"/>
        </template>
        <props>
            <prop name="width" type="Number" category="Geometry" default="400" required="true"/>
            <prop name="height" type="Number" category="Geometry" default="400" required="true"/>
            <prop name="ltw" type="Number" category="Geometry" default="0.3333333" description="Left cable attachment tables width (relative)"/>
            <prop name="rtw" type="Number" category="Geometry" default="0.3333333" description="Right cable attachment tables width (relative)"/>
            <prop name="tth" type="Number" category="Geometry" default="0.3333333" description="Top cable attachment tables height (relative)"/>
            <prop name="bth" type="Number" category="Geometry" default="0.3333333" description="Bottom cable attachment tables height (relative)"/>
            <prop name="ltch" type="Number" category="Geometry" default="0.8" description="Left cable attachment tables caption height (relative)"/>
            <prop name="rtch" type="Number" category="Geometry" default="0.8" description="Right cable attachment tables caption height (relative)"/>
            <prop name="ttch" type="Number" category="Geometry" default="0.8" description="Top cable attachment tables caption height (relative)"/>
            <prop name="btch" type="Number" category="Geometry" default="0.8" description="Bottom cable attachment tables caption height (relative)"/>
            <prop name="cables" type="Object" category="Network">
                <elements type="Object">
                    <subprop name="cableName" type="String"/>
                    <subprop name="cableHref" type="String" description="Optional hyperlink for the cable caption" />
                    <subprop name="position" type="String" choices="left,top,right,bottom" description="Visual position of the cable input" required="true"/>
                    <subprop name="nFibers" type="Number" required="true" description="The number of fibers in the cable"/>
                    <subprop name="fiberLabels" type="Object">
                        <elements type="String"/>
                    </subprop>
                </elements>
            </prop>
        </props>
        <computed-props>
            <computed-prop name="leftCables">Object.values(props.cables).filter(v =&gt; v.position === "left")</computed-prop>
            <computed-prop name="nLeftCables">computedProps.leftCables.length</computed-prop>
            <computed-prop name="nLeftFibers">computedProps.leftCables.reduce((acc, cable) =&gt; acc + cable.nFibers, 0)</computed-prop>

            <computed-prop name="rightCables">Object.values(props.cables).filter(v =&gt; v.position === "right")</computed-prop>
            <computed-prop name="nRightCables">computedProps.rightCables.length</computed-prop>
            <computed-prop name="nRightFibers">computedProps.rightCables.reduce((acc, cable) =&gt; acc + cable.nFibers, 0)</computed-prop>

            <computed-prop name="topCables">Object.values(props.cables).filter(v =&gt; v.position === "top")</computed-prop>
            <computed-prop name="nTopCables">computedProps.topCables.length</computed-prop>
            <computed-prop name="nTopFibers">computedProps.topCables.reduce((acc, cable) =&gt; acc + cable.nFibers, 0)</computed-prop>

            <computed-prop name="bottomCables">Object.values(props.cables).filter(v =&gt; v.position === "bottom")</computed-prop>
            <computed-prop name="nBottomCables">computedProps.bottomCables.length</computed-prop>
            <computed-prop name="nBottomFibers">computedProps.bottomCables.reduce((acc, cable) =&gt; acc + cable.nFibers, 0)</computed-prop>

            <computed-prop name="lWidth">computedProps.nLeftCables ? props.width*props.ltw : 0</computed-prop>
            <computed-prop name="rWidth">computedProps.nRightCables ? props.width*props.rtw : 0</computed-prop>
            <computed-prop name="tHeight">computedProps.nTopCables ? props.height*props.tth : 0</computed-prop>
            <computed-prop name="bHeight">computedProps.nBottomCables ? props.height*props.bth : 0</computed-prop>

            <computed-prop name="x0">computedProps.lWidth</computed-prop>
            <computed-prop name="y0">computedProps.tHeight</computed-prop>
            <computed-prop name="x1">props.width - computedProps.rWidth</computed-prop>
            <computed-prop name="y1">props.height - computedProps.bHeight</computed-prop>
            <computed-prop name="intW">computedProps.x1 - computedProps.x0</computed-prop>
            <computed-prop name="intH">computedProps.y1 - computedProps.y0</computed-prop>

            <computed-prop name="lStep">computedProps.intH / computedProps.nLeftFibers</computed-prop>
            <computed-prop name="rStep">computedProps.intH / computedProps.nRightFibers</computed-prop>
            <computed-prop name="tStep">computedProps.intW / computedProps.nTopFibers</computed-prop>
            <computed-prop name="bStep">computedProps.intW / computedProps.nBottomFibers</computed-prop>
        </computed-props>
        <functions>
            <function name="lY" params="i">
                return computedProps.y0 + computedProps.leftCables.slice(0, i).reduce((acc, cable) =&gt; acc + cable.nFibers, 0)*computedProps.lStep
            </function>
            <function name="rY" params="i">
                return computedProps.y0 + computedProps.rightCables.slice(0, i).reduce((acc, cable) =&gt; acc + cable.nFibers, 0)*computedProps.rStep
            </function>
            <function name="tX" params="i">
                return computedProps.x0 + computedProps.topCables.slice(0, i).reduce((acc, cable) =&gt; acc + cable.nFibers, 0)*computedProps.tStep
            </function>
            <function name="bX" params="i">
                return computedProps.x0 + computedProps.bottomCables.slice(0, i).reduce((acc, cable) =&gt; acc + cable.nFibers, 0)*computedProps.bStep
            </function>
        </functions>
        <style>
            .body {fill: #e6e6e6; stroke: gray; stroke-width: 1px; }
        </style>
    </component-class>

</kresmer-library>