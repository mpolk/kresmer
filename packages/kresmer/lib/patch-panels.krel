<?xml version="1.0" encoding="utf-8"?>
<?xml-model href="xsd/kresmer-library.xsd"?>
<!-- **************************************************************************>
 *                            ðŸ‘‘ KresMer ðŸ‘‘
 *       "Kreslennya Merezh" - network diagram editor and viewer
 *      Copyright (C) 2022-2023 Dmitriy Stepanenko. All Rights Reserved.
 * ___________________________________________________________________________
 *                        Patch-panels library
 *         This library contains graphics for various patch-panels.
<*************************************************************************** -->
<kresmer-library name="patch-panels" xmlns:Kre="Kre" xmlns:v-bind="v-bind" xmlns:v-on="v-on" xmlns:v-slot="v-slot">

    <component-class name="PatchPanel" category="Passive equipment">
        <template>
            <title v-if="comment">{{comment}}</title>
            <rect x="0" y="0" v-bind:width="w" v-bind:height="h" v-bind:fill="color" v-bind:stroke="strokeColor"/>
            <template v-if="portLabelPosition &amp;&amp; portLabelPosition !== 'none'">
                <svg v-for="i in nPorts" class="port-label" v-bind:class="{[`row${(i-1)%nPortRows}`]: true}"
                    v-bind:x="firstLabelX + Number(orientation==='horizontal')*(i-1)*labelHeight"
                    v-bind:y="firstLabelY + Number(orientation==='vertical')*(i-1)*labelHeight"
                    v-bind:width="orientation === 'vertical' ? labelWidth : labelHeight" 
                    v-bind:height="orientation === 'vertical' ? labelHeight : labelWidth"
                    >
                    <rect class="pad" x="0" y="0" width="100%" height="100%"/>
                    <rect v-if="i === 1" class="frame" x="0" y="0" width="100%" height="100%"/>
                    <template v-else="">
                        <line class="frame" x1="0" y1="0" x2="0" y2="100%"/>
                        <line class="frame" x1="0" y1="100%" x2="100%" y2="100%"/>
                        <line class="frame" x1="100%" y1="100%" x2="100%" y2="0"/>
                    </template>
                    <text v-if="orientation === 'vertical'" v-bind:x="labelHeight*0.4" v-bind:y="labelHeight*0.8" v-bind:font-size="labelFontSize">{{i}} {{portLabels[i]}}</text>
                    <text v-else="" v-bind:x="labelHeight*0.8" v-bind:y="labelWidth - labelHeight*0.4" 
                          v-bind:transform="`rotate(-90, ${labelHeight*0.8}, ${labelWidth - labelHeight*0.4})`" 
                          v-bind:font-size="labelFontSize">{{i}} {{portLabels[i]}}</text>
                </svg>
            </template>
            <template v-for="i in nPorts/nPortRows">
                <component v-for="j in nPortRows" v-bind:is="portClass" 
                    v-bind:x="height * portSize * (padding + (1+interPortGap)*(orientation === 'horizontal' ? (i-1+(portLayout==='zigzag' ? 0.5 : 0)*(1-j%2)) : (j-1)))" 
                    v-bind:y="height * portSize * (padding + (1+interPortGap)*(orientation === 'horizontal' ? (j-1) : (i-1+(portLayout==='zigzag' ? 0.5 : 0)*(1-j%2))))" 
                    v-bind:d="portSize*height"
                    v-bind:name="firstPort - 1 + (i-1)*nPortRows + j"
                    v-bind:fiber-info="fibersInfo ? fibersInfo[firstPort - 1 + (i-1)*nPortRows + j] : undefined"
                    v-bind:key-position="orientation === 'horizontal' ? 'top' : 'right'"
                    />
            </template>
            <connection-point
                v-for="({x, y}, dir) in {up: {x: w/2, y: 0}, right: {x: w, y: h/2}, down: {x: w/2, y: h}, left: {x: 0, y: h/2}}" 
                v-bind="{name: `${dir[0]}`, d: height*0.2, x, y, dir}" />
        </template>
        <props>
            <prop name="comment" type="String" description="Device general info"/>
            <prop name="height" type="Number" category="Geometry" description="Panel height - always perpendicular to the port row(s) regardless of orientation"/>
            <prop name="width" type="Number" category="Geometry" description="Panel width - always parallel to the port row(s) regardless of orientation"/>
            <prop name="orientation" type="String" choices="horizontal,vertical" required="true" default="horizontal" category="Geometry" description="Panel orientation: the direction ports are open to" />
            <prop name="nPorts" type="Number" required="true" default="12" category="Hardware" description="The number of ports (connectors)"/>
            <prop name="firstPort" type="Number" default="1" category="Network" description="The base number of the whole port range"/>
            <prop name="portType" type="String" choices="RJ45, FC, FC-APC, SC, SC-APC" default="FC" category="Hardware" description="The type of ports (connectors standard)"/>
            <prop name="nPortRows" type="Number" default="1" category="Geometry" description="The number of port rows"/>
            <prop name="portLayout" type="String" choices="in-line, zigzag" category="Geometry" />
            <prop name="portLabelPosition" type="String" choices="above,below,before,after,none" category="Presentation" description="Position of the port labels (if any)" />
            <prop name="portLabels" type="Object" default="{}" category="Network" description="Port (fiber) labels"/>
            <prop name="color" type="String" default="#f0e8cb" category="Presentation"/>
            <prop name="strokeColor" type="String" default="#d3bc69" category="Presentation"/>
            <prop name="fibers-info" type="Object" category="Optics" description="Various optical parameters of the individual fibers"/>
        </props>
        <computed-props>
            <computed-prop name="padding">0.4</computed-prop><!-- relative to portSize -->
            <computed-prop name="interPortGap">0.2</computed-prop><!-- relative to portSize -->
            <computed-prop name="portLayout">props.portLayout ?? (props.portType.startsWith("FC") ? "zigzag" : "in-line")</computed-prop>
            <computed-prop name="portClass">`Kre:${props.portType}-Port`</computed-prop>
            <computed-prop name="portSize">1/(props.nPortRows + (props.nPortRows-1)*computedProps.interPortGap + 2*computedProps.padding)</computed-prop><!-- relative to height -->
            <computed-prop name="height">props.height ?? 25 * (props.nPortRows + (props.nPortRows-1)*computedProps.interPortGap + 2*computedProps.padding)</computed-prop>
            <computed-prop name="width">
                props.width ?? computedProps.height * computedProps.portSize * 
                    (props.nPorts/props.nPortRows + (props.nPorts/props.nPortRows-1)*computedProps.interPortGap + 2*computedProps.padding 
                     + (computedProps.portLayout === 'zigzag' &amp;&amp; props.nPortRows > 1 ? 0.5 : 0))
            </computed-prop>
            <computed-prop name="w">props.orientation === "horizontal" ? computedProps.width : computedProps.height</computed-prop>
            <computed-prop name="h">props.orientation === "horizontal" ? computedProps.height : computedProps.width</computed-prop>
            <computed-prop name="labelHeight">computedProps.portSize * (1+computedProps.interPortGap) * computedProps.height / props.nPortRows</computed-prop>
            <computed-prop name="labelFontSize">computedProps.labelHeight*0.8</computed-prop>
            <computed-prop name="labelWidth">
                (Math.max(0, ...Object.values(props.portLabels).map(l =&gt; l.length)))*computedProps.labelFontSize*0.75
            </computed-prop>
            <computed-prop name="firstLabelX">
                props.portLabelPosition==="before" ? -computedProps.labelWidth :
                props.portLabelPosition==="after" ? computedProps.height :
                    (computedProps.padding + (computedProps.portLayout==="zigzag" ? 0.25 : -0.125)) * computedProps.portSize * computedProps.height
            </computed-prop>
            <computed-prop name="firstLabelY">
                props.portLabelPosition==="below" ? computedProps.height :
                props.portLabelPosition==="above" ? -computedProps.labelWidth :
                    (computedProps.padding + (computedProps.portLayout==="zigzag" ? 0.25 : -0.125)) * computedProps.portSize * computedProps.height
            </computed-prop>
        </computed-props>
        <style>
            .port-icon.body {fill: #212121;}
            .port-label .pad {fill-opacity: 0.75; fill: #e8f7f7; }
            .port-label.row3 .pad {filter: saturate(0.85) brightness(0.85)}
            .port-label.row2 .pad {filter: saturate(0.9) brightness(0.9)}
            .port-label.row1 .pad {filter: saturate(0.95) brightness(0.95)}
            .port-label .frame {stroke: lightgray; fill: none}
            .port-label text {fill: #333333; font-family: sans-serif;}
        </style>
    </component-class>

    <component-class name="MuxPatchPanel" category="OpticalEquipment">
        <template>
            <Kre:PatchPanel v-bind:comment="comment" v-bind:width="width" v-bind:height="height" v-bind:orientation="orientation"
                v-bind:n-ports="nPorts" v-bind:first-port="firstPort" v-bind:n-port-rows="nPortRows" v-bind:port-layout="portLayout" v-bind:port-label-position="portLabelPosition"
                v-bind:port-labels="portLabels" v-bind:color="color" v-bind:stroke-color="strokeColor" v-bind:fibers-info="fibersInfo"/>
        </template>
        <props extend="PatchPanel, OpticalMultiplexer"></props>
    </component-class>
</kresmer-library>