<?xml version="1.0" encoding="utf-8"?>
<?xml-model href="xsd/kresmer-library.xsd"?>
<!-- **************************************************************************>
 *                            ðŸ‘‘ KresMer ðŸ‘‘
 *       "Kreslennya Merezh" - network diagram editor and viewer
 *      Copyright (C) 2022-2023 Dmitriy Stepanenko. All Rights Reserved.
 * ___________________________________________________________________________
 *                        Block Diagrams library
 *    This library contains graphics block-diagrams and similar drawings.
<*************************************************************************** -->
<kresmer-library name="block-diagrams" xmlns:Kre="Kre" xmlns:v-bind="v-bind" xmlns:v-on="v-on" xmlns:v-slot="v-slot">

    <component-class name="RectangularBlock" category="BlockDiagrams">
        <template>
            <rect x="0" y="0" v-bind:width="width" v-bind:height="height"
                v-bind:fill="fill" v-bind:stroke="strokeColor" v-bind:stroke-width="strokeWidth" stroke-opacity="0.5"
                v-bind:rx="cornerRadius"
                />
            <connection-point v-for="({x, y, dir}, name) in connectionPoints" v-bind="{name, x, y, dir, d: 16}"/>
            <template v-if="caption">
                <a v-if="captionHref" class="caption href" v-bind:href="$href(captionHref)"><text v-bind="captionParams">{{caption}}</text></a>
                <text v-else="" class="caption" v-bind="captionParams">{{caption}}</text>
            </template>
            <text v-if="subtitle" class="subtitle" v-bind="subtitleParams">{{subtitle}}</text>
        </template>
        <props>
            <prop name="width" type="Number" required="true" default="300" category="Geometry"/>
            <prop name="height" type="Number" required="true" default="100" category="Geometry" />
            <prop name="corner-radius" type="Number" category="Geometry" />
            <prop name="fill" type="Color" default="#d3d3d3" category="Presentation"/>
            <prop name="stroke-color" type="Color" default="#000000" category="Presentation"/>
            <prop name="stroke-width" type="String" default="1px" category="Presentation"/>
            <prop name="caption" type="String"/>
            <prop name="caption-color" type="Color" default="#000000" category="Presentation"/>
            <prop name="caption-pos" type="String" default="center" 
                  choices="center, top, bottom, left, right, above, below, before, after" category="Presentation"/>
            <prop name="caption-href" type="String" description="Optional hyperlink for the caption" />
            <prop name="font-size" type="String" default="32" category="Presentation"/>
            <prop name="font-family" type="String" category="Presentation"/>
            <prop name="subtitle" type="String"/>
            <prop name="subtitle-font-size" type="String" category="Presentation"/>
        </props>
        <computed-props>
            <computed-prop name="captionPos">
                props.captionPos === "center" ? {x: props.width/2, y: props.height/2} :
                props.captionPos === "left" ? {x: props.width*0.03, y: props.height/2} :
                props.captionPos === "before" ? {x: -props.width*0.03, y: props.height/2} :
                props.captionPos === "right"  ? {x: props.width*0.97, y: props.height/2} :
                props.captionPos === "after" ? {x: props.width*1.03, y: props.height/2} :
                props.captionPos === "top" || props.captionPos === "above" ? {x: props.width/2, y: 0} :
                    {x: props.width/2, y: props.height}
            </computed-prop>
            <computed-prop name="captionAnchor">
                ["center", "top", "above", "bottom", "below"].includes(props.captionPos) ? "middle" :
                ["right", "before"].includes(props.captionPos) ? "end" :
                    "start"
            </computed-prop>
            <computed-prop name="captionBaseline">
                ["center", "left", "before", "right", "after"].includes(props.captionPos) ? "middle" :
                ["top", "below"].includes(props.captionPos) ? "text-before-edge" :
                    "ideographic"
            </computed-prop>
            <computed-prop name="captionParams">
                {
                    ...computedProps.captionPos, fill: props.captionColor, "font-size": props.fontSize, "font-family": props.fontFamily,
                    "text-anchor": computedProps.captionAnchor, "dominant-baseline": computedProps.captionBaseline,
                }
            </computed-prop>
            <computed-prop name="subtitleFontSize">props.subtitleFontSize ?? props.fontSize*0.75</computed-prop>
            <computed-prop name="subtitlePos">
                {
                    x: computedProps.captionPos.x, 
                    y: computedProps.captionPos.y + 
                       Number(computedProps.captionBaseline === "ideographic" ? computedProps.subtitleFontSize : props.fontSize)
                }
        </computed-prop>
            <computed-prop name="subtitleBaseline">
                computedProps.captionBaseline === "middle" ? "ideographic" :
                computedProps.captionBaseline === "text-before-edge" ? "hanging" :
                    computedProps.captionBaseline
            </computed-prop>
            <computed-prop name="subtitleParams">
                {
                    ...computedProps.subtitlePos, fill: props.captionColor, "font-size": props.subtitleFontSize, "font-family": props.fontFamily,
                    "text-anchor": computedProps.captionAnchor, "dominant-baseline": computedProps.subtitleBaseline,
                }
            </computed-prop>
            <computed-prop name="connectionPoints">
                {
                    n: {x: props.width*0.5, y: 0, dir: 270},
                    nne: {x: props.width*0.75, y: 0, dir: 270},
                    ne: {x: props.width, y: 0, dir: 360-Math.atan(props.height/props.width)},
                    nee: {x: props.width, y: props.height*0.25, dir: 0},
                    e: {x: props.width, y: props.height*0.5, dir: 0},
                    see: {x: props.width, y: props.height*0.75, dir: 0},
                    se: {x: props.width, y: props.height, dir: Math.atan(props.height/props.width)},
                    sse: {x: props.width*0.75, y: props.height, dir: 90},
                    s: {x: props.width*0.5, y: props.height, dir: 90},
                    ssw: {x: props.width*0.25, y: props.height, dir: 90},
                    sw: {x: 0, y: props.height, dir: 180-Math.atan(props.height/props.width)},
                    sww: {x: 0, y: props.height*0.75, dir: 180},
                    w: {x: 0, y: props.height*0.5, dir: 180},
                    nww: {x: 0, y: props.height*0.25, dir: 180},
                    nw: {x: 0, y: 0, dir: 180+Math.atan(props.height/props.width)},
                    nnw: {x: props.width*0.25, y: 0, dir: 270}
                }
            </computed-prop>
        </computed-props>
        <style>
            .caption {text-decoration: none}
            .caption.href:hover {text-decoration: underline}
            .subtitle {opacity: 0.7}
        </style>
    </component-class>

</kresmer-library>